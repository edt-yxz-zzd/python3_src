
# set PYTHONIOENCODING=utf8
#   > py .... > log.txt
#


#HHHHH
#TODO
r"""
#"""

from seed.tiny import str2__all__
__all__ = str2__all__(r'''#)
    #(''')
__all__ = '''
    '''.split()
from itertools import chain
from .abc import ABC, abstractmethod, override, not_implemented, ABCMeta
    # since abc.ABC has no "__slots__ = ()"
    __slots__ = ()
    (printf "\"%s\"\0" "class \|__slots__ =" && find -name "*.py" -and -not -path *-* -print0) | xargs -0 grep
class IXXX(metaclass=ABCMeta):
    __slots__ = ()
class IXXX(ABC):
    __slots__ = ()
    raise NotImplementedError

if __name__ == "__main__":
    import doctest
    doctest.testmod()
    #doctest: +ELLIPSIS
    #doctest: +NORMALIZE_WHITESPACE
    #doctest: +IGNORE_EXCEPTION_DETAIL
    #Traceback (most recent call last):

if __name__ == '__main__':
    classes = [XXX]
    excludes = '''
        logic
        error
        '''.split()

    from seed.helper.ongo import main
    main(modules=[__name__], classes=classes, excludes=excludes)

from seed.helper.repr_input import repr_helper_ex
from seed.helper.repr_input import repr_helper
    def __repr__(self):
        return repr_helper(self, *args, **kwargs)
        return repr_helper_ex(self, args, ordered_attrs, kwargs, ordered_attrs_only=False)
from seed.abc import abstractmethod, ABC, final, override
from seed.decorators.__special_method__ import (
    __static_method__
    ,__class_method__
    ,__instance_method__
    )



if __name__ == "__main__":
    from timeit import timeit
    from time import perf_counter, process_time
    from random import *




if __name__ == '__main__':
    from seed.test_utils.generate_test_data import str2values_by_line2expr
    data = '''
        [input], [output]
        [input], [output]
        '''
    data = str2values_by_line2expr(data)




def main(args=None):
  from seed.for_libs.for_argparse.subcmd import Main4subcmd
  class Main(Main4subcmd):
    def on_subcmd__search(sf, subcmd_name, parsed_args):
        return _main_subcmd_search(parsed_args)
    def on_subcmd__readline(sf, subcmd_name, parsed_args):
        return _main_subcmd_readline(parsed_args)
    def on_no_subcmd(sf, subcmd_name, parsed_args):
        raise NotImplementedError
    @classmethod
    def _mk_option_config_(cls):
        '-> ([parent::ArgParserPrepare], [common_option::GetArgsKwargs], {group_name:{subcmd:ArgParserPrepare}})'
        return [], [], {'subcmd':_mk_subcmd2prepare()}
  return Main(description=_g_description, subcmd_dest_name='subcmd').main(args)



#_Main+main.Main(_Main, Main4subcmd): framework from <phone_txt>/txt/script/欧路词典.py
class _Main:
    def on_subcmd__search(sf, subcmd_name, parsed_args):
        return _main_subcmd_search(parsed_args)
    def on_subcmd__readline(sf, subcmd_name, parsed_args):
        return _main_subcmd_readline(parsed_args)
    def on_no_subcmd(sf, subcmd_name, parsed_args):
        raise NotImplementedError
    @classmethod
    def _mk_option_config_(cls):
        '-> ([parent::ArgParserPrepare], [common_option::GetArgsKwargs], {group_name:{subcmd:ArgParserPrepare}})'
        return [], [], {'subcmd':_mk_subcmd2prepare()}

        #below copy from seed.for_libs.for_argparse.subcmd
        Get, Pack = cls.Get, cls.Pack

        options_XXX = (
    [Get('-v', '--method_version', type=int, required=True, choices=(1,2,3), help='XXX method impl version')
    ,Get('-i', '--input', type=str, default=None, help='input file path')
    ,Get('-o', '--output', type=str, default=None, help='output file path')
    ,Get('-e', '--encoding', type=str, default='utf8', help='input/output file encoding')
    ,Get('-f', '--force', action='store_true', default = False, required=False, help='open mode for output file')
        ])
        options_YYY = (
    [
        ])


        prepare_XXX = Pack([], options_XXX, {})
        prepare_YYY = Pack([], options_YYY, {})
        subcmd2prepare_GROUP_A = (dict
            (XXX=prepare_XXX
            ,YYY=prepare_YYY
            ))
        subcmd2prepare_GROUP_B = (dict
            (
            ))
        group_name2subcmd2prepare = (dict
            (GROUP_A=subcmd2prepare_GROUP_A
            ,GROUP_B=subcmd2prepare_GROUP_B
            ))
        return [], [], group_name2subcmd2prepare
        def on_subcmd__XXX(sf, subcmd_name, parsed_args):
            'XXX'
        def on_subcmd__YYY(sf, subcmd_name, parsed_args):
            'YYY'
        def on_no_subcmd(sf, subcmd_name, parsed_args):
            raise NotImplementedError
def main(args=None):
    from seed.for_libs.for_argparse.subcmd import Main4subcmd
    class Main(_Main, Main4subcmd):
      pass
    return Main(description=_g_description, subcmd_dest_name='subcmd').main(args)



def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdin, may_open_stdout

    parser = argparse.ArgumentParser(
        description=description_str
        , epilog=epilog_str
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-i', '--input', type=str, default=None
                        , help='input file path')
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-e', '--encoding', type=str
                        , default='utf8'
                        , help='input/output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    encoding = args.encoding
    omode = 'wt' if args.force else 'xt'

    may_ifname = args.input
    with may_open_stdin(may_ifname, 'rt', encoding=encoding) as fin:

    may_ofname = args.output
    with may_open_stdout(may_ofname, omode, encoding=encoding) as fout:
if __name__ == "__main__":
    main()

from seed.tiny import does_run_as_main
if does_run_as_main(__name__):
    main()






if __name__ == '__main__':
    excludes = ???
    qnames = ???

    from seed.pkg_tools.dectect_all_unbound_names import DectectAllUnboundNames

    excludes = frozenset(excludes)
    for __name__ in qnames:
        print(f'module: {__name__}')
        unbound_names = forgots = (DectectAllUnboundNames.from_module_qname(__name__))

if __name__ == '__main__':
    XXX = ???

    from seed.helper.print_methods import wrapped_print_methods
    wrapped_print_methods(XXX)

    from seed.helper.detect_method_conflict import \
        wrapped_print_detect_method_conflict
    wrapped_print_detect_method_conflict(XXX)

    from seed.helper.find_bases_without_slots import print_bases_without_slots
    print_bases_without_slots(XXX)


if __name__ == '__main__':
    from seed.helper.print_global_names import print_global_names
    print_global_names(globals())

if __name__ == '__main__':
    print('\n'.join(dir(XXX)))
    print('\n'.join(n for n in dir(XXX) if getattr(getattr(XXX, n), '__isabstractmethod__', False)))
    print('\n'.join('\n\t'.join([XXX.__name__, '\n\t'.join(dir(XXX))]) for XXX in map(globals().__getitem__, __all__) if isinstance(XXX, type)))















ValueError
    UnicodeError(encoding, object, start, end, reason)
        # args not kwargs, order is important
        # exc.object[err.start:err.end]

        UnicodeDecodeError
        UnicodeEncodeError
        UnicodeTranslateError




#subcmd
  python -m unittest discover
python -m unittest test_module1 test_module2
python -m unittest test_module.TestClass
python -m unittest test_module.TestClass.test_method
python -m unittest tests/test_something.py
  -f, --failfast
      Stop the test run on the first error or failure.
  --locals
      Show local variables in tracebacks.



import unittest

@unittest.skip("showing class skipping")
class TestStringMethods(unittest.TestCase):
    def setUp(self):
        self.widget = Widget('The widget')
    def tearDown(self):
        self.widget.dispose()

    #loop-test!!!!!!!!!!!!!
    def test_even(self):
        for i in range(0, 6):
            with self.subTest(i=i):
                self.assertEqual(i % 2, 0)

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')
    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())
    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)


    @unittest.expectedFailure
    def test_fail(self):
        self.assertEqual(1, 0, "broken")
    @unittest.skip("demonstrating skipping")
    def test_nothing(self):
        self.fail("shouldn't happen")
    @unittest.skipIf(mylib.__version__ < (1, 3),
                     "not supported in this library version")
    def test_format(self):
        # Tests that work for only a certain version of the library.
        pass
    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_windows_support(self):
        # windows specific testing code
        pass
    def test_maybe_skipped(self):
        if not external_resource_available():
            self.skipTest("external resource not available")
        # test code that depends on the external resource
        pass



if __name__ == '__main__':
    unittest.main()







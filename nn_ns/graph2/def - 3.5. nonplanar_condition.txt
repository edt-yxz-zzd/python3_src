
nonplanar_condition for ugraph vs nonplanar_condition for ugraph_fake_embedding
    this txt: "nonplanar_condition for ugraph_fake_embedding"
    since "nonplanar_condition for ugraph" is well-known
        K[3,3]  or  K[5]    ugraph
        6       or  5       distinguish end-fverties
        9       or  10      simple_nonempty_paths with distinguish middle-fverties


nonplanar_condition vs non_relax_planar_condition
    nonplanar_condition
        "planar" defined for hedge2next_hedge_around_vertex only
        hedge2next_hedge_around_vertex can be
            * hedge2fake_clockwise_next_hedge_around_vertex
                visit fface in counterclockwise
            * hedge2fake_clockwise_prev_hedge_around_vertex
                visit fface in clockwise
    non_relax_planar_condition
        "relax planar" defined for fake_embedding only
        "relax" means no shared fake face for more than twe connected components

# simplest nonplanar_condition is the_two_nonparallel_loops:
#   ([hedge_of_loop], ([], end_fvertex), [hedge_of_loop])
#
nonplanar_condition = (simple_nonempty_path, simple_path, simple_nonempty_path)
    where
        # allow begin_fvertex == end_fvertex
        #   i.e. allow p1/3 to be simple_nonempty_cycle
        #   allow p2 to be emtpy path or simple_nonempty_cycle

        # same begin and end
        let (p1, p2, p3) = nonplanar_condition
        assert p1.begin_fvertex == p2.begin_fvertex == p3.begin_fvertex
        assert p1.end_fvertex == p2.end_fvertex == p3.end_fvertex

        # donot shared middle fverties
        assert len(set(p1.fverties[1:] + p2.fverties[1:] + p3.fverties[1:])) == len(p1)+len(p2)+len(p3)-3

        # 3-end-hedges around two end-fverties embbeding in same direction
        # assume hedge2next_hedge_around_vertex is hedge2fake_clockwise_next_hedge_around_vertex
        #   since we just need to test whether them in same direction
        let b1 = is (p1.begin_hedge, p2.begin_hedge, p3.begin_hedge) in clockwise?
            b2 = is (p1.begin_hedge, p2.begin_hedge, p3.begin_hedge) in clockwise?

        assert b1 == b2

def is_in_clockwise(h1, h2, h3, hedge2fake_clockwise_next_hedge_around_vertex):
    it = iter_cycle_from(hedge2fake_clockwise_next_hedge_around_vertex, h1)
    ls = list(it)

    i1 = ls.index(h1)
    assert i1 == 0

    i2 = ls.index(h2)
    i3 = ls.index(h3)
    #if i2 == i3: raise logic-error
    # allow i1 == i2 == i3
    return i2 <= i3







[ver2] nonplanar_condition
    by dfs via ugraph-fake_embedding hedge2fake_clockwise_prev_hedge_around_vertex
                      --------arc4-------
                     /                   \
            --arc5-- |---------          |
           /         |         \         |
           v         v         |         |
    ... -> A -arc1-> B -arc2-> C -arc3-> D -> ...

    NOTE: A/B/C/D can be same fvertex
    arc1/2/3 is dfs tree arcs0 # maybe empty path
    arc4/5 is dfs back edge # nonempty_path

    we compare arc5 and arc4 by:
        hedge = hedge2another_hedge[arc[-1]]
        fvertex = hedge2fvertex[hedge] # A or B

        # generated by dfs:
        #   fvertex2depth
        #   hedge2clockwise_idx_around_vertex
        #       begin from tree arc, index hedge in clockwise
        depth = fvertex2depth[fvertex]
        clockwise_idx_around_vertex = hedge2clockwise_idx_around_vertex[hedge]
        compare via (depth, clockwise_idx_around_vertex)
    if compare(arc5, arc4) == LT:
        nonplanar_condition = (arc3+arc4, reverse_path(arc2), arc5+arc1)



[ver1] nonplanar_condition
    by merge fface in relax-biconnected-ugraph-fake_embedding
frontier fverties: A-arc1->B-arc2->C-arc3->D-arc4->A
fverties of two cross outer paths: A-arc5->C, B-arc6->D
==>> nonplanar_condition:
    bug: path from outside to inside
        cycle: A-arc1->B-arc6->D-arc4->A
        path: A-arc5->C-arc3->D
    correct:
        cycle: A-arc5->C-arc3->D-arc4->A
        path: A-arc1->B-arc6->D

      -----arc5->
     /           |
    A -arc1-> B ----
    ^         |  |  |
    |         |  |  |
    arc4    arc2 |  arc6
    |         |  |  |
    |         v  |  |
    D <-arc3- C-/   |
     \----------<---





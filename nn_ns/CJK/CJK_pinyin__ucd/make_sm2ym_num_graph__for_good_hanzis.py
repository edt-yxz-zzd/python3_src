
__all__ = '''
    sm2ym_num_graph__for_good_hanzis
    make_sm2ym_num_graph__for_good_hanzis
    '''.split()


from .sm2ym2num2good_hanzi_str import sm2ym2num2good_hanzi_str
from collections import defaultdict

def make_sm2ym_num_graph__for_good_hanzis(sm2ym2num2good_hanzis):
    #-> sm2ym_num_ls
    sm2ym_nums = defaultdict(set)
    for sm, ym2num2good_hanzis in sm2ym2num2good_hanzis.items():
        for ym, num2good_hanzis in ym2num2good_hanzis.items():
            for num in num2good_hanzis:
                ym_num = f'{ym}{num}'
                sm2ym_nums[sm].add(ym_num)
    sm2ym_num_ls = {sm:sorted(ym_nums)
                    for sm, ym_nums in sm2ym_nums.items()}
    return sm2ym_num_ls

(sm2ym_num_graph__for_good_hanzis
) = make_sm2ym_num_graph__for_good_hanzis(sm2ym2num2good_hanzi_str)



def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint
    from pathlib import PurePath as Path
    this_file = Path(__file__)
    this_folder = this_file.parent
    this_file_name = this_file.name

    parser = argparse.ArgumentParser(
        description=f'make sm2ym_num_graph__for_good_hanzis from sm2ym2num2good_hanzis'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'
    var_name = 'sm2ym_num_graph__for_good_hanzis'
    sm2ym_num_graph = globals()[var_name]

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / f'{var_name}.py'
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{var_name} generated by {this_file_name}', file=fout);
        print(f'{var_name} = \\', file=fout);
        pprint(sm2ym_num_graph, stream=fout)



if __name__ == '__main__':
    main()


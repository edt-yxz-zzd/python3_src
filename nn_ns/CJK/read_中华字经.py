

class Global:
    size = 3980
    var_name = f'chars_{size}'

    ifname = '中华字经[郭保华][2003].txt'
    iencoding = 'utf8'
    ofname = f'{var_name}.py'
    oencoding = 'utf8'

def read_中华字经(ifile):
    to_dels = '，。^　.[ ]*203\ufffd\n\r'
    txt = ifile.read()
    char_set = set(txt)
    char_set = char_set - set(to_dels)
    try:
        assert len(char_set) == Global.size
    except:
        print(len(char_set))
        print(char_set)
        from seed.iters.duplicate_elements import iter_duplicate_representative_elements
        s = ''.join(iter_duplicate_representative_elements(txt))
        print(s)
        raise

    chars = ''.join(sorted(char_set))
    return chars


def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint
    from pathlib import PurePath as Path
    this_file = Path(__file__)
    this_folder = this_file.parent
    this_file_name = this_file.name

    parser = argparse.ArgumentParser(
        description=f'read “{Global.ifname}”'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-i', '--input', type=str, default=None
                        , help='input file path')
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-ie', '--input_encoding', type=str
                        , default=Global.iencoding
                        , help='input file encoding')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default=Global.oencoding
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    input_encoding = args.input_encoding
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'

    may_ifname = args.input
    if may_ifname is None:
        ifname = this_folder / Global.ifname
    else:
        ifname = may_ifname
    with open(ifname, 'rt', encoding=input_encoding) as fin:
        chars_3980 = read_中华字经(fin)
    assert len(chars_3980) == Global.size

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / Global.ofname
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{Global.var_name} generated by {this_file_name}', file=fout);
        print(f'{Global.var_name} = \\', file=fout);
        pprint(chars_3980, stream=fout)


if __name__ == '__main__':
    main()



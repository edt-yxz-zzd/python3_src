#__all__:goto
r'''[[[
e ../../python3_src/nn_ns/CJK/iter_gbk_chars.py
view ../../python3_src/nn_ns/CJK/cjk_subsets/cjk_subsets__relationship.py.result.txt
view ../lots/NOTE/encoding/gbk-www.txt



nn_ns.CJK.iter_gbk_chars
py -m nn_ns.app.debug_cmd   nn_ns.CJK.iter_gbk_chars -x
py -m nn_ns.app.doctest_cmd nn_ns.CJK.iter_gbk_chars:__doc__ -ht   >  /sdcard/0my_files/tmp/0tmp      2>&1
view /sdcard/0my_files/tmp/0tmp




class CodecInfo(builtins.tuple)
|  CodecInfo(encode, decode, streamreader=None, streamwriter=None, incrementalencoder=None, incrementaldecoder=None, name=None, *, _is_text_encoding=None)

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,5:iter_all_2byte_chars_of_encoding_ +to_skip_fst_ascii  --encoding:gb2312
'\u3000'
'、'
'。'
'・'
'ˉ'

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,3:iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_  +to_skip_fst_ascii  --encoding:gb2312
((0xA1, 1), {0xA1: 94})
((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12})
((0xA3, 1), {0xA1: 94})

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_show4encodings  +to_skip_fst_ascii   ++encodings:gb2312 ++encodings:gbk
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_show4encodings  >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp


######################
######################
e ../../python3_src/nn_ns/CJK/CJK_data/raw/U+FF00全角字符.txt


py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6 +to_show_all

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,_findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6 -to_show_all --ea_gc_prefixes4exclude4return="'A. F.Ll: F.Lu: F.Nd: F.Zs: W.Nl: W.No: W.Lm: W.Lo: W.So:'.split()"
111
'、。〃〈〉《》「」『』【】〔〕〖〗〝〞゛゜︰︱︳︴︵ ︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦﹨﹩﹪﹫！＂＃＄％＆＇（）＊＋，－．／：；＜＝＞？＠［＼］＾＿｀｛｜｝～￠￡￢￣￤￥'
{0x3001: 3, 0x3008: 10, 0x3014: 4, 0x301D: 2, 0x309B: 2, 0xFE30: 2, 0xFE33: 18, 0xFE49: 10, 0xFE54: 4, 0xFE59: 14, 0xFE68: 4, 0xFF01: 15, 0xFF1A: 7, 0xFF3B: 6, 0xFF5B: 4, 0xFFE0: 6}

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,_findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6 -to_show_all --may_ea_gc_prefixes4include4return="'F.Ll: F.Lu: F.Nd: W.Nl: W.No: '.split()"
82
'〇〡〢〣〤〥〦〧〨〩㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩０１２３４５ ６７８９ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ'
{0x3007: 1, 0x3021: 9, 0x3220: 10, 0xFF10: 10, 0xFF21: 26, 0xFF41: 26}

######################
######################



######################
######################
#found:bug:missing_max_value_of_fst_byte:
######################
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,_iter_all_2byte_char_pairs__by_filter_2Bs_of_encoding_ --encoding:gbk '=[b"\xfeG"]'
(b'\xfeG', '礼')

>>> c=chr(0xFA18)
>>> c
'礼'
>>> c.encode('gbk')
b'\xfeG'

py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_  +to_skip_fst_ascii  --encoding:gbk
    found:bug:missing_max_value_of_fst_byte "0xFE"
        fixed
######################
######################





>>> from seed.tiny_.HexReprInt import HEXReprInt as HexReprInt
>>> HexReprInt(9) == 9
True
>>> {HexReprInt(9):HexReprInt(9)} == {9:9}
True

>>> def show_(xs, /):
...     for x in xs:print(x)
>>> show_(iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gb2312', to_skip_fst_ascii=True))
((0xA1, 1), {0xA1: 94})
((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12})
((0xA3, 1), {0xA1: 94})
((0xA4, 1), {0xA1: 83})
((0xA5, 1), {0xA1: 86})
((0xA6, 1), {0xA1: 24, 0xC1: 24})
((0xA7, 1), {0xA1: 33, 0xD1: 33})
((0xA8, 1), {0xA1: 26, 0xC5: 37})
((0xA9, 1), {0xA4: 76})
((0xB0, 39), {0xA1: 94})
((0xD7, 1), {0xA1: 89})
((0xD8, 32), {0xA1: 94})


>>> show_(iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gbk', to_skip_fst_ascii=True))
((0x81, 32), {0x40: 63, 0x80: 127})
((0xA1, 1), {0xA1: 94})
((0xA2, 1), {0xA1: 10, 0xB1: 50, 0xE5: 10, 0xF1: 12})
((0xA3, 1), {0xA1: 94})
((0xA4, 1), {0xA1: 83})
((0xA5, 1), {0xA1: 86})
((0xA6, 1), {0xA1: 24, 0xC1: 24, 0xE0: 12, 0xEE: 5, 0xF4: 2})
((0xA7, 1), {0xA1: 33, 0xD1: 33})
((0xA8, 1), {0x40: 63, 0x80: 22, 0xA1: 27, 0xBD: 2, 0xC0: 1, 0xC5: 37})
((0xA9, 1), {0x40: 24, 0x59: 2, 0x5C: 1, 0x60: 31, 0x80: 9, 0x96: 1, 0xA4: 76})
((0xAA, 6), {0x40: 63, 0x80: 33})
((0xB0, 39), {0x40: 63, 0x80: 127})
((0xD7, 1), {0x40: 63, 0x80: 122})
((0xD8, 32), {0x40: 63, 0x80: 127})
((0xF8, 6), {0x40: 63, 0x80: 33})
((0xFE, 1), {0x40: 16})


>>> show_(iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gb18030', to_skip_fst_ascii=True))
((0x81, 126), {0x40: 63, 0x80: 127})

>>> show_(iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb18030())
((0x81, 126), {0x40: 63, 0x80: 127})



[[[
view ../../python3_src/nn_ns/CJK/cjk_subsets/cjk_subsets__relationship.py.result.txt
===
>>> _show4encodings() #doctest: +SKIP
======================
(encoding=big5, to_skip_fst_ascii=True)
,((0xA1, 1), {0x40: 63, 0xA1: 93})
,((0xA2, 1), {0x41: 62, 0xA1: 43, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31})
,((0xA4, 35), {0x40: 63, 0xA1: 94})
,((0xC7, 1), {0x40: 63, 0xA1: 92})
,((0xC9, 48), {0x40: 63, 0xA1: 94})
,((0xF9, 1), {0x40: 63, 0xA1: 53})
======================
(encoding=big5hkscs, to_skip_fst_ascii=True)
,((0x87, 1), {0x40: 38, 0x67: 19})
,((0x88, 1), {0x40: 34, 0x63: 1, 0x65: 26, 0xA1: 2, 0xA4: 1, 0xA6: 5})
,((0x89, 1), {0x40: 2, 0x43: 1, 0x46: 4, 0x4C: 51, 0xA1: 6, 0xAB: 4, 0xB0: 3, 0xB5: 11, 0xC1: 3, 0xC5: 58})
,((0x8A, 1), {0x40: 2, 0x43: 32, 0x64: 17, 0x76: 9, 0xA1: 10, 0xAC: 5, 0xB2: 8, 0xBB: 13, 0xC9: 4, 0xCE: 15, 0xDF: 22, 0xF6: 9})
,((0x8B, 1), {0x40: 20, 0x55: 42, 0xA1: 60, 0xDE: 32})
,((0x8C, 1), {0x40: 63, 0xA1: 5, 0xA7: 31, 0xC9: 4, 0xCE: 23, 0xE6: 25})
,((0x8D, 1), {0x40: 1, 0x42: 61, 0xA1: 94})
,((0x8E, 1), {0x40: 41, 0x6A: 5, 0x70: 14, 0xA1: 10, 0xAC: 8, 0xB5: 24, 0xCE: 2, 0xD1: 46})
,((0x8F, 1), {0x40: 23, 0x58: 17, 0x6A: 4, 0x6F: 16, 0xA1: 42, 0xCD: 49})
,((0x90, 1), {0x40: 45, 0x6E: 12, 0x7B: 4, 0xA1: 59, 0xDD: 20, 0xF2: 13})
,((0x91, 1), {0x40: 63, 0xA1: 30, 0xC0: 63})
,((0x92, 1), {0x40: 4, 0x45: 58, 0xA1: 14, 0xB3: 21, 0xC9: 8, 0xD2: 45})
,((0x93, 1), {0x40: 63, 0xA1: 94})
,((0x94, 1), {0x40: 7, 0x48: 55, 0xA1: 41, 0xCB: 52})
,((0x95, 1), {0x40: 63, 0xA1: 56, 0xDA: 37})
,((0x96, 1), {0x40: 4, 0x45: 58, 0xA1: 76, 0xEE: 14, 0xFD: 2})
,((0x97, 4), {0x40: 63, 0xA1: 94})
,((0x9B, 1), {0x40: 33, 0x62: 20, 0x77: 1, 0x79: 2, 0x7C: 3, 0xA1: 37, 0xC7: 23, 0xDF: 13, 0xED: 9, 0xF7: 8})
,((0x9C, 1), {0x40: 2, 0x43: 16, 0x54: 14, 0x63: 5, 0x69: 2, 0x6C: 11, 0x78: 7, 0xA1: 27, 0xBE: 18, 0xD1: 46})
,((0x9D, 1), {0x40: 23, 0x58: 2, 0x5B: 36, 0xA1: 35, 0xC5: 58})
,((0x9E, 1), {0x40: 63, 0xA1: 8, 0xAA: 2, 0xAD: 23, 0xC5: 42, 0xF0: 4, 0xF5: 8, 0xFE: 1})
,((0x9F, 1), {0x40: 14, 0x4F: 17, 0x61: 5, 0x67: 24, 0xA1: 12, 0xAE: 3, 0xB2: 14, 0xC1: 7, 0xC9: 2, 0xCC: 12, 0xD9: 1, 0xDB: 11, 0xE7: 3, 0xEB: 4, 0xF0: 15})
,((0xA0, 1), {0x40: 20, 0x55: 2, 0x58: 2, 0x5B: 7, 0x64: 14, 0x73: 4, 0x78: 7, 0xA1: 4, 0xA6: 7, 0xAE: 1, 0xB0: 35, 0xD4: 1, 0xD6: 9, 0xE0: 1, 0xE2: 2, 0xE5: 26})
,((0xA1, 1), {0x40: 63, 0xA1: 93})
,((0xA2, 1), {0x41: 61, 0xA8: 36, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31})
,((0xA4, 34), {0x40: 63, 0xA1: 94})
,((0xC6, 1), {0x40: 63, 0xA1: 46, 0xD0: 3, 0xD4: 1, 0xD6: 1, 0xD8: 6, 0xE0: 31})
,((0xC7, 1), {0x40: 63, 0xA1: 94})
,((0xC8, 1), {0x40: 63, 0xA1: 4, 0xCD: 37, 0xF5: 10})
,((0xC9, 49), {0x40: 63, 0xA1: 94})
,((0xFA, 1), {0x40: 31, 0x60: 6, 0x67: 24, 0xA1: 28, 0xBE: 7, 0xC6: 15, 0xD6: 41})
,((0xFB, 1), {0x40: 8, 0x49: 54, 0xA1: 23, 0xB9: 58, 0xF4: 5, 0xFA: 5})
,((0xFC, 1), {0x40: 15, 0x50: 28, 0x6D: 18, 0xA1: 24, 0xBA: 40, 0xE3: 14, 0xF2: 13})
,((0xFD, 1), {0x40: 63, 0xA1: 22, 0xB9: 2, 0xBC: 53, 0xF2: 13})
,((0xFE, 1), {0x40: 18, 0x53: 28, 0x70: 15, 0xA1: 9, 0xAB: 50, 0xDE: 33})
======================
(encoding=cp1258, to_skip_fst_ascii=True)
======================
(encoding=cp932, to_skip_fst_ascii=True)
,((0x81, 1), {0x40: 63, 0x80: 45, 0xB8: 8, 0xC8: 7, 0xDA: 15, 0xF0: 8, 0xFC: 1})
,((0x82, 1), {0x4F: 10, 0x60: 26, 0x81: 26, 0x9F: 83})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 24, 0xBF: 24})
,((0x84, 1), {0x40: 33, 0x70: 15, 0x80: 18, 0x9F: 32})
,((0x87, 1), {0x40: 30, 0x5F: 23, 0x7E: 1, 0x80: 16, 0x93: 2, 0x98: 2})
,((0x88, 1), {0x9F: 94})
,((0x89, 15), {0x40: 63, 0x80: 125})
,((0x98, 1), {0x40: 51, 0x9F: 94})
,((0x99, 7), {0x40: 63, 0x80: 125})
,((0xE0, 10), {0x40: 63, 0x80: 125})
,((0xEA, 1), {0x40: 63, 0x80: 37})
,((0xED, 1), {0x40: 63, 0x80: 125})
,((0xEE, 1), {0x40: 63, 0x80: 109, 0xEF: 10, 0xFA: 3})
,((0xF0, 10), {0x40: 63, 0x80: 125})
======================
(encoding=cp949, to_skip_fst_ascii=True)
,((0x81, 33), {0x41: 26, 0x61: 26, 0x81: 126})
,((0xA2, 1), {0x41: 26, 0x61: 26, 0x81: 103})
,((0xA3, 2), {0x41: 26, 0x61: 26, 0x81: 126})
,((0xA5, 1), {0x41: 26, 0x61: 26, 0x81: 42, 0xB0: 10, 0xC1: 24, 0xE1: 24})
,((0xA6, 1), {0x41: 26, 0x61: 26, 0x81: 100})
,((0xA7, 1), {0x41: 26, 0x61: 26, 0x81: 111})
,((0xA8, 1), {0x41: 26, 0x61: 26, 0x81: 36, 0xA6: 1, 0xA8: 8, 0xB1: 78})
,((0xA9, 1), {0x41: 26, 0x61: 26, 0x81: 126})
,((0xAA, 1), {0x41: 26, 0x61: 26, 0x81: 115})
,((0xAB, 1), {0x41: 26, 0x61: 26, 0x81: 118})
,((0xAC, 1), {0x41: 26, 0x61: 26, 0x81: 65, 0xD1: 33})
,((0xAD, 3), {0x41: 26, 0x61: 26, 0x81: 32})
,((0xB0, 22), {0x41: 26, 0x61: 26, 0x81: 126})
,((0xC6, 1), {0x41: 18, 0xA1: 94})
,((0xC7, 2), {0xA1: 94})
,((0xCA, 52), {0xA1: 94})
======================
(encoding=euc_kr, to_skip_fst_ascii=True)
,((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xA1: 71})
,((0xA3, 1), {0xA1: 94})
,((0xA4, 1), {0xA1: 51, 0xD5: 42})
,((0xA5, 1), {0xA1: 10, 0xB0: 10, 0xC1: 24, 0xE1: 24})
,((0xA6, 1), {0xA1: 68})
,((0xA7, 1), {0xA1: 79})
,((0xA8, 1), {0xA1: 4, 0xA6: 1, 0xA8: 8, 0xB1: 78})
,((0xA9, 1), {0xA1: 94})
,((0xAA, 1), {0xA1: 83})
,((0xAB, 1), {0xA1: 86})
,((0xAC, 1), {0xA1: 33, 0xD1: 33})
,((0xB0, 25), {0xA1: 94})
,((0xCA, 52), {0xA1: 94})
======================
(encoding=iso2022_kr, to_skip_fst_ascii=True)
======================
(encoding=johab, to_skip_fst_ascii=True)
,((0x84, 1), {0x44: 1, 0x46: 2, 0x4A: 7, 0x54: 1, 0x61: 1, 0x81: 1, 0xA1: 1, 0xC1: 1, 0xE1: 1})
,((0x85, 2), {0x41: 1, 0x61: 1, 0x81: 1, 0xA1: 1, 0xC1: 1, 0xE1: 1})
,((0x87, 1), {0x41: 1, 0x61: 1, 0x81: 1, 0xA1: 1})
,((0x88, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x89, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x8B, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0x8C, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x8D, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x8F, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0x90, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x91, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x93, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0x94, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x95, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x97, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0x98, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x99, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x9B, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0x9C, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x9D, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0x9F, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xA0, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xA1, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xA3, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xA4, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xA5, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xA7, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xA8, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xA9, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xAB, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xAC, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xAD, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xAF, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xB0, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xB1, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xB3, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xB4, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xB5, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xB7, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xB8, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xB9, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xBB, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xBC, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xBD, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xBF, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xC0, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xC1, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xC3, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xC4, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xC5, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xC7, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xC8, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xC9, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xCB, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xCC, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xCD, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xCF, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xD0, 1), {0x41: 1, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xD1, 2), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11, 0xC1: 17, 0xD3: 11, 0xE1: 17, 0xF3: 11})
,((0xD3, 1), {0x41: 17, 0x53: 11, 0x61: 17, 0x73: 11, 0x81: 17, 0x93: 11, 0xA1: 17, 0xB3: 11})
,((0xD9, 1), {0x31: 78, 0x91: 87})
,((0xDA, 1), {0x31: 78, 0x91: 16, 0xD4: 43})
,((0xDB, 1), {0x31: 10, 0x40: 10, 0x51: 24, 0x71: 14, 0x91: 10, 0xA1: 68})
,((0xDC, 1), {0x31: 78, 0x91: 1, 0xA1: 4, 0xA6: 1, 0xA8: 8, 0xB1: 78})
,((0xDD, 1), {0x31: 78, 0x91: 99})
,((0xDE, 1), {0x31: 78, 0x91: 8, 0xA1: 33, 0xD1: 33})
,((0xE0, 26), {0x31: 78, 0x91: 110})
======================
(encoding=cp950, to_skip_fst_ascii=True)
,((0xA1, 1), {0x40: 63, 0xA1: 94})
,((0xA2, 1), {0x40: 63, 0xA1: 43, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31, 0xE1: 1})
,((0xA4, 35), {0x40: 63, 0xA1: 94})
,((0xC7, 1), {0x40: 63, 0xA1: 92})
,((0xC9, 48), {0x40: 63, 0xA1: 94})
,((0xF9, 1), {0x40: 63, 0xA1: 72, 0xEC: 13, 0xFE: 1})
======================
(encoding=euc_jis_2004, to_skip_fst_ascii=True)
,((0x8E, 1), {0xA1: 63})
,((0xA1, 3), {0xA1: 94})
,((0xA4, 2), {0xA1: 86})
,((0xA6, 1), {0xA1: 87, 0xF9: 6})
,((0xA7, 1), {0xA1: 94})
,((0xA8, 1), {0xA1: 62, 0xE7: 22})
,((0xA9, 2), {0xA1: 94})
,((0xAB, 1), {0xA1: 35, 0xC5: 3, 0xD0: 21, 0xE7: 24})
,((0xAC, 1), {0xA1: 83, 0xFD: 2})
,((0xAD, 1), {0xA1: 55, 0xDF: 17, 0xF3: 1, 0xF8: 2, 0xFD: 2})
,((0xAE, 81), {0xA1: 94})
======================
(encoding=euc_jisx0213, to_skip_fst_ascii=True)
,((0x8E, 1), {0xA1: 63})
,((0xA1, 3), {0xA1: 94})
,((0xA4, 2), {0xA1: 86})
,((0xA6, 1), {0xA1: 87, 0xF9: 6})
,((0xA7, 1), {0xA1: 94})
,((0xA8, 1), {0xA1: 62, 0xE7: 22})
,((0xA9, 2), {0xA1: 94})
,((0xAB, 1), {0xA1: 35, 0xC5: 3, 0xD0: 21, 0xE7: 24})
,((0xAC, 1), {0xA1: 83, 0xFD: 2})
,((0xAD, 1), {0xA1: 55, 0xDF: 17, 0xF3: 1, 0xF8: 2, 0xFD: 2})
,((0xAE, 1), {0xA2: 93})
,((0xAF, 1), {0xA1: 93})
,((0xB0, 31), {0xA1: 94})
,((0xCF, 1), {0xA1: 51, 0xD5: 41})
,((0xD0, 36), {0xA1: 94})
,((0xF4, 1), {0xA1: 6, 0xA8: 87})
,((0xF5, 9), {0xA1: 94})
,((0xFE, 1), {0xA1: 89})
======================
(encoding=euc_jp, to_skip_fst_ascii=True)
,((0x8E, 1), {0xA1: 63})
,((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xA1: 14, 0xBA: 8, 0xCA: 7, 0xDC: 15, 0xF2: 8, 0xFE: 1})
,((0xA3, 1), {0xB0: 10, 0xC1: 26, 0xE1: 26})
,((0xA4, 1), {0xA1: 83})
,((0xA5, 1), {0xA1: 86})
,((0xA6, 1), {0xA1: 24, 0xC1: 24})
,((0xA7, 1), {0xA1: 33, 0xD1: 33})
,((0xA8, 1), {0xA1: 32})
,((0xB0, 31), {0xA1: 94})
,((0xCF, 1), {0xA1: 51})
,((0xD0, 36), {0xA1: 94})
,((0xF4, 1), {0xA1: 6})
======================
(encoding=iso2022_jp_1, to_skip_fst_ascii=True)
======================
(encoding=iso2022_jp_ext, to_skip_fst_ascii=True)
======================
(encoding=gb18030, to_skip_fst_ascii=True)
,((0x81, 126), {0x40: 63, 0x80: 127})
======================
(encoding=utf8, to_skip_fst_ascii=True)
,((0xC2, 30), {0x80: 64})
======================
(encoding=gb2312, to_skip_fst_ascii=True)
,((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12})
,((0xA3, 1), {0xA1: 94})
,((0xA4, 1), {0xA1: 83})
,((0xA5, 1), {0xA1: 86})
,((0xA6, 1), {0xA1: 24, 0xC1: 24})
,((0xA7, 1), {0xA1: 33, 0xD1: 33})
,((0xA8, 1), {0xA1: 26, 0xC5: 37})
,((0xA9, 1), {0xA4: 76})
,((0xB0, 39), {0xA1: 94})
,((0xD7, 1), {0xA1: 89})
,((0xD8, 32), {0xA1: 94})
======================
(encoding=hz, to_skip_fst_ascii=True)
======================
(encoding=gbk, to_skip_fst_ascii=True)
,((0x81, 32), {0x40: 63, 0x80: 127})
,((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xA1: 10, 0xB1: 50, 0xE5: 10, 0xF1: 12})
,((0xA3, 1), {0xA1: 94})
,((0xA4, 1), {0xA1: 83})
,((0xA5, 1), {0xA1: 86})
,((0xA6, 1), {0xA1: 24, 0xC1: 24, 0xE0: 12, 0xEE: 5, 0xF4: 2})
,((0xA7, 1), {0xA1: 33, 0xD1: 33})
,((0xA8, 1), {0x40: 63, 0x80: 22, 0xA1: 27, 0xBD: 2, 0xC0: 1, 0xC5: 37})
,((0xA9, 1), {0x40: 24, 0x59: 2, 0x5C: 1, 0x60: 31, 0x80: 9, 0x96: 1, 0xA4: 76})
,((0xAA, 6), {0x40: 63, 0x80: 33})
,((0xB0, 39), {0x40: 63, 0x80: 127})
,((0xD7, 1), {0x40: 63, 0x80: 122})
,((0xD8, 32), {0x40: 63, 0x80: 127})
,((0xF8, 6), {0x40: 63, 0x80: 33})
,((0xFE, 1), {0x40: 16})
======================
(encoding=iso2022_jp, to_skip_fst_ascii=True)
======================
(encoding=shift_jis, to_skip_fst_ascii=True)
,((0x81, 1), {0x40: 63, 0x80: 45, 0xB8: 8, 0xC8: 7, 0xDA: 15, 0xF0: 8, 0xFC: 1})
,((0x82, 1), {0x4F: 10, 0x60: 26, 0x81: 26, 0x9F: 83})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 24, 0xBF: 24})
,((0x84, 1), {0x40: 33, 0x70: 15, 0x80: 18, 0x9F: 32})
,((0x88, 1), {0x9F: 94})
,((0x89, 15), {0x40: 63, 0x80: 125})
,((0x98, 1), {0x40: 51, 0x9F: 94})
,((0x99, 7), {0x40: 63, 0x80: 125})
,((0xE0, 10), {0x40: 63, 0x80: 125})
,((0xEA, 1), {0x40: 63, 0x80: 37})
======================
(encoding=iso2022_jp_2, to_skip_fst_ascii=True)
======================
(encoding=iso2022_jp_2004, to_skip_fst_ascii=True)
======================
(encoding=shift_jis_2004, to_skip_fst_ascii=True)
,((0x81, 1), {0x40: 63, 0x80: 125})
,((0x82, 1), {0x40: 63, 0x80: 117})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 87, 0xF7: 6})
,((0x84, 1), {0x40: 63, 0x80: 93, 0xE5: 22})
,((0x85, 1), {0x40: 63, 0x80: 125})
,((0x86, 1), {0x40: 35, 0x64: 3, 0x6F: 16, 0x80: 5, 0x87: 107, 0xFB: 2})
,((0x87, 1), {0x40: 55, 0x7E: 1, 0x80: 16, 0x93: 1, 0x98: 2, 0x9D: 96})
,((0x88, 24), {0x40: 63, 0x80: 125})
,((0xE0, 28), {0x40: 63, 0x80: 125})
,((0xFC, 1), {0x40: 63, 0x80: 117})
======================
(encoding=iso2022_jp_3, to_skip_fst_ascii=True)
======================
(encoding=shift_jisx0213, to_skip_fst_ascii=True)
,((0x81, 1), {0x40: 63, 0x80: 125})
,((0x82, 1), {0x40: 63, 0x80: 117})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 87, 0xF7: 6})
,((0x84, 1), {0x40: 63, 0x80: 93, 0xE5: 22})
,((0x85, 1), {0x40: 63, 0x80: 125})
,((0x86, 1), {0x40: 35, 0x64: 3, 0x6F: 16, 0x80: 5, 0x87: 107, 0xFB: 2})
,((0x87, 1), {0x40: 55, 0x7E: 1, 0x80: 16, 0x93: 1, 0x98: 2, 0x9D: 2, 0xA0: 93})
,((0x88, 1), {0x40: 63, 0x80: 30, 0x9F: 94})
,((0x89, 15), {0x40: 63, 0x80: 125})
,((0x98, 1), {0x40: 51, 0x74: 11, 0x80: 30, 0x9F: 94})
,((0x99, 7), {0x40: 63, 0x80: 125})
,((0xE0, 10), {0x40: 63, 0x80: 125})
,((0xEA, 1), {0x40: 63, 0x80: 37, 0xA6: 87})
,((0xEB, 4), {0x40: 63, 0x80: 125})
,((0xEF, 1), {0x40: 63, 0x80: 120})
,((0xF0, 12), {0x40: 63, 0x80: 125})
,((0xFC, 1), {0x40: 63, 0x80: 117})

]]]


>>> clone_result_data4gb2312_gbk_gb18030() == (dict
... (gb2312=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb2312()]
... ,gbk=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gbk()]
... ,gb18030=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb18030()]
... ))
True

>>> clone_result_data4utf8_big5_big5hkscs__shift_jis__shift_jis_2004__shift_jisx0213() == (dict
... (utf8=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='utf8', to_skip_fst_ascii=True)]
... ,big5=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5()]
... ,big5hkscs=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5hkscs()]
... ,shift_jis=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='shift_jis', to_skip_fst_ascii=True)]
... ,shift_jis_2004=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='shift_jis_2004', to_skip_fst_ascii=True)]
... ,shift_jisx0213=[*iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='shift_jisx0213', to_skip_fst_ascii=True)]
... ))
True





>>> from seed.tiny_.dict__add_fmap_filter import fmap4dict_value

>>> fmap4dict_value(calc_total_of_hxsz8rng_hx2sz8rngs_pairs, clone_result_data4utf8_big5_big5hkscs__shift_jis__shift_jis_2004__shift_jisx0213()) == {'utf8': 1920, 'big5': 13706, 'big5hkscs': 18386, 'shift_jis': 6879, 'shift_jis_2004': 11208, 'shift_jisx0213': 11198}
True

#excludes:ASCII:
#@bug:missing_max_value_of_fst_byte:>>> fmap4dict_value(calc_total_of_hxsz8rng_hx2sz8rngs_pairs, clone_result_data4gb2312_gbk_gb18030()) == {'gb2312': 7351, 'gbk': 21775, 'gb18030': 23750}
True

>>> (7351 + 0x80 - 7445, 21775 + 0x80 - 21886, 23750 + 0x80 - 23940)
(34, 17, -62)

>>> fmap4dict_value(calc_total_of_hxsz8rng_hx2sz8rngs_pairs, clone_result_data4gb2312_gbk_gb18030()) == {'gb2312': 7445, 'gbk': 21791, 'gb18030': 23940}
True


view ../lots/NOTE/encoding/gbk-www.txt
total = (23940, 21887, 21886, 21791, 7445)
  #(总数纟编码点/total_code_pts,gb18030,gbk_1_0,cp936,gb2312)
  #
  # [6763+682==7445]#gb2312
  # [715+6763+6080+8080+153==21791]#cp936
  # [717+6763+6080+8160+166==21886]#gbk_1_0
  # [718+6763+6080+8160+166==21887]#gb18030
  # [846+6768+6080+8160+192 + 564+658+672 == 23940]#编码点:含:未赋值编码点+用户自定义区/?私用区?/?造字区?

==>>:
[len(2B & cp936) == 21791]
!! [len(2B & py3_11_9.gbk) == 21791]
    [py3_11_9.gbk =[def]= cp936]

>>> (7445 + 0x80 - 7445, 21791 + 0x80 - 21886, 21887 + 0x80 - 23940, 23940 + 0x80 - 23940)
(128, 33, -1925, 128)
>>> (7445 - 7445, 21791 - 21886, 21887 - 23940, 23940 - 23940)
(0, -95, -2053, 0)

[95
== len(2B & gbk_1_0) -len(2B & py3_11_9.gbk)
== len(2B & gbk_1_0) -len(2B & cp936)
]
why "95"??





[[
DONE:
双字节:同时可以解码为:utf8,gb18030,big5
===
摘要:
899双字节
    <<==gb2312/-\utf8/-\big5
    # [utf8双字节集合 <!> gb2312双字节集合]
    # [utf8双字节集合 < gbk双字节集合 < gb18030双字节集合]
    <<==gbk/-\utf8/-\big5
    <<==gb18030/-\utf8/-\big5
837双字节<<==899双字节 之中 gbk,big5 汉字同时处于 unicode一龥 区间
24汉字<<==837双字节 之中 gbk,big5 汉字 的 交集
  佴佶佼侄侉啥埭埽堀堋堙堞捅瞻耀芄芊芨芫茛蘑邾郅郇

===
双字节:同时可以解码为:utf8,gb18030,big5
,'gb18030':
[((0x81, 126), {0x40: 63, 0x80: 127})
]
,'utf8':
[((0xC2, 30), {0x80: 64})
]
,'big5':
[((0xA1, 1), {0x40: 63, 0xA1: 93})
,((0xA2, 1), {0x41: 62, 0xA1: 43, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31})
,((0xA4, 35), {0x40: 63, 0xA1: 94})
,((0xC7, 1), {0x40: 63, 0xA1: 92})
,((0xC9, 48), {0x40: 63, 0xA1: 94})
,((0xF9, 1), {0x40: 63, 0xA1: 53})
]
==>>:
0x81 < 0xC2 < 0xC2+30 < 0x81+126
    所有1920个utf8双字节编码点，皆可解码为gb18030
[utf8双字节集合 < gb18030双字节集合]

0xA4+35 == 0xC2+5
0xC2+30 == 0xC9+23
0x80+64 == 0xA1+31
0x40+63 < 0x80
[utf8双字节集合 /-\ big5双字节集合
== ([0xC2..<0xC8]+[0xC9,.+23])*[0xA1,.+31]
== ([0xC2,.+6]+[0xC9,.+23])*[0xA1,.+31]
    # total==(6+23)*31==30*30-1==899
]

==>>:
[gb18030双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
== utf8双字节集合 /-\ big5双字节集合
== ([0xC2,.+30] \-\ {0xC8})*[0xA1,.+31]
    # total==29*31==30*30-1==899
]



===考虑gbk:
,'gbk':
[((0x81, 32), {0x40: 63, 0x80: 127})
...
,((0xB0, 39), {0x40: 63, 0x80: 127})
,((0xD7, 1), {0x40: 63, 0x80: 122})
,((0xD8, 32), {0x40: 63, 0x80: 127})
,((0xF8, 6), {0x40: 63, 0x80: 33})
,((0xFE, 1), {0x40: 16})
]

0xB0+39 == 0xC2+21
0xB0+39 == 0xD7
0xC2+30 == 0xD7+9 == 0xB0+48
0xB0 < 0xC2 < 0xC2+30 < 0xD8+32
[utf8双字节集合 < gbk双字节集合]



[gbk双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
== gb18030双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
== utf8双字节集合 /-\ big5双字节集合
== ([0xC2,.+30] \-\ {0xC8})*[0xA1,.+31]
    # total==29*31==30*30-1==899
]

===考虑gb2312:
'gb2312':
[((0xA1, 1), {0xA1: 94})
... ...
,((0xB0, 39), {0xA1: 94})
,((0xD7, 1), {0xA1: 89})
,((0xD8, 32), {0xA1: 94})
]
类似gbk:
[gb2312双字节集合 /-\ utf8双字节集合
== [0xC2,.+30]*[0xA1,.+31]
    # total==30*31==930
]

[gb2312双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
== ([0xC2,.+30] \-\ {0xC8})*[0xA1,.+31]
    # total==29*31==30*30-1==899
== utf8双字节集合 /-\ big5双字节集合
== gbk双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
== gb18030双字节集合 /-\ utf8双字节集合 /-\ big5双字节集合
]



===
_findout_common_2byte_set_of_gbk_utf8_big5()
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   ,_findout_common_2byte_set_of_gbk_utf8_big5
((0xC2, 6), {0xA1: 31})
((0xC9, 23), {0xA1: 31})
===
_findout_common_2byte_set_of_gbk_utf8_big5__with_bytes__with_chars_per_encoding()
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_findout_common_2byte_set_of_gbk_utf8_big5__with_bytes__with_chars_per_encoding +return_vs_print    >  /sdcard/0my_files/tmp/0tmp
view /sdcard/0my_files/tmp/0tmp
[((0xC2, 6), {0xA1: 31}), ((0xC9, 23), {0xA1: 31})]
... ...
... ...
... ...
'gbk'
'隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖'
'utf8'
'¡¢£¤¥¦§¨©ª«¬\xad®¯°±²³´µ¶·¸¹º»¼½¾¿áâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿġĢģĤĥĦħĨĩĪīĬĭĮįİıĲĳĴĵĶķĸĹĺĻļĽľĿšŢţŤťŦŧŨũŪūŬŭŮůŰűŲųŴŵŶŷŸŹźŻżŽžſơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿǡǢǣǤǥǦǧǨǩǪǫǬǭǮǯǰǱǲǳǴǵǶǷǸǹǺǻǼǽǾǿɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽˾˿̴̵̶̷̸̡̢̧̨̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼̽̾̿ͣͤͥͦͧͨͩͪͫͬͭͮͯ͢͡ͰͱͲͳʹ͵Ͷͷ\u0378\u0379ͺͻͼͽ;ͿΡ\u03a2ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοϡϢϣϤϥϦϧϨϩϪϫϬϭϮϯϰϱϲϳϴϵ϶ϷϸϹϺϻϼϽϾϿСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопѡѢѣѤѥѦѧѨѩѪѫѬѭѮѯѰѱѲѳѴѵѶѷѸѹѺѻѼѽѾѿҡҢңҤҥҦҧҨҩҪҫҬҭҮүҰұҲҳҴҵҶҷҸҹҺһҼҽҾҿӡӢӣӤӥӦӧӨөӪӫӬӭӮӯӰӱӲӳӴӵӶӷӸӹӺӻӼӽӾӿԡԢԣԤԥԦԧԨԩԪԫԬԭԮԯ\u0530ԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտְֱֲֳִֵֶַָֹֺֻּֽ֢֣֤֥֦֧֪֭֮֡֨֩֫֬֯־ֿסעףפץצקרשת\u05eb\u05ec\u05ed\u05eeׯװױײ׳״\u05f5\u05f6\u05f7\u05f8\u05f9\u05fa\u05fb\u05fc\u05fd\u05fe\u05ffءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿ١٢٣٤٥٦٧٨٩٪٫٬٭ٮٯٰٱٲٳٴٵٶٷٸٹٺٻټٽپٿڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۣۡۢۤۥۦۧۨ۩۪ۭ۫۬ۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼ۽۾ۿܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯܱܴܷܸܹܻܼܾܰܲܳܵܶܺܽܿݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿޡޢޣޤޥަާިީުޫެޭޮޯްޱ\u07b2\u07b3\u07b4\u07b5\u07b6\u07b7\u07b8\u07b9\u07ba\u07bb\u07bc\u07bd\u07be\u07bfߡߢߣߤߥߦߧߨߩߪ߲߫߬߭߮߯߰߱߳ߴߵ߶߷߸߹ߺ\u07fb\u07fc߽߾߿'
'big5'
'癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱ヾゝゞ々ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせョヨラリルレロヮワヰヱヲンヴヵヶДЕЁЖЗИЙКЛМУФХЦЧ氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷'
... ...
... ...
837:inside 一龥:
'隆癒¡'
'垄瞽¢'
'拢瞿£'
'陇瞻¤'
'楼瞼¥'
'娄礎¦'
'搂禮§'
'篓穡¨'
'漏穢©'
'陋穠ª'
'芦竄«'
'卢竅¬'
'颅簫\xad'
'庐簧®'
'炉簪¯'
'掳簞°'
'卤簣±'
'虏簡²'
'鲁糧³'
'麓織´'
'碌繕µ'
'露繞¶'
'路繚·'
'赂繡¸'
'鹿繒¹'
'潞繙º'
'禄罈»'
'录翹¼'
'陆翻½'
'戮職¾'
'驴聶¿'
'谩獺á'
'芒璽â'
'茫瓊ã'
'盲瓣ä'
'氓疇å'
'忙疆æ'
'莽癟ç'
'猫癡è'
'茅矇é'
'锚礙ê'
'毛禱ë'
'矛穫ì'
'铆穩í'
'卯簾î'
'茂簿ï'
'冒簸ð'
'帽簽ñ'
'貌簷ò'
'贸籀ó'
'么繫ô'
'玫繭õ'
'枚繹ö'
'梅繩÷'
'酶繪ø'
'霉羅ù'
'煤繳ú'
'没羶û'
'眉羹ü'
'媒羸ý'
'镁臘þ'
'每藩ÿ'
'摹纂ġ'
'蘑罌Ģ'
'模耀ģ'
'膜臚Ĥ'
'磨艦ĥ'
'摩藻Ħ'
'魔藹ħ'
'抹蘑Ĩ'
'末藺ĩ'
'莫蘆Ī'
'墨蘋ī'
'默蘇Ĭ'
'沫蘊ĭ'
'漠蠔Į'
'寞蠕į'
'陌襤İ'
'谋覺ı'
'牟觸Ĳ'
'某議ĳ'
'拇譬Ĵ'
'牡警ĵ'
'亩譯Ķ'
'姆譟ķ'
'母譫ĸ'
'墓贏Ĺ'
'暮贍ĺ'
'幕躉Ļ'
'募躁ļ'
'慕躅Ľ'
'木躂ľ'
'目醴Ŀ'
'拧禳š'
'泞籠Ţ'
'牛籟ţ'
'扭聾Ť'
'钮聽ť'
'纽臟Ŧ'
'脓襲ŧ'
'浓襯Ũ'
'农觼ũ'
'弄讀Ū'
'奴贖ū'
'努贗Ŭ'
'怒躑ŭ'
'女躓Ů'
'暖轡ů'
'虐酈Ű'
'疟鑄ű'
'挪鑑Ų'
'懦鑒ų'
'糯霽Ŵ'
'诺霾ŵ'
'哦韃Ŷ'
'欧韁ŷ'
'鸥顫Ÿ'
'殴饕Ź'
'藕驕ź'
'呕驍Ż'
'偶髒ż'
'沤鬚Ž'
'啪鱉ž'
'趴鰱ſ'
'伞氶ɡ'
'散汃ɢ'
'桑氿ɣ'
'嗓氻ɤ'
'丧犮ɥ'
'搔犰ɦ'
'骚玊ɧ'
'扫禸ɨ'
'嫂肊ɩ'
'瑟阞ɪ'
'色伎ɫ'
'涩优ɬ'
'森伬ɭ'
'僧仵ɮ'
'莎伔ɯ'
'砂仱ɰ'
'杀伀ɱ'
'刹价ɲ'
'沙伈ɳ'
'纱伝ɴ'
'傻伂ɵ'
'啥伅ɶ'
'煞伢ɷ'
'筛伓ɸ'
'晒伄ɹ'
'珊仴ɺ'
'苫伒ɻ'
'杉冱ɼ'
'山刓ɽ'
'删刉ɾ'
'煽刐ɿ'
'省吽ʡ'
'盛呏ʢ'
'剩呁ʣ'
'胜吨ʤ'
'圣吤ʥ'
'师呇ʦ'
'失囮ʧ'
'狮囧ʨ'
'施囥ʩ'
'湿坁ʪ'
'诗坅ʫ'
'尸坌ʬ'
'虱坉ʭ'
'十坋ʮ'
'石坒ʯ'
'拾夆ʰ'
'时奀ʱ'
'什妦ʲ'
'食妘ʳ'
'蚀妠ʴ'
'实妗ʵ'
'识妎ʶ'
'史妢ʷ'
'矢妐ʸ'
'使妏ʹ'
'屎妧ʺ'
'驶妡ʻ'
'始宎ʼ'
'式宒ʽ'
'示尨ʾ'
'士尪ʿ'
'恕芊ˡ'
'刷芃ˢ'
'耍芄ˣ'
'摔豸ˤ'
'衰迉˥'
'甩辿˦'
'帅邟˧'
'栓邡˨'
'拴邥˩'
'霜邞˪'
'双邧˫'
'爽邠ˬ'
'谁阰˭'
'水阨ˮ'
'睡阯˯'
'税阭˰'
'吮丳˱'
'瞬侘˲'
'顺佼˳'
'舜侅˴'
'说佽˵'
'硕侀˶'
'朔侇˷'
'烁佶˸'
'斯佴˹'
'撕侉˺'
'嘶侄˻'
'思佷˼'
'私佌˽'
'司侗˾'
'丝佪˿'
'獭怴̡'
'挞怊̢'
'蹋怗̣'
'踏怳̤'
'胎怚̥'
'苔怞̦'
'抬怬̧'
'台怢̨'
'泰怍̩'
'酞怐̪'
'太怮̫'
'态怓̬'
'汰怑̭'
'坍怌̮'
'摊怉̯'
'贪怜̰'
'瘫戔̱'
'滩戽̲'
'坛抭̳'
'檀抴̴'
'痰拑̵'
'潭抾̶'
'谭抪̷'
'谈抶̸'
'坦拊̹'
'毯抮̺'
'袒抳̻'
'碳抯̼'
'探抻̽'
'叹抩̾'
'炭抰̿'
'汀矷͡'
'廷祂͢'
'停礿ͣ'
'亭秅ͤ'
'庭穸ͥ'
'挺穻ͦ'
'艇竻ͧ'
'通籵ͨ'
'桐糽ͩ'
'酮耵ͪ'
'瞳肏ͫ'
'同肮ͬ'
'铜肣ͭ'
'彤肸ͮ'
'童肵ͯ'
'桶肭Ͱ'
'捅舠ͱ'
'筒芠Ͳ'
'统苀ͳ'
'痛芫ʹ'
'偷芚͵'
'投芘Ͷ'
'头芛ͷ'
'透芵\u0378'
'凸芧\u0379'
'秃芮ͺ'
'突芼ͻ'
'图芞ͼ'
'徒芺ͽ'
'途芴;'
'涂芨Ϳ'
'巍峞Ρ'
'微峚\u03a2'
'危峉Σ'
'韦峇Τ'
'违峊Υ'
'桅峖Φ'
'围峓Χ'
'唯峔Ψ'
'惟峏Ω'
'为峈Ϊ'
'潍峆Ϋ'
'维峎ά'
'苇峟έ'
'萎峸ή'
'委巹ί'
'伟帡ΰ'
'伪帢α'
'尾帣β'
'纬帠γ'
'未帤δ'
'蔚庰ε'
'味庤ζ'
'畏庢η'
'胃庛θ'
'喂庣ι'
'魏庥κ'
'位弇λ'
'渭弮μ'
'谓彖ν'
'尉徆ξ'
'慰怷ο'
'稀洁ϡ'
'息洘Ϣ'
'希洷ϣ'
'悉洃Ϥ'
'膝洏ϥ'
'夕浀Ϧ'
'惜洇ϧ'
'熄洠Ϩ'
'烯洬ϩ'
'溪洈Ϫ'
'汐洢ϫ'
'犀洉Ϭ'
'檄洐ϭ'
'袭炷Ϯ'
'席炟ϯ'
'习炾ϰ'
'媳炱ϱ'
'喜炰ϲ'
'铣炡ϳ'
'洗炴ϴ'
'系炵ϵ'
'隙炩϶'
'戏牁Ϸ'
'细牉ϸ'
'瞎牊Ϲ'
'虾牬Ϻ'
'匣牰ϻ'
'霞牳ϼ'
'辖牮Ͻ'
'暇狊Ͼ'
'峡狤Ͽ'
'小苤С'
'孝苠Т'
'校苺У'
'肖苳Ф'
'啸苭Х'
'笑虷Ц'
'效虴Ч'
'楔虼Ш'
'些虳Щ'
'歇衁Ъ'
'蝎衎Ы'
'鞋衧Ь'
'协衪Э'
'挟衩Ю'
'携觓Я'
'邪訄а'
'斜訇б'
'胁赲в'
'谐迣г'
'写迡д'
'械迮е'
'卸迠ж'
'蟹郱з'
'懈邽и'
'泄邿й'
'泻郕к'
'谢郅л'
'屑邾м'
'薪郇н'
'芯郋о'
'锌郈п'
'选恁ѡ'
'癣悢Ѣ'
'眩悈ѣ'
'绚悀Ѥ'
'靴悒ѥ'
'薛悁Ѧ'
'学悝ѧ'
'穴悃Ѩ'
'雪悕ѩ'
'血悛Ѫ'
'勋悗ѫ'
'熏悇Ѭ'
'循悜ѭ'
'旬悎Ѯ'
'询戙ѯ'
'寻扆Ѱ'
'驯拲ѱ'
'巡挐Ѳ'
'殉捖ѳ'
'汛挬Ѵ'
'训捄ѵ'
'讯捅Ѷ'
'逊挶ѷ'
'迅捃Ѹ'
'压揤ѹ'
'押挹Ѻ'
'鸦捋ѻ'
'鸭捊Ѽ'
'呀挼ѽ'
'丫挩Ѿ'
'芽捁ѿ'
'摇牷ҡ'
'尧牶Ң'
'遥猀ң'
'窑狺Ҥ'
'谣狴ҥ'
'姚狾Ҧ'
'咬狶ҧ'
'舀狳Ҩ'
'药狻ҩ'
'要猁Ҫ'
'耀珓ҫ'
'椰珙Ҭ'
'噎珥ҭ'
'耶珖Ү'
'爷玼ү'
'野珧Ұ'
'冶珣ұ'
'也珩Ҳ'
'页珜ҳ'
'掖珒Ҵ'
'业珛ҵ'
'叶珔Ҷ'
'曳珝ҷ'
'腋珚Ҹ'
'夜珗ҹ'
'液珘Һ'
'一珨һ'
'壹瓞Ҽ'
'医瓟ҽ'
'揖瓴Ҿ'
'铱瓵ҿ'
'印荂ӡ'
'英荎Ӣ'
'樱茛ӣ'
'婴茪Ӥ'
'鹰茈ӥ'
'应茼Ӧ'
'缨荍ӧ'
'莹茖Ө'
'萤茤ө'
'营茠Ӫ'
'荧茷ӫ'
'蝇茯Ӭ'
'迎茩ӭ'
'赢荇Ӯ'
'盈荅ӯ'
'影荌Ӱ'
'颖荓ӱ'
'硬茞Ӳ'
'映茬ӳ'
'哟荋Ӵ'
'拥茧ӵ'
'佣荈Ӷ'
'臃虓ӷ'
'痈虒Ӹ'
'庸蚢ӹ'
'雍蚨Ӻ'
'踊蚖ӻ'
'蛹蚍Ӽ'
'咏蚑ӽ'
'泳蚞Ӿ'
'涌蚇ӿ'
'浴唌ԡ'
'寓唲Ԣ'
'裕啥ԣ'
'预啎Ԥ'
'豫唹ԥ'
'驭啈Ԧ'
'鸳唭ԧ'
'渊唻Ԩ'
'冤啀ԩ'
'元啋Ԫ'
'垣圊ԫ'
'袁圇Ԭ'
'原埻ԭ'
'援堔Ԯ'
'辕埢ԯ'
'园埶\u0530'
'员埜Ա'
'圆埴Բ'
'猿堀Գ'
'源埭Դ'
'缘埽Ե'
'远堈Զ'
'苑埸Է'
'愿堋Ը'
'怨埳Թ'
'院埏Ժ'
'曰堇Ի'
'约埮Լ'
'越埣Խ'
'跃埲Ծ'
'钥埥Կ'
'铡捸ա'
'闸掅բ'
'眨掁գ'
'栅掑դ'
'榨掍ե'
'咋捰զ'
'乍敓է'
'炸旍ը'
'诈晥թ'
'摘晡ժ'
'斋晛ի'
'宅晙լ'
'窄晜խ'
'债晢ծ'
'寨朘կ'
'瞻桹հ'
'毡梇ձ'
'詹梐ղ'
'粘梜ճ'
'沾桭մ'
'盏桮յ'
'斩梮ն'
'辗梫շ'
'崭楖ո'
'展桯չ'
'蘸梣պ'
'栈梬ջ'
'占梩ռ'
'战桵ս'
'站桴վ'
'湛梲տ'
'帧痋֡'
'症痌֢'
'郑痑֣'
'证痐֤'
'芝皏֥'
'枝皉֦'
'支盓֧'
'吱眹֨'
'蜘眯֩'
'知眭֪'
'肢眱֫'
'脂眲֬'
'汁眴֭'
'之眳֮'
'织眽֯'
'职眥ְ'
'直眻ֱ'
'植眵ֲ'
'殖硈ֳ'
'执硒ִ'
'值硉ֵ'
'侄硍ֶ'
'址硊ַ'
'指硌ָ'
'止砦ֹ'
'趾硅ֺ'
'只硐ֻ'
'旨祤ּ'
'纸祧ֽ'
'志祩־'
'挚祪ֿ'
'住蛂ס'
'注蛁ע'
'祝蛅ף'
'驻蚺פ'
'抓蚰ץ'
'爪蛈צ'
'拽蚹ק'
'专蚳ר'
'砖蚸ש'
'转蛌ת'
'撰蚴\u05eb'
'赚蚻\u05ec'
'篆蚼\u05ed'
'桩蛃\u05ee'
'庄蚽ׯ'
'装蚾װ'
'妆衒ױ'
'撞袉ײ'
'壮袕׳'
'状袨״'
'椎袢\u05f5'
'锥袪\u05f6'
'追袚\u05f7'
'赘袑\u05f8'
'坠袡\u05f9'
'缀袟\u05fa'
'谆袘\u05fb'
'准袧\u05fc'
'捉袙\u05fd'
'拙袛\u05fe'
'卓袗\u05ff'
'亍堙ء'
'丌堞آ'
'兀堧أ'
'丐堣ؤ'
'廿堨إ'
'卅埵ئ'
'丕塈ا'
'亘堥ب'
'丞堜ة'
'鬲堛ت'
'孬堳ث'
'噩堿ج'
'丨堶ح'
'禺堮خ'
'丿堹د'
'匕堸ذ'
'乇堭ر'
'夭堬ز'
'爻堻س'
'卮奡ش'
'氐媯ص'
'囟媔ض'
'胤媟ط'
'馗婺ظ'
'毓媢ع'
'睾媞غ'
'鼗婸ػ'
'丶媦ؼ'
'亟婼ؽ'
'鼐媥ؾ'
'乜媬ؿ'
'佟晼١'
'佗晬٢'
'伲晻٣'
'伽暀٤'
'佶晱٥'
'佴晹٦'
'侑晪٧'
'侉晲٨'
'侃朁٩'
'侏椌٪'
'佾棓٫'
'佻椄٬'
'侪棜٭'
'佼椪ٮ'
'侬棬ٯ'
'侔棪ٰ'
'俦棱ٱ'
'俨椏ٲ'
'俪棖ٳ'
'俅棷ٴ'
'俚棫ٵ'
'俣棤ٶ'
'俜棶ٷ'
'俑椓ٸ'
'俟椐ٹ'
'俸棳ٺ'
'倩棡ٻ'
'偌椇ټ'
'俳棌ٽ'
'倬椈پ'
'倏楰ٿ'
'凇琚ڡ'
'冖琡ڢ'
'冢琭ڣ'
'冥琱ڤ'
'讠琤ڥ'
'讦琣ڦ'
'讧琝ڧ'
'讪琩ڨ'
'讴琠ک'
'讵琲ڪ'
'讷瓻ګ'
'诂甯ڬ'
'诃畯ڭ'
'诋畬ڮ'
'诏痧گ'
'诎痚ڰ'
'诒痡ڱ'
'诓痦ڲ'
'诔痝ڳ'
'诖痟ڴ'
'诘痤ڵ'
'诙痗ڶ'
'诜皕ڷ'
'诟皒ڸ'
'诠盚ڹ'
'诤睆ں'
'诨睇ڻ'
'诩睄ڼ'
'诮睍ڽ'
'诰睅ھ'
'诳睊ڿ'
'邸菕ۡ'
'邰菺ۢ'
'郏菇ۣ'
'郅菑ۤ'
'邾菪ۥ'
'郐萓ۦ'
'郄菃ۧ'
'郇菬ۨ'
'郓菮۩'
'郦菄۪'
'郢菻۫'
'郜菗۬'
'郗菢ۭ'
'郛萛ۮ'
'郫菛ۯ'
'郯菾۰'
'郾蛘۱'
'鄄蛢۲'
'鄢蛦۳'
'鄞蛓۴'
'鄣蛣۵'
'鄱蛚۶'
'鄯蛪۷'
'鄹蛝۸'
'酃蛫۹'
'酆蛜ۺ'
'刍蛬ۻ'
'奂蛩ۼ'
'劢蛗۽'
'劬蛨۾'
'劭蛑ۿ'
'堋隉ܡ'
'堍隃ܢ'
'埽隀ܣ'
'埭雂ܤ'
'堀雈ܥ'
'堞雃ܦ'
'堙雱ܧ'
'塄雰ܨ'
'堠靬ܩ'
'塥靰ܪ'
'塬靮ܫ'
'墁頇ܬ'
'墉颩ܭ'
'墚飫ܮ'
'墀鳦ܯ'
'馨黹ܰ'
'鼙亃ܱ'
'懿亄ܲ'
'艹亶ܳ'
'艽傽ܴ'
'艿傿ܵ'
'芏僆ܶ'
'芊傮ܷ'
'芨僄ܸ'
'芄僊ܹ'
'芎傴ܺ'
'芑僈ܻ'
'芗僂ܼ'
'芙傰ܽ'
'芫僁ܾ'
'芸傺ܿ'
'荨搳ݡ'
'茛摃ݢ'
'荩搟ݣ'
'荬搕ݤ'
'荪搘ݥ'
'荭搹ݦ'
'荮搷ݧ'
'莰搢ݨ'
'荸搣ݩ'
'莳搌ݪ'
'莴搦ݫ'
'莠搰ݬ'
'莪搨ݭ'
'莓摁ݮ'
'莜搵ݯ'
'莅搯ݰ'
'荼搊ݱ'
'莶搚ݲ'
'莩摀ݳ'
'荽搥ݴ'
'莸搧ݵ'
'荻搋ݶ'
'莘揧ݷ'
'莞搛ݸ'
'莨搮ݹ'
'莺搡ݺ'
'莼搎ݻ'
'菁敯ݼ'
'萁斒ݽ'
'菥旓ݾ'
'菘暆ݿ'
'蕖煄ޡ'
'蔻煍ޢ'
'蓿煚ޣ'
'蓼牏ޤ'
'蕙犍ޥ'
'蕈犌ަ'
'蕨犑ާ'
'蕤犐ި'
'蕞犎ީ'
'蕺猼ު'
'瞢獂ޫ'
'蕃猻ެ'
'蕲猺ޭ'
'蕻獀ޮ'
'薤獊ޯ'
'薨獉ް'
'薇瑄ޱ'
'薏瑊\u07b2'
'蕹瑋\u07b3'
'薮瑒\u07b4'
'薜瑑\u07b5'
'薅瑗\u07b6'
'薹瑀\u07b7'
'薷瑏\u07b8'
'薰瑐\u07b9'
'藓瑎\u07ba'
'藁瑂\u07bb'
'藜瑆\u07bc'
'藿瑍\u07bd'
'蘧瑔\u07be'
'蘅瓡\u07bf'
'摺腄ߡ'
'撷腡ߢ'
'撸舝ߣ'
'撙艉ߤ'
'撺艄ߥ'
'擀艀ߦ'
'擐艂ߧ'
'擗艅ߨ'
'擤蓱ߩ'
'擢萿ߪ'
'攉葖߫'
'攥葶߬'
'攮葹߭'
'弋蒏߮'
'忒蒍߯'
'甙葥߰'
'弑葑߱'
'卟葀߲'
'叱蒆߳'
'叽葧ߴ'
'叩萰ߵ'
'叨葍߶'
'叻葽߷'
'吒葚߸'
'吖葙߹'
'吆葴ߺ'
'呋葳\u07fb'
'呒葝\u07fc'
'呓蔇߽'
'呔葞߾'
'呖萷߿'
#end-837:inside 一龥:
24:
佴佶佼侄侉啥埭埽堀堋堙堞捅瞻耀芄芊芨芫茛蘑邾郅郇
    # (above.hzs4gbk /-\ above.hzs4big5)
24:也是gb2312!
佴佶佼侄侉啥埭埽
堀堋堙堞捅瞻耀芄
芊芨芫茛蘑邾郅郇

899:也是gb2312!

===
]]



#]]]'''
__all__ = r'''
iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_
    clone_result_data4gb2312_gbk_gb18030
    clone_result_data4utf8_big5_big5hkscs__shift_jis__shift_jis_2004__shift_jisx0213
    clone_result_data4common_2byte_set_of_gbk_utf8_big5
    clone_result_data_ex4common_2byte_set_of_gbk_utf8_big5



iter_all_2bytes
iter_all_2byte_char_pairs_of_encoding_
iter_all_2byte_chars_of_encoding_
iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_
    iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb2312
    iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gbk
    iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb18030
    iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5
    iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5hkscs

clone_result_data4gb2312_gbk_gb18030
clone_result_data4utf8_big5_big5hkscs__shift_jis__shift_jis_2004__shift_jisx0213
clone_result_data4common_2byte_set_of_gbk_utf8_big5
clone_result_data_ex4common_2byte_set_of_gbk_utf8_big5


findout_common_2byte_set_of_encodings
mk_txt_filter_of_encoding_

mk_unicode_code_rngs5hxsz8rng_hx2sz8rngs_pairs
    iter_code_pts5hxsz8rng_hx2sz8rngs_pairs

mk_i2js5hxsz8rng_hx2sz8rngs_pairs
    mk_hxsz8rng_hx2sz8rngs_pairs5i2js

mk_bytes5hxsz8rng_hx2sz8rngs_pairs
    iter_2bytes5hxsz8rng_hx2sz8rngs_pairs



calc_total_of_hxsz8rng_hx2sz8rngs_pairs
    calc_total_of_rng_rngs_pair
    calc_total_of_hxsz8rng_hxszs8rngs_pair
    calc_total_of_hxsz8rng_hx2sz8rngs_pair

calc_intersection_of_hxsz8rng_hx2sz8rngs_pairs__with__rng_rngs_pair

'''.split()#'''
__all__

import codecs
from copy import deepcopy
from seed.debug.print_err import print_err

def iter_all_2bytes(*, to_skip_fst_ascii):
    '-> Iter bytes{len==2}'
    ks = range(0x100)
    us = range(0x80, 0x100) if to_skip_fst_ascii else ks
    for i in us:
        for j in ks:
            yield bytes([i,j])
def iter_all_2byte_char_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> Iter (bs/bytes{len==2}, char{<=[encoding]=>bs})'
    it = iter_all_2bytes(to_skip_fst_ascii=to_skip_fst_ascii)
    return _iter_all_2byte_char_pairs__by_filter_2Bs_of_encoding_(it, encoding=encoding)
def _iter_all_2byte_char_pairs__by_filter_2Bs_of_encoding_(it, /, *, encoding):
    '-> Iter (bs/bytes{len==2}, char{<=[encoding]=>bs})'
    info = codecs.lookup(encoding)
    decode = info.decode
    encode = info.encode
    for bs in it:
        assert len(bs) == 2
        try:
            s, L = decode(bs)
        except UnicodeDecodeError:
            continue
        if L == 2 and len(s) == 1:
            ch = s
            if (bs_L:=encode(ch)) == (bs, 1):
                yield (bs, ch)
            elif not f':{encoding}:' in ':big5:big5hkscs:cp932:johab:cp950:':
                print_err(__name__, 'iter_all_2byte_char_pairs_of_encoding_:\n\t', encoding, (bs, ch), bs_L)
                r'''[[[
> big5 (b'\xa1\xfe', '／') (b'\xa2A', 1)
> big5 (b'\xa2@', '＼') (b'\xa2B', 1)
> big5 (b'\xa2\xcc', '十') (b'\xa4Q', 1)
> big5 (b'\xa2\xce', '卅') (b'\xa4\xca', 1)
> big5hkscs (b'\xa1\xfe', '／') (b'\xa2A', 1)
> big5hkscs (b'\xa2@', '＼') (b'\xa2B', 1)
> big5hkscs (b'\xa2~', '╭') (b'\xf9\xfa', 1)
> big5hkscs (b'\xa2\xa1', '╮') (b'\xf9\xfb', 1)
> big5hkscs (b'\xa2\xa2', '╰') (b'\xf9\xfc', 1)
> big5hkscs (b'\xa2\xa3', '╯') (b'\xf9\xfd', 1)
> big5hkscs (b'\xa2\xa4', '═') (b'\xf9\xf9', 1)
> big5hkscs (b'\xa2\xa5', '╞') (b'\xf9\xe9', 1)
> big5hkscs (b'\xa2\xa6', '╪') (b'\xf9\xea', 1)
> big5hkscs (b'\xa2\xa7', '╡') (b'\xf9\xeb', 1)
> big5hkscs (b'\xa2\xcc', '十') (b'\xa4Q', 1)
> big5hkscs (b'\xa2\xce', '卅') (b'\xa4\xca', 1)
> cp932 (b'\x87\x90', '≒') (b'\x81\xe0', 1)
> cp932 (b'\x87\x91', '≡') (b'\x81\xdf', 1)
> cp932 (b'\x87\x92', '∫') (b'\x81\xe7', 1)
> cp932 (b'\x87\x95', '√') (b'\x81\xe3', 1)
> cp932 (b'\x87\x96', '⊥') (b'\x81\xdb', 1)
> cp932 (b'\x87\x97', '∠') (b'\x81\xda', 1)
> cp932 (b'\x87\x9a', '∵') (b'\x81\xe6', 1)
> cp932 (b'\x87\x9b', '∩') (b'\x81\xbf', 1)
> cp932 (b'\x87\x9c', '∪') (b'\x81\xbe', 1)
> cp932 (b'\xee\xf9', '￢') (b'\x81\xca', 1)
> cp932 (b'\xfa@', 'ⅰ') (b'\xee\xef', 1)
> cp932 (b'\xfaA', 'ⅱ') (b'\xee\xf0', 1)
> cp932 (b'\xfaB', 'ⅲ') (b'\xee\xf1', 1)
> cp932 (b'\xfaC', 'ⅳ') (b'\xee\xf2', 1)
> cp932 (b'\xfaD', 'ⅴ') (b'\xee\xf3', 1)
> cp932 (b'\xfaE', 'ⅵ') (b'\xee\xf4', 1)
> cp932 (b'\xfaF', 'ⅶ') (b'\xee\xf5', 1)
> cp932 (b'\xfaG', 'ⅷ') (b'\xee\xf6', 1)
> cp932 (b'\xfaH', 'ⅸ') (b'\xee\xf7', 1)
> cp932 (b'\xfaI', 'ⅹ') (b'\xee\xf8', 1)
> cp932 (b'\xfaJ', 'Ⅰ') (b'\x87T', 1)
> cp932 (b'\xfaK', 'Ⅱ') (b'\x87U', 1)
> cp932 (b'\xfaL', 'Ⅲ') (b'\x87V', 1)
> cp932 (b'\xfaM', 'Ⅳ') (b'\x87W', 1)
> cp932 (b'\xfaN', 'Ⅴ') (b'\x87X', 1)
> cp932 (b'\xfaO', 'Ⅵ') (b'\x87Y', 1)
> cp932 (b'\xfaP', 'Ⅶ') (b'\x87Z', 1)
> cp932 (b'\xfaQ', 'Ⅷ') (b'\x87[', 1)
> cp932 (b'\xfaR', 'Ⅸ') (b'\x87\\', 1)
> cp932 (b'\xfaS', 'Ⅹ') (b'\x87]', 1)
> cp932 (b'\xfaT', '￢') (b'\x81\xca', 1)
> cp932 (b'\xfaU', '￤') (b'\xee\xfa', 1)
> cp932 (b'\xfaV', '＇') (b'\xee\xfb', 1)
> cp932 (b'\xfaW', '＂') (b'\xee\xfc', 1)
> cp932 (b'\xfaX', '㈱') (b'\x87\x8a', 1)
> cp932 (b'\xfaY', '№') (b'\x87\x82', 1)
> cp932 (b'\xfaZ', '℡') (b'\x87\x84', 1)
> cp932 (b'\xfa[', '∵') (b'\x81\xe6', 1)
> cp932 (b'\xfa\\', '纊') (b'\xed@', 1)
> cp932 (b'\xfa]', '褜') (b'\xedA', 1)
> cp932 (b'\xfa^', '鍈') (b'\xedB', 1)
> cp932 (b'\xfa_', '銈') (b'\xedC', 1)
> cp932 (b'\xfa`', '蓜') (b'\xedD', 1)
> cp932 (b'\xfaa', '俉') (b'\xedE', 1)
> cp932 (b'\xfab', '炻') (b'\xedF', 1)
> cp932 (b'\xfac', '昱') (b'\xedG', 1)
> cp932 (b'\xfad', '棈') (b'\xedH', 1)
> cp932 (b'\xfae', '鋹') (b'\xedI', 1)
> cp932 (b'\xfaf', '曻') (b'\xedJ', 1)
> cp932 (b'\xfag', '彅') (b'\xedK', 1)
> cp932 (b'\xfah', '丨') (b'\xedL', 1)
> cp932 (b'\xfai', '仡') (b'\xedM', 1)
> cp932 (b'\xfaj', '仼') (b'\xedN', 1)
> cp932 (b'\xfak', '伀') (b'\xedO', 1)
> cp932 (b'\xfal', '伃') (b'\xedP', 1)
> cp932 (b'\xfam', '伹') (b'\xedQ', 1)
> cp932 (b'\xfan', '佖') (b'\xedR', 1)
> cp932 (b'\xfao', '侒') (b'\xedS', 1)
> cp932 (b'\xfap', '侊') (b'\xedT', 1)
> cp932 (b'\xfaq', '侚') (b'\xedU', 1)
> cp932 (b'\xfar', '侔') (b'\xedV', 1)
> cp932 (b'\xfas', '俍') (b'\xedW', 1)
> cp932 (b'\xfat', '偀') (b'\xedX', 1)
> cp932 (b'\xfau', '倢') (b'\xedY', 1)
> cp932 (b'\xfav', '俿') (b'\xedZ', 1)
> cp932 (b'\xfaw', '倞') (b'\xed[', 1)
> cp932 (b'\xfax', '偆') (b'\xed\\', 1)
> cp932 (b'\xfay', '偰') (b'\xed]', 1)
> cp932 (b'\xfaz', '偂') (b'\xed^', 1)
> cp932 (b'\xfa{', '傔') (b'\xed_', 1)
> cp932 (b'\xfa|', '僴') (b'\xed`', 1)
> cp932 (b'\xfa}', '僘') (b'\xeda', 1)
> cp932 (b'\xfa~', '兊') (b'\xedb', 1)
> cp932 (b'\xfa\x80', '兤') (b'\xedc', 1)
> cp932 (b'\xfa\x81', '冝') (b'\xedd', 1)
> cp932 (b'\xfa\x82', '冾') (b'\xede', 1)
> cp932 (b'\xfa\x83', '凬') (b'\xedf', 1)
> cp932 (b'\xfa\x84', '刕') (b'\xedg', 1)
> cp932 (b'\xfa\x85', '劜') (b'\xedh', 1)
> cp932 (b'\xfa\x86', '劦') (b'\xedi', 1)
> cp932 (b'\xfa\x87', '勀') (b'\xedj', 1)
> cp932 (b'\xfa\x88', '勛') (b'\xedk', 1)
> cp932 (b'\xfa\x89', '匀') (b'\xedl', 1)
> cp932 (b'\xfa\x8a', '匇') (b'\xedm', 1)
> cp932 (b'\xfa\x8b', '匤') (b'\xedn', 1)
> cp932 (b'\xfa\x8c', '卲') (b'\xedo', 1)
> cp932 (b'\xfa\x8d', '厓') (b'\xedp', 1)
> cp932 (b'\xfa\x8e', '厲') (b'\xedq', 1)
> cp932 (b'\xfa\x8f', '叝') (b'\xedr', 1)
> cp932 (b'\xfa\x90', '﨎') (b'\xeds', 1)
> cp932 (b'\xfa\x91', '咜') (b'\xedt', 1)
> cp932 (b'\xfa\x92', '咊') (b'\xedu', 1)
> cp932 (b'\xfa\x93', '咩') (b'\xedv', 1)
> cp932 (b'\xfa\x94', '哿') (b'\xedw', 1)
> cp932 (b'\xfa\x95', '喆') (b'\xedx', 1)
> cp932 (b'\xfa\x96', '坙') (b'\xedy', 1)
> cp932 (b'\xfa\x97', '坥') (b'\xedz', 1)
> cp932 (b'\xfa\x98', '垬') (b'\xed{', 1)
> cp932 (b'\xfa\x99', '埈') (b'\xed|', 1)
> cp932 (b'\xfa\x9a', '埇') (b'\xed}', 1)
> cp932 (b'\xfa\x9b', '﨏') (b'\xed~', 1)
> cp932 (b'\xfa\x9c', '塚') (b'\xed\x80', 1)
> cp932 (b'\xfa\x9d', '增') (b'\xed\x81', 1)
> cp932 (b'\xfa\x9e', '墲') (b'\xed\x82', 1)
> cp932 (b'\xfa\x9f', '夋') (b'\xed\x83', 1)
> cp932 (b'\xfa\xa0', '奓') (b'\xed\x84', 1)
> cp932 (b'\xfa\xa1', '奛') (b'\xed\x85', 1)
> cp932 (b'\xfa\xa2', '奝') (b'\xed\x86', 1)
> cp932 (b'\xfa\xa3', '奣') (b'\xed\x87', 1)
> cp932 (b'\xfa\xa4', '妤') (b'\xed\x88', 1)
> cp932 (b'\xfa\xa5', '妺') (b'\xed\x89', 1)
> cp932 (b'\xfa\xa6', '孖') (b'\xed\x8a', 1)
> cp932 (b'\xfa\xa7', '寀') (b'\xed\x8b', 1)
> cp932 (b'\xfa\xa8', '甯') (b'\xed\x8c', 1)
> cp932 (b'\xfa\xa9', '寘') (b'\xed\x8d', 1)
> cp932 (b'\xfa\xaa', '寬') (b'\xed\x8e', 1)
> cp932 (b'\xfa\xab', '尞') (b'\xed\x8f', 1)
> cp932 (b'\xfa\xac', '岦') (b'\xed\x90', 1)
> cp932 (b'\xfa\xad', '岺') (b'\xed\x91', 1)
> cp932 (b'\xfa\xae', '峵') (b'\xed\x92', 1)
> cp932 (b'\xfa\xaf', '崧') (b'\xed\x93', 1)
> cp932 (b'\xfa\xb0', '嵓') (b'\xed\x94', 1)
> cp932 (b'\xfa\xb1', '﨑') (b'\xed\x95', 1)
> cp932 (b'\xfa\xb2', '嵂') (b'\xed\x96', 1)
> cp932 (b'\xfa\xb3', '嵭') (b'\xed\x97', 1)
> cp932 (b'\xfa\xb4', '嶸') (b'\xed\x98', 1)
> cp932 (b'\xfa\xb5', '嶹') (b'\xed\x99', 1)
> cp932 (b'\xfa\xb6', '巐') (b'\xed\x9a', 1)
> cp932 (b'\xfa\xb7', '弡') (b'\xed\x9b', 1)
> cp932 (b'\xfa\xb8', '弴') (b'\xed\x9c', 1)
> cp932 (b'\xfa\xb9', '彧') (b'\xed\x9d', 1)
> cp932 (b'\xfa\xba', '德') (b'\xed\x9e', 1)
> cp932 (b'\xfa\xbb', '忞') (b'\xed\x9f', 1)
> cp932 (b'\xfa\xbc', '恝') (b'\xed\xa0', 1)
> cp932 (b'\xfa\xbd', '悅') (b'\xed\xa1', 1)
> cp932 (b'\xfa\xbe', '悊') (b'\xed\xa2', 1)
> cp932 (b'\xfa\xbf', '惞') (b'\xed\xa3', 1)
> cp932 (b'\xfa\xc0', '惕') (b'\xed\xa4', 1)
> cp932 (b'\xfa\xc1', '愠') (b'\xed\xa5', 1)
> cp932 (b'\xfa\xc2', '惲') (b'\xed\xa6', 1)
> cp932 (b'\xfa\xc3', '愑') (b'\xed\xa7', 1)
> cp932 (b'\xfa\xc4', '愷') (b'\xed\xa8', 1)
> cp932 (b'\xfa\xc5', '愰') (b'\xed\xa9', 1)
> cp932 (b'\xfa\xc6', '憘') (b'\xed\xaa', 1)
> cp932 (b'\xfa\xc7', '戓') (b'\xed\xab', 1)
> cp932 (b'\xfa\xc8', '抦') (b'\xed\xac', 1)
> cp932 (b'\xfa\xc9', '揵') (b'\xed\xad', 1)
> cp932 (b'\xfa\xca', '摠') (b'\xed\xae', 1)
> cp932 (b'\xfa\xcb', '撝') (b'\xed\xaf', 1)
> cp932 (b'\xfa\xcc', '擎') (b'\xed\xb0', 1)
> cp932 (b'\xfa\xcd', '敎') (b'\xed\xb1', 1)
> cp932 (b'\xfa\xce', '昀') (b'\xed\xb2', 1)
> cp932 (b'\xfa\xcf', '昕') (b'\xed\xb3', 1)
> cp932 (b'\xfa\xd0', '昻') (b'\xed\xb4', 1)
> cp932 (b'\xfa\xd1', '昉') (b'\xed\xb5', 1)
> cp932 (b'\xfa\xd2', '昮') (b'\xed\xb6', 1)
> cp932 (b'\xfa\xd3', '昞') (b'\xed\xb7', 1)
> cp932 (b'\xfa\xd4', '昤') (b'\xed\xb8', 1)
> cp932 (b'\xfa\xd5', '晥') (b'\xed\xb9', 1)
> cp932 (b'\xfa\xd6', '晗') (b'\xed\xba', 1)
> cp932 (b'\xfa\xd7', '晙') (b'\xed\xbb', 1)
> cp932 (b'\xfa\xd8', '晴') (b'\xed\xbc', 1)
> cp932 (b'\xfa\xd9', '晳') (b'\xed\xbd', 1)
> cp932 (b'\xfa\xda', '暙') (b'\xed\xbe', 1)
> cp932 (b'\xfa\xdb', '暠') (b'\xed\xbf', 1)
> cp932 (b'\xfa\xdc', '暲') (b'\xed\xc0', 1)
> cp932 (b'\xfa\xdd', '暿') (b'\xed\xc1', 1)
> cp932 (b'\xfa\xde', '曺') (b'\xed\xc2', 1)
> cp932 (b'\xfa\xdf', '朎') (b'\xed\xc3', 1)
> cp932 (b'\xfa\xe0', '朗') (b'\xed\xc4', 1)
> cp932 (b'\xfa\xe1', '杦') (b'\xed\xc5', 1)
> cp932 (b'\xfa\xe2', '枻') (b'\xed\xc6', 1)
> cp932 (b'\xfa\xe3', '桒') (b'\xed\xc7', 1)
> cp932 (b'\xfa\xe4', '柀') (b'\xed\xc8', 1)
> cp932 (b'\xfa\xe5', '栁') (b'\xed\xc9', 1)
> cp932 (b'\xfa\xe6', '桄') (b'\xed\xca', 1)
> cp932 (b'\xfa\xe7', '棏') (b'\xed\xcb', 1)
> cp932 (b'\xfa\xe8', '﨓') (b'\xed\xcc', 1)
> cp932 (b'\xfa\xe9', '楨') (b'\xed\xcd', 1)
> cp932 (b'\xfa\xea', '﨔') (b'\xed\xce', 1)
> cp932 (b'\xfa\xeb', '榘') (b'\xed\xcf', 1)
> cp932 (b'\xfa\xec', '槢') (b'\xed\xd0', 1)
> cp932 (b'\xfa\xed', '樰') (b'\xed\xd1', 1)
> cp932 (b'\xfa\xee', '橫') (b'\xed\xd2', 1)
> cp932 (b'\xfa\xef', '橆') (b'\xed\xd3', 1)
> cp932 (b'\xfa\xf0', '橳') (b'\xed\xd4', 1)
> cp932 (b'\xfa\xf1', '橾') (b'\xed\xd5', 1)
> cp932 (b'\xfa\xf2', '櫢') (b'\xed\xd6', 1)
> cp932 (b'\xfa\xf3', '櫤') (b'\xed\xd7', 1)
> cp932 (b'\xfa\xf4', '毖') (b'\xed\xd8', 1)
> cp932 (b'\xfa\xf5', '氿') (b'\xed\xd9', 1)
> cp932 (b'\xfa\xf6', '汜') (b'\xed\xda', 1)
> cp932 (b'\xfa\xf7', '沆') (b'\xed\xdb', 1)
> cp932 (b'\xfa\xf8', '汯') (b'\xed\xdc', 1)
> cp932 (b'\xfa\xf9', '泚') (b'\xed\xdd', 1)
> cp932 (b'\xfa\xfa', '洄') (b'\xed\xde', 1)
> cp932 (b'\xfa\xfb', '涇') (b'\xed\xdf', 1)
> cp932 (b'\xfa\xfc', '浯') (b'\xed\xe0', 1)
> cp932 (b'\xfb@', '涖') (b'\xed\xe1', 1)
> cp932 (b'\xfbA', '涬') (b'\xed\xe2', 1)
> cp932 (b'\xfbB', '淏') (b'\xed\xe3', 1)
> cp932 (b'\xfbC', '淸') (b'\xed\xe4', 1)
> cp932 (b'\xfbD', '淲') (b'\xed\xe5', 1)
> cp932 (b'\xfbE', '淼') (b'\xed\xe6', 1)
> cp932 (b'\xfbF', '渹') (b'\xed\xe7', 1)
> cp932 (b'\xfbG', '湜') (b'\xed\xe8', 1)
> cp932 (b'\xfbH', '渧') (b'\xed\xe9', 1)
> cp932 (b'\xfbI', '渼') (b'\xed\xea', 1)
> cp932 (b'\xfbJ', '溿') (b'\xed\xeb', 1)
> cp932 (b'\xfbK', '澈') (b'\xed\xec', 1)
> cp932 (b'\xfbL', '澵') (b'\xed\xed', 1)
> cp932 (b'\xfbM', '濵') (b'\xed\xee', 1)
> cp932 (b'\xfbN', '瀅') (b'\xed\xef', 1)
> cp932 (b'\xfbO', '瀇') (b'\xed\xf0', 1)
> cp932 (b'\xfbP', '瀨') (b'\xed\xf1', 1)
> cp932 (b'\xfbQ', '炅') (b'\xed\xf2', 1)
> cp932 (b'\xfbR', '炫') (b'\xed\xf3', 1)
> cp932 (b'\xfbS', '焏') (b'\xed\xf4', 1)
> cp932 (b'\xfbT', '焄') (b'\xed\xf5', 1)
> cp932 (b'\xfbU', '煜') (b'\xed\xf6', 1)
> cp932 (b'\xfbV', '煆') (b'\xed\xf7', 1)
> cp932 (b'\xfbW', '煇') (b'\xed\xf8', 1)
> cp932 (b'\xfbX', '凞') (b'\xed\xf9', 1)
> cp932 (b'\xfbY', '燁') (b'\xed\xfa', 1)
> cp932 (b'\xfbZ', '燾') (b'\xed\xfb', 1)
> cp932 (b'\xfb[', '犱') (b'\xed\xfc', 1)
> cp932 (b'\xfb\\', '犾') (b'\xee@', 1)
> cp932 (b'\xfb]', '猤') (b'\xeeA', 1)
> cp932 (b'\xfb^', '猪') (b'\xeeB', 1)
> cp932 (b'\xfb_', '獷') (b'\xeeC', 1)
> cp932 (b'\xfb`', '玽') (b'\xeeD', 1)
> cp932 (b'\xfba', '珉') (b'\xeeE', 1)
> cp932 (b'\xfbb', '珖') (b'\xeeF', 1)
> cp932 (b'\xfbc', '珣') (b'\xeeG', 1)
> cp932 (b'\xfbd', '珒') (b'\xeeH', 1)
> cp932 (b'\xfbe', '琇') (b'\xeeI', 1)
> cp932 (b'\xfbf', '珵') (b'\xeeJ', 1)
> cp932 (b'\xfbg', '琦') (b'\xeeK', 1)
> cp932 (b'\xfbh', '琪') (b'\xeeL', 1)
> cp932 (b'\xfbi', '琩') (b'\xeeM', 1)
> cp932 (b'\xfbj', '琮') (b'\xeeN', 1)
> cp932 (b'\xfbk', '瑢') (b'\xeeO', 1)
> cp932 (b'\xfbl', '璉') (b'\xeeP', 1)
> cp932 (b'\xfbm', '璟') (b'\xeeQ', 1)
> cp932 (b'\xfbn', '甁') (b'\xeeR', 1)
> cp932 (b'\xfbo', '畯') (b'\xeeS', 1)
> cp932 (b'\xfbp', '皂') (b'\xeeT', 1)
> cp932 (b'\xfbq', '皜') (b'\xeeU', 1)
> cp932 (b'\xfbr', '皞') (b'\xeeV', 1)
> cp932 (b'\xfbs', '皛') (b'\xeeW', 1)
> cp932 (b'\xfbt', '皦') (b'\xeeX', 1)
> cp932 (b'\xfbu', '益') (b'\xeeY', 1)
> cp932 (b'\xfbv', '睆') (b'\xeeZ', 1)
> cp932 (b'\xfbw', '劯') (b'\xee[', 1)
> cp932 (b'\xfbx', '砡') (b'\xee\\', 1)
> cp932 (b'\xfby', '硎') (b'\xee]', 1)
> cp932 (b'\xfbz', '硤') (b'\xee^', 1)
> cp932 (b'\xfb{', '硺') (b'\xee_', 1)
> cp932 (b'\xfb|', '礰') (b'\xee`', 1)
> cp932 (b'\xfb}', '礼') (b'\xeea', 1)
> cp932 (b'\xfb~', '神') (b'\xeeb', 1)
> cp932 (b'\xfb\x80', '祥') (b'\xeec', 1)
> cp932 (b'\xfb\x81', '禔') (b'\xeed', 1)
> cp932 (b'\xfb\x82', '福') (b'\xeee', 1)
> cp932 (b'\xfb\x83', '禛') (b'\xeef', 1)
> cp932 (b'\xfb\x84', '竑') (b'\xeeg', 1)
> cp932 (b'\xfb\x85', '竧') (b'\xeeh', 1)
> cp932 (b'\xfb\x86', '靖') (b'\xeei', 1)
> cp932 (b'\xfb\x87', '竫') (b'\xeej', 1)
> cp932 (b'\xfb\x88', '箞') (b'\xeek', 1)
> cp932 (b'\xfb\x89', '精') (b'\xeel', 1)
> cp932 (b'\xfb\x8a', '絈') (b'\xeem', 1)
> cp932 (b'\xfb\x8b', '絜') (b'\xeen', 1)
> cp932 (b'\xfb\x8c', '綷') (b'\xeeo', 1)
> cp932 (b'\xfb\x8d', '綠') (b'\xeep', 1)
> cp932 (b'\xfb\x8e', '緖') (b'\xeeq', 1)
> cp932 (b'\xfb\x8f', '繒') (b'\xeer', 1)
> cp932 (b'\xfb\x90', '罇') (b'\xees', 1)
> cp932 (b'\xfb\x91', '羡') (b'\xeet', 1)
> cp932 (b'\xfb\x92', '羽') (b'\xeeu', 1)
> cp932 (b'\xfb\x93', '茁') (b'\xeev', 1)
> cp932 (b'\xfb\x94', '荢') (b'\xeew', 1)
> cp932 (b'\xfb\x95', '荿') (b'\xeex', 1)
> cp932 (b'\xfb\x96', '菇') (b'\xeey', 1)
> cp932 (b'\xfb\x97', '菶') (b'\xeez', 1)
> cp932 (b'\xfb\x98', '葈') (b'\xee{', 1)
> cp932 (b'\xfb\x99', '蒴') (b'\xee|', 1)
> cp932 (b'\xfb\x9a', '蕓') (b'\xee}', 1)
> cp932 (b'\xfb\x9b', '蕙') (b'\xee~', 1)
> cp932 (b'\xfb\x9c', '蕫') (b'\xee\x80', 1)
> cp932 (b'\xfb\x9d', '﨟') (b'\xee\x81', 1)
> cp932 (b'\xfb\x9e', '薰') (b'\xee\x82', 1)
> cp932 (b'\xfb\x9f', '蘒') (b'\xee\x83', 1)
> cp932 (b'\xfb\xa0', '﨡') (b'\xee\x84', 1)
> cp932 (b'\xfb\xa1', '蠇') (b'\xee\x85', 1)
> cp932 (b'\xfb\xa2', '裵') (b'\xee\x86', 1)
> cp932 (b'\xfb\xa3', '訒') (b'\xee\x87', 1)
> cp932 (b'\xfb\xa4', '訷') (b'\xee\x88', 1)
> cp932 (b'\xfb\xa5', '詹') (b'\xee\x89', 1)
> cp932 (b'\xfb\xa6', '誧') (b'\xee\x8a', 1)
> cp932 (b'\xfb\xa7', '誾') (b'\xee\x8b', 1)
> cp932 (b'\xfb\xa8', '諟') (b'\xee\x8c', 1)
> cp932 (b'\xfb\xa9', '諸') (b'\xee\x8d', 1)
> cp932 (b'\xfb\xaa', '諶') (b'\xee\x8e', 1)
> cp932 (b'\xfb\xab', '譓') (b'\xee\x8f', 1)
> cp932 (b'\xfb\xac', '譿') (b'\xee\x90', 1)
> cp932 (b'\xfb\xad', '賰') (b'\xee\x91', 1)
> cp932 (b'\xfb\xae', '賴') (b'\xee\x92', 1)
> cp932 (b'\xfb\xaf', '贒') (b'\xee\x93', 1)
> cp932 (b'\xfb\xb0', '赶') (b'\xee\x94', 1)
> cp932 (b'\xfb\xb1', '﨣') (b'\xee\x95', 1)
> cp932 (b'\xfb\xb2', '軏') (b'\xee\x96', 1)
> cp932 (b'\xfb\xb3', '﨤') (b'\xee\x97', 1)
> cp932 (b'\xfb\xb4', '逸') (b'\xee\x98', 1)
> cp932 (b'\xfb\xb5', '遧') (b'\xee\x99', 1)
> cp932 (b'\xfb\xb6', '郞') (b'\xee\x9a', 1)
> cp932 (b'\xfb\xb7', '都') (b'\xee\x9b', 1)
> cp932 (b'\xfb\xb8', '鄕') (b'\xee\x9c', 1)
> cp932 (b'\xfb\xb9', '鄧') (b'\xee\x9d', 1)
> cp932 (b'\xfb\xba', '釚') (b'\xee\x9e', 1)
> cp932 (b'\xfb\xbb', '釗') (b'\xee\x9f', 1)
> cp932 (b'\xfb\xbc', '釞') (b'\xee\xa0', 1)
> cp932 (b'\xfb\xbd', '釭') (b'\xee\xa1', 1)
> cp932 (b'\xfb\xbe', '釮') (b'\xee\xa2', 1)
> cp932 (b'\xfb\xbf', '釤') (b'\xee\xa3', 1)
> cp932 (b'\xfb\xc0', '釥') (b'\xee\xa4', 1)
> cp932 (b'\xfb\xc1', '鈆') (b'\xee\xa5', 1)
> cp932 (b'\xfb\xc2', '鈐') (b'\xee\xa6', 1)
> cp932 (b'\xfb\xc3', '鈊') (b'\xee\xa7', 1)
> cp932 (b'\xfb\xc4', '鈺') (b'\xee\xa8', 1)
> cp932 (b'\xfb\xc5', '鉀') (b'\xee\xa9', 1)
> cp932 (b'\xfb\xc6', '鈼') (b'\xee\xaa', 1)
> cp932 (b'\xfb\xc7', '鉎') (b'\xee\xab', 1)
> cp932 (b'\xfb\xc8', '鉙') (b'\xee\xac', 1)
> cp932 (b'\xfb\xc9', '鉑') (b'\xee\xad', 1)
> cp932 (b'\xfb\xca', '鈹') (b'\xee\xae', 1)
> cp932 (b'\xfb\xcb', '鉧') (b'\xee\xaf', 1)
> cp932 (b'\xfb\xcc', '銧') (b'\xee\xb0', 1)
> cp932 (b'\xfb\xcd', '鉷') (b'\xee\xb1', 1)
> cp932 (b'\xfb\xce', '鉸') (b'\xee\xb2', 1)
> cp932 (b'\xfb\xcf', '鋧') (b'\xee\xb3', 1)
> cp932 (b'\xfb\xd0', '鋗') (b'\xee\xb4', 1)
> cp932 (b'\xfb\xd1', '鋙') (b'\xee\xb5', 1)
> cp932 (b'\xfb\xd2', '鋐') (b'\xee\xb6', 1)
> cp932 (b'\xfb\xd3', '﨧') (b'\xee\xb7', 1)
> cp932 (b'\xfb\xd4', '鋕') (b'\xee\xb8', 1)
> cp932 (b'\xfb\xd5', '鋠') (b'\xee\xb9', 1)
> cp932 (b'\xfb\xd6', '鋓') (b'\xee\xba', 1)
> cp932 (b'\xfb\xd7', '錥') (b'\xee\xbb', 1)
> cp932 (b'\xfb\xd8', '錡') (b'\xee\xbc', 1)
> cp932 (b'\xfb\xd9', '鋻') (b'\xee\xbd', 1)
> cp932 (b'\xfb\xda', '﨨') (b'\xee\xbe', 1)
> cp932 (b'\xfb\xdb', '錞') (b'\xee\xbf', 1)
> cp932 (b'\xfb\xdc', '鋿') (b'\xee\xc0', 1)
> cp932 (b'\xfb\xdd', '錝') (b'\xee\xc1', 1)
> cp932 (b'\xfb\xde', '錂') (b'\xee\xc2', 1)
> cp932 (b'\xfb\xdf', '鍰') (b'\xee\xc3', 1)
> cp932 (b'\xfb\xe0', '鍗') (b'\xee\xc4', 1)
> cp932 (b'\xfb\xe1', '鎤') (b'\xee\xc5', 1)
> cp932 (b'\xfb\xe2', '鏆') (b'\xee\xc6', 1)
> cp932 (b'\xfb\xe3', '鏞') (b'\xee\xc7', 1)
> cp932 (b'\xfb\xe4', '鏸') (b'\xee\xc8', 1)
> cp932 (b'\xfb\xe5', '鐱') (b'\xee\xc9', 1)
> cp932 (b'\xfb\xe6', '鑅') (b'\xee\xca', 1)
> cp932 (b'\xfb\xe7', '鑈') (b'\xee\xcb', 1)
> cp932 (b'\xfb\xe8', '閒') (b'\xee\xcc', 1)
> cp932 (b'\xfb\xe9', '隆') (b'\xee\xcd', 1)
> cp932 (b'\xfb\xea', '﨩') (b'\xee\xce', 1)
> cp932 (b'\xfb\xeb', '隝') (b'\xee\xcf', 1)
> cp932 (b'\xfb\xec', '隯') (b'\xee\xd0', 1)
> cp932 (b'\xfb\xed', '霳') (b'\xee\xd1', 1)
> cp932 (b'\xfb\xee', '霻') (b'\xee\xd2', 1)
> cp932 (b'\xfb\xef', '靃') (b'\xee\xd3', 1)
> cp932 (b'\xfb\xf0', '靍') (b'\xee\xd4', 1)
> cp932 (b'\xfb\xf1', '靏') (b'\xee\xd5', 1)
> cp932 (b'\xfb\xf2', '靑') (b'\xee\xd6', 1)
> cp932 (b'\xfb\xf3', '靕') (b'\xee\xd7', 1)
> cp932 (b'\xfb\xf4', '顗') (b'\xee\xd8', 1)
> cp932 (b'\xfb\xf5', '顥') (b'\xee\xd9', 1)
> cp932 (b'\xfb\xf6', '飯') (b'\xee\xda', 1)
> cp932 (b'\xfb\xf7', '飼') (b'\xee\xdb', 1)
> cp932 (b'\xfb\xf8', '餧') (b'\xee\xdc', 1)
> cp932 (b'\xfb\xf9', '館') (b'\xee\xdd', 1)
> cp932 (b'\xfb\xfa', '馞') (b'\xee\xde', 1)
> cp932 (b'\xfb\xfb', '驎') (b'\xee\xdf', 1)
> cp932 (b'\xfb\xfc', '髙') (b'\xee\xe0', 1)
> cp932 (b'\xfc@', '髜') (b'\xee\xe1', 1)
> cp932 (b'\xfcA', '魵') (b'\xee\xe2', 1)
> cp932 (b'\xfcB', '魲') (b'\xee\xe3', 1)
> cp932 (b'\xfcC', '鮏') (b'\xee\xe4', 1)
> cp932 (b'\xfcD', '鮱') (b'\xee\xe5', 1)
> cp932 (b'\xfcE', '鮻') (b'\xee\xe6', 1)
> cp932 (b'\xfcF', '鰀') (b'\xee\xe7', 1)
> cp932 (b'\xfcG', '鵰') (b'\xee\xe8', 1)
> cp932 (b'\xfcH', '鵫') (b'\xee\xe9', 1)
> cp932 (b'\xfcI', '鶴') (b'\xee\xea', 1)
> cp932 (b'\xfcJ', '鸙') (b'\xee\xeb', 1)
> cp932 (b'\xfcK', '黑') (b'\xee\xec', 1)
> johab (b'\x84A', '\u3000') (b'\xd91', 1)
> johab (b'\x84B', 'ㄱ') (b'\x88A', 1)
> johab (b'\x84C', 'ㄲ') (b'\x8cA', 1)
> johab (b'\x84E', 'ㄴ') (b'\x90A', 1)
> johab (b'\x84H', 'ㄷ') (b'\x94A', 1)
> johab (b'\x84I', 'ㄹ') (b'\x9cA', 1)
> johab (b'\x84Q', 'ㅁ') (b'\xa0A', 1)
> johab (b'\x84S', 'ㅂ') (b'\xa4A', 1)
> johab (b'\x84U', 'ㅅ') (b'\xacA', 1)
> johab (b'\x84V', 'ㅆ') (b'\xb0A', 1)
> johab (b'\x84W', 'ㅇ') (b'\xb4A', 1)
> johab (b'\x84X', 'ㅈ') (b'\xb8A', 1)
> johab (b'\x84Y', 'ㅊ') (b'\xc0A', 1)
> johab (b'\x84Z', 'ㅋ') (b'\xc4A', 1)
> johab (b'\x84[', 'ㅌ') (b'\xc8A', 1)
> johab (b'\x84\\', 'ㅍ') (b'\xccA', 1)
> johab (b'\x84]', 'ㅎ') (b'\xd0A', 1)
> cp950 (b'\xa2\xcc', '十') (b'\xa4Q', 1)
> cp950 (b'\xa2\xce', '卅') (b'\xa4\xca', 1)
> cp950 (b'\xf9\xe9', '╞') (b'\xa2\xa5', 1)
> cp950 (b'\xf9\xea', '╪') (b'\xa2\xa6', 1)
> cp950 (b'\xf9\xeb', '╡') (b'\xa2\xa7', 1)
> cp950 (b'\xf9\xf9', '═') (b'\xa2\xa4', 1)
> cp950 (b'\xf9\xfa', '╭') (b'\xa2~', 1)
> cp950 (b'\xf9\xfb', '╮') (b'\xa2\xa1', 1)
> cp950 (b'\xf9\xfc', '╰') (b'\xa2\xa2', 1)
> cp950 (b'\xf9\xfd', '╯') (b'\xa2\xa3', 1)

                #]]]'''#'''
def iter_all_2byte_chars_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> Iter char{<=[encoding]=>bytes{len==2}}'
    return (ch for (bs, ch) in iter_all_2byte_char_pairs_of_encoding_(**locals()))


def _findout_common_2byte_set_of_gbk_utf8_big5(*, encodings=None):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    if encodings is None:
        encodings = 'gbk utf8 big5'.split()
    return findout_common_2byte_set_of_encodings(encodings=encodings)
def findout_common_2byte_set_of_encodings(*, encodings):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    from seed.tiny_.funcs import fst
    zB_set = None
    for encoding in encodings:
        zB_set4e = set(map(fst, iter_all_2byte_char_pairs_of_encoding_(encoding=encoding, to_skip_fst_ascii=True)))
        if zB_set is None:
            zB_set = zB_set4e
        else:
            zB_set &= zB_set4e
    zB_ls = sorted(zB_set)
    return _iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_sorted_2byte_iterable(zB_ls)
def _findout_common_2byte_set_of_gbk_utf8_big5__with_bytes__with_chars_per_encoding(*, return_vs_print=False, encodings=None):
    '-> (hxsz8rng_hx2sz8rngs_pairs, bs, encoding2txt)'
    if (is_default:=encodings is None):
        encodings = 'gbk utf8 big5'.split()
    encodings = tuple(encodings)

    old_print = print
    from pprint import pprint#as print
    hxsz8rng_hx2sz8rngs_pairs = [*_findout_common_2byte_set_of_gbk_utf8_big5(encodings=encodings)]
    #mk_unicode_code_rngs5hxsz8rng_hx2sz8rngs_pairs
    #i2js = mk_i2js5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs)
    bs = mk_bytes5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs)
    if return_vs_print:
        pprint(hxsz8rng_hx2sz8rngs_pairs)
        pprint(bs)

    encoding2txt = {}
    for encoding in encodings:
        txt = bs.decode(encoding)
        encoding2txt[encoding] = txt
    encoding2txt


    if return_vs_print:
        for encoding in encodings:
            txt = encoding2txt[encoding]
            pprint(encoding)
            pprint(txt)

        if is_default:
            def is_good_hz(ch,/):
                return '一' <= ch <= '龥'
            ls0 = []
            ls1 = []
            ls2 = []
            for c0, c1, c2 in zip(encoding2txt['gbk'], encoding2txt['big5'], encoding2txt['utf8']):
                if is_good_hz(c0) and is_good_hz(c1):
                    ls0.append(c0)
                    ls1.append(c1)
                    ls2.append(c2)
            hzs4gbk = ''.join(ls0)
            hzs4big5 = ''.join(ls1)
            cs4utf8 = ''.join(ls2)
            print(f'{hzs4gbk}#hzs4gbk')
            print(f'{hzs4big5}#hzs4big5')
            print(f'{cs4utf8!r}#cs4utf8')
            print(f'{len(hzs4gbk)}:inside 一龥:')
            for c0, c1, c2 in zip(ls0, ls1, ls2):
                print(repr(c0+c1+c2))
            if (s := set(hzs4gbk)&set(hzs4big5)):
                s = ''.join(sorted(s))
                print(s)
                    #佴佶佼侄侉啥埭埽堀堋堙堞捅瞻耀芄芊芨芫茛蘑邾郅郇
    if return_vs_print:
        return None
    return (hxsz8rng_hx2sz8rngs_pairs, bs, encoding2txt)

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
        #although using algorithm of which the first-yield after O(N) steps, there are possible to be more smooth...
    #def mk__fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    #def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    #def iter_fst_byte_rng_snd_byte_rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    it = iter_all_2byte_char_pairs_of_encoding_(**locals())
    return _iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_sorted_2byte_char_pairs(it)

def _iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_sorted_2byte_char_pairs(sorted_2byte_char_pairs, /):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    from seed.tiny_.funcs import fst
    it = iter(map(fst, sorted_2byte_char_pairs))
    return _iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_sorted_2byte_iterable(it)
def _iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_sorted_2byte_iterable(sorted_2byte_iterable, /):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    it = iter(sorted_2byte_iterable)
    from seed.data_funcs.rngs import StackStyleSimpleIntSet, StackStyleSimpleIntMapping, TouchRangeBasedIntMapping, make_TouchRanges

    i2js = StackStyleSimpleIntMapping()
    i4js = 0
    js = StackStyleSimpleIntSet()
    #for (bs, ch) in it:
    for bs in it:
        i,j = bs
        if i == i4js:
            js.add(j)
            continue
        #
        if js:
            # flush old i:
            i2js[i4js] = js.to_NonTouchRanges() #.ranges
        # new i:
        i4js = i
        js = StackStyleSimpleIntSet()
        js.add(j)
    else:
        #bug:once miss this 『else』
        if js:
            # flush old i:
            i2js[i4js] = js.to_NonTouchRanges() #.ranges

    i2js # StackStyleSimpleIntMapping<StackStyleSimpleIntSet>
    i2js = i2js.to_TouchRangeBasedIntMapping()
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    #def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    hxsz8rng_hx2sz8rngs_pairs = mk_hxsz8rng_hx2sz8rngs_pairs5i2js(i2js)
    return iter(hxsz8rng_hx2sz8rngs_pairs)
    #def mk__fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> [(hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})]'
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    hxsz8rng_hx2sz8rngs_pairs = mk_hxsz8rng_hx2sz8rngs_pairs5i2js(i2js)
    return hxsz8rng_hx2sz8rngs_pairs
    '-> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    (rngs, rngss) = i2js.rngs_values_pair
    rngs = make_TouchRanges(rngs)
    assert rngs.len_rngs() == len(rngss)
    #rngs.to_hex2sz()
    hx_sz_ps = rngs.to_hex_sz_pair_list()
    hx2sz_ls = [rngs.to_hex2sz() for rngs in rngss]
    assert len(hx_sz_ps) == len(hx2sz_ls)
    return zip(hx_sz_ps, hx2sz_ls)
    #def iter_fst_byte_rng_snd_byte_rngs_pairs_of_encoding_(*, encoding, to_skip_fst_ascii):
    '-> Iter (rng, [rng])'
    return i2js.iter_rng_value_pairs_(reverse=False)
    i2js = i2js.to_TouchRangeBasedIntMapping()
    return i2js
#def iter_gbk_chars(encoding, /):
def mk_unicode_code_rngs5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /, *, encoding):
    '-> NonTouchRanges'
    from seed.data_funcs.rngs import make_Ranges, sorted_ints_to_iter_nontouch_ranges
    us = sorted(iter_code_pts5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, encoding=encoding))
    rngs = sorted_ints_to_iter_nontouch_ranges(us)
    return make_Ranges(rngs)
def iter_code_pts5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /, *, encoding):
    '-> Iter code_pt/uint'
    info = codecs.lookup(encoding)
    decode = info.decode
    i2js = mk_i2js5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs)
    for i, js in i2js.items():
        #iB = i<<8
        for j in js:
            #cp = iB + j
            bs = bytes([i,j])
            ch, L = decode(bs)
            assert L == 2
            assert len(ch) == 1
            cp = ord(ch)
            yield cp
def mk_bytes5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /):
    '-> bytes{len=2*...}'
    return b''.join(iter_2bytes5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs))
def iter_2bytes5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /):
    '-> Iter 2byte/bytes{len=2}'
    i2js = mk_i2js5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs)
    for (i,j), ks in i2js.iter_rng_value_pairs_(reverse=False):
        for fst_byte in range(i,j):
            for snd_byte in ks.iter_ints_(reverse=False):
                yield bytes([fst_byte, snd_byte])
def mk_i2js5hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /):
    'hxsz8rng_hx2sz8rngs_pairs/[(hxsz8rng,hx2sz8rngs)] -> i2js/IRangeBasedIntMapping__view_part_API<IRanges>'
    from seed.data_funcs.rngs import StackStyleSimpleIntMapping, TouchRangeBasedIntMapping, make_TouchRanges, IRanges
    #
    hxsz8rng_hx2sz8rngs_pairs = sorted(hxsz8rng_hx2sz8rngs_pairs)
    i2js = StackStyleSimpleIntMapping()
    i2js.push_rng_value_pairs(((int(hx),int(hx+sz)), IRanges.from_hex2sz(hx2sz8rngs)) for (hx,sz), hx2sz8rngs in hxsz8rng_hx2sz8rngs_pairs)
    i2js # StackStyleSimpleIntMapping<IRanges>
    i2js = i2js.to_TouchRangeBasedIntMapping()
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    return i2js
def mk_hxsz8rng_hx2sz8rngs_pairs5i2js(i2js, /):
    'i2js/IRangeBasedIntMapping__view_part_API<IRanges> -> hxsz8rng_hx2sz8rngs_pairs/[(hxsz8rng,hx2sz8rngs)]'
    from seed.data_funcs.rngs import make_TouchRanges
    #
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    (rngs, rngss) = i2js.rngs_values_pair
    rngs = make_TouchRanges(rngs)
    assert rngs.len_rngs() == len(rngss)
    #rngs.to_hex2sz()
    hx_sz_ps = rngs.to_hex_sz_pair_list()
    hx2sz_ls = [rngs.to_hex2sz() for rngs in rngss]
    assert len(hx_sz_ps) == len(hx2sz_ls)
    return list(zip(hx_sz_ps, hx2sz_ls))

_encodings = r'''
big5
big5hkscs
cp1258
cp932
cp949 = euc_kr = iso2022_kr = johab
cp950
euc_jis_2004
euc_jisx0213
euc_jp = iso2022_jp_1 = iso2022_jp_ext
gb18030 = utf8
gb2312 = hz
gbk
iso2022_jp = shift_jis
iso2022_jp_2
iso2022_jp_2004 = shift_jis_2004
iso2022_jp_3 = shift_jisx0213


'''.replace('=', ' ').split()#'''

def _show4encodings(*, encodings=_encodings, to_skip_fst_ascii=True):
    'view ../../python3_src/nn_ns/CJK/cjk_subsets/cjk_subsets__relationship.py.result.txt'

    to_skip_fst_ascii = bool(to_skip_fst_ascii)

    for encoding in encodings:
        print('='*22)
        print(f'(encoding={encoding}, to_skip_fst_ascii={to_skip_fst_ascii})')
        it = iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding=encoding, to_skip_fst_ascii=to_skip_fst_ascii)
        #for hxsz8rng, hx2sz8rngs in it:
        for x in it:
            print(f',{x!r}')

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb2312():
    '[encoding:=gb2312]: -> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    return iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gb2312', to_skip_fst_ascii=True)

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gbk():
    '[encoding:=gbk]: -> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    return iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gbk', to_skip_fst_ascii=True)

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_gb18030():
    '[encoding:=gb18030]: -> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    return iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='gb18030', to_skip_fst_ascii=True)

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5():
    '[encoding:=big5]: -> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    return iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='big5', to_skip_fst_ascii=True)

def iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_big5hkscs():
    '[encoding:=big5hkscs]: -> Iter (hxsz8rng/(begin,sz), hx2sz8rngs{begin:sz})'
    return iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding='big5hkscs', to_skip_fst_ascii=True)


def clone_result_data4common_2byte_set_of_gbk_utf8_big5():
    'result from:_findout_common_2byte_set_of_gbk_utf8_big5()'
    return deepcopy(
[((0xC2, 6), {0xA1: 31})
,((0xC9, 23), {0xA1: 31})
]
    )#end-deepcopy
def clone_result_data_ex4common_2byte_set_of_gbk_utf8_big5():
    'result from:_findout_common_2byte_set_of_gbk_utf8_big5__with_bytes__with_chars_per_encoding()'
    return deepcopy(
{'txt4common:gbk&big5':
#24
'佴佶佼侄侉啥埭埽堀堋堙堞捅瞻耀芄芊芨芫茛蘑邾郅郇'
,'txt4gbk:gbk&big5&utf8':(txt4gbk:=
#899==16*56+3
'隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳'
'卤虏鲁麓碌露路赂鹿潞禄录陆戮驴谩'
'芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽'
'貌贸么玫枚梅酶霉煤没眉媒镁每摹蘑'
'模膜磨摩魔抹末莫墨默沫漠寞陌谋牟'
'某拇牡亩姆母墓暮幕募慕木目拧泞牛'
'扭钮纽脓浓农弄奴努怒女暖虐疟挪懦'
'糯诺哦欧鸥殴藕呕偶沤啪趴啤脾疲皮'
'匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼'
'频贫品聘乒坪苹萍平凭瓶恰洽牵扦钎'
'铅千迁签仟谦乾黔钱钳前潜遣浅谴堑'
'嵌欠歉枪呛腔羌墙蔷强伞散桑嗓丧搔'
'骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥'
'煞筛晒珊苫杉山删煽省盛剩胜圣师失'
'狮施湿诗尸虱十石拾时什食蚀实识史'
'矢使屎驶始式示士恕刷耍摔衰甩帅栓'
'拴霜双爽谁水睡税吮瞬顺舜说硕朔烁'
'斯撕嘶思私司丝獭挞蹋踏胎苔抬台泰'
'酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦'
'毯袒碳探叹炭汀廷停亭庭挺艇通桐酮'
'瞳同铜彤童桶捅筒统痛偷投头透凸秃'
'突图徒途涂巍微危韦违桅围唯惟为潍'
'维苇萎委伟伪尾纬未蔚味畏胃喂魏位'
'渭谓尉慰稀息希悉膝夕惜熄烯溪汐犀'
'檄袭席习媳喜铣洗系隙戏细瞎虾匣霞'
'辖暇峡小孝校肖啸笑效楔些歇蝎鞋协'
'挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪'
'芯锌选癣眩绚靴薛学穴雪血勋熏循旬'
'询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫'
'芽摇尧遥窑谣姚咬舀药要耀椰噎耶爷'
'野冶也页掖业叶曳腋夜液一壹医揖铱'
'印英樱婴鹰应缨莹萤营荧蝇迎赢盈影'
'颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌浴'
'寓裕预豫驭鸳渊冤元垣袁原援辕园员'
'圆猿源缘远苑愿怨院曰约越跃钥铡闸'
'眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹'
'粘沾盏斩辗崭展蘸栈占战站湛帧症郑'
'证芝枝支吱蜘知肢脂汁之织职直植殖'
'执值侄址指止趾只旨纸志挚住注祝驻'
'抓爪拽专砖转撰赚篆桩庄装妆撞壮状'
'椎锥追赘坠缀谆准捉拙卓亍丌兀丐廿'
'卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐'
'囟胤馗毓睾鼗丶亟鼐乜佟佗伲伽佶佴'
'侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣'
'俜俑俟俸倩偌俳倬倏凇冖冢冥讠讦讧'
'讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜'
'诟诠诤诨诩诮诰诳邸邰郏郅邾郐郄郇'
'郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹'
'酃酆刍奂劢劬劭堋堍埽埭堀堞堙塄堠'
'塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄'
'芎芑芗芙芫芸荨茛荩荬荪荭荮莰荸莳'
'莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺'
'莼菁萁菥菘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢'
'蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁'
'藜藿蘧蘅摺撷撸撙撺擀擐擗擤擢攉攥'
'攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒'
'呓呔呖'
)
,'txt4gbk4big5_non_hzs:gbk&big5&utf8': txt4gbk[124:124+62]
,'hzs4gbk4big5_hzs:gbk&big5&utf8': txt4gbk[:124] + txt4gbk[124+62:]
}
    )#end-deepcopy
def mk_txt_filter_of_encoding_(encoding, /):
    info = codecs.lookup(encoding)
    encode = info.encode
    def is_ok(ch, /):
        try:
            encode(ch)
        except UnicodeEncodeError:
            return False
        return True
    def txt_filter(s, /):
        return ''.join(filter(is_ok, s))
    return txt_filter
def __():
    #都是gb2312
    txt_filter = mk_txt_filter_of_encoding_('gb2312')
    d = clone_result_data_ex4common_2byte_set_of_gbk_utf8_big5()

    assert len(d['txt4common:gbk&big5']) == 24
    assert (s:=txt_filter(d['txt4common:gbk&big5'])) == d['txt4common:gbk&big5'], s

    assert len(d['hzs4gbk4big5_hzs:gbk&big5&utf8']) == 837
    assert (s:=txt_filter(d['hzs4gbk4big5_hzs:gbk&big5&utf8'])) == d['hzs4gbk4big5_hzs:gbk&big5&utf8'], s

    assert len(d['txt4gbk:gbk&big5&utf8']) == 899
    assert (s:=txt_filter(d['txt4gbk:gbk&big5&utf8'])) == d['txt4gbk:gbk&big5&utf8'], s

    assert len(d['hzs4gbk4big5_hzs:gbk&big5&utf8']) == 837
    assert d['hzs4gbk4big5_hzs:gbk&big5&utf8'] == (
#837==16*52+5
'隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳'
'卤虏鲁麓碌露路赂鹿潞禄录陆戮驴谩'
'芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽'
'貌贸么玫枚梅酶霉煤没眉媒镁每摹蘑'
'模膜磨摩魔抹末莫墨默沫漠寞陌谋牟'
'某拇牡亩姆母墓暮幕募慕木目拧泞牛'
'扭钮纽脓浓农弄奴努怒女暖虐疟挪懦'
'糯诺哦欧鸥殴藕呕偶沤啪趴伞散桑嗓'
'丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱'
'傻啥煞筛晒珊苫杉山删煽省盛剩胜圣'
'师失狮施湿诗尸虱十石拾时什食蚀实'
'识史矢使屎驶始式示士恕刷耍摔衰甩'
'帅栓拴霜双爽谁水睡税吮瞬顺舜说硕'
'朔烁斯撕嘶思私司丝獭挞蹋踏胎苔抬'
'台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭'
'谈坦毯袒碳探叹炭汀廷停亭庭挺艇通'
'桐酮瞳同铜彤童桶捅筒统痛偷投头透'
'凸秃突图徒途涂巍微危韦违桅围唯惟'
'为潍维苇萎委伟伪尾纬未蔚味畏胃喂'
'魏位渭谓尉慰稀息希悉膝夕惜熄烯溪'
'汐犀檄袭席习媳喜铣洗系隙戏细瞎虾'
'匣霞辖暇峡小孝校肖啸笑效楔些歇蝎'
'鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢'
'屑薪芯锌选癣眩绚靴薛学穴雪血勋熏'
'循旬询寻驯巡殉汛训讯逊迅压押鸦鸭'
'呀丫芽摇尧遥窑谣姚咬舀药要耀椰噎'
'耶爷野冶也页掖业叶曳腋夜液一壹医'
'揖铱印英樱婴鹰应缨莹萤营荧蝇迎赢'
'盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳'
'涌浴寓裕预豫驭鸳渊冤元垣袁原援辕'
'园员圆猿源缘远苑愿怨院曰约越跃钥'
'铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻'
'毡詹粘沾盏斩辗崭展蘸栈占战站湛帧'
'症郑证芝枝支吱蜘知肢脂汁之织职直'
'植殖执值侄址指止趾只旨纸志挚住注'
'祝驻抓爪拽专砖转撰赚篆桩庄装妆撞'
'壮状椎锥追赘坠缀谆准捉拙卓亍丌兀'
'丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻'
'卮氐囟胤馗毓睾鼗丶亟鼐乜佟佗伲伽'
'佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅'
'俚俣俜俑俟俸倩偌俳倬倏凇冖冢冥讠'
'讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘'
'诙诜诟诠诤诨诩诮诰诳邸邰郏郅邾郐'
'郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱'
'鄯鄹酃酆刍奂劢劬劭堋堍埽埭堀堞堙'
'塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊'
'芨芄芎芑芗芙芫芸荨茛荩荬荪荭荮莰'
'荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞'
'莨莺莼菁萁菥菘蕖蔻蓿蓼蕙蕈蕨蕤蕞'
'蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰'
'藓藁藜藿蘧蘅摺撷撸撙撺擀擐擗擤擢'
'攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆'
'呋呒呓呔呖'
)
if 0b001:
    __()
def clone_result_data4gb2312_gbk_gb18030():
    'result from:iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding=???, to_skip_fst_ascii=True)'
    return deepcopy(
{'gb2312':
[((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12})
,((0xA3, 1), {0xA1: 94})
,((0xA4, 1), {0xA1: 83})
,((0xA5, 1), {0xA1: 86})
,((0xA6, 1), {0xA1: 24, 0xC1: 24})
,((0xA7, 1), {0xA1: 33, 0xD1: 33})
,((0xA8, 1), {0xA1: 26, 0xC5: 37})
,((0xA9, 1), {0xA4: 76})
,((0xB0, 39), {0xA1: 94})
,((0xD7, 1), {0xA1: 89})
,((0xD8, 32), {0xA1: 94})
]
,'gbk':
[((0x81, 32), {0x40: 63, 0x80: 127})
,((0xA1, 1), {0xA1: 94})
,((0xA2, 1), {0xA1: 10, 0xB1: 50, 0xE5: 10, 0xF1: 12})
,((0xA3, 1), {0xA1: 94})
,((0xA4, 1), {0xA1: 83})
,((0xA5, 1), {0xA1: 86})
,((0xA6, 1), {0xA1: 24, 0xC1: 24, 0xE0: 12, 0xEE: 5, 0xF4: 2})
,((0xA7, 1), {0xA1: 33, 0xD1: 33})
,((0xA8, 1), {0x40: 63, 0x80: 22, 0xA1: 27, 0xBD: 2, 0xC0: 1, 0xC5: 37})
,((0xA9, 1), {0x40: 24, 0x59: 2, 0x5C: 1, 0x60: 31, 0x80: 9, 0x96: 1, 0xA4: 76})
,((0xAA, 6), {0x40: 63, 0x80: 33})
,((0xB0, 39), {0x40: 63, 0x80: 127})
,((0xD7, 1), {0x40: 63, 0x80: 122})
,((0xD8, 32), {0x40: 63, 0x80: 127})
,((0xF8, 6), {0x40: 63, 0x80: 33})
,((0xFE, 1), {0x40: 16})
]
,'gb18030':
[((0x81, 126), {0x40: 63, 0x80: 127})
]
}
    )#end-deepcopy
######################
######################
######################
def clone_result_data4utf8_big5_big5hkscs__shift_jis__shift_jis_2004__shift_jisx0213():
    'result from:iter_fst_byte_hzsz8rng_snd_byte_hx2sz8rngs_pairs_of_encoding_(encoding=???, to_skip_fst_ascii=True)'
    return deepcopy(
{'utf8':
[((0xC2, 30), {0x80: 64})
]
,'big5':
[((0xA1, 1), {0x40: 63, 0xA1: 93})
,((0xA2, 1), {0x41: 62, 0xA1: 43, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31})
,((0xA4, 35), {0x40: 63, 0xA1: 94})
,((0xC7, 1), {0x40: 63, 0xA1: 92})
,((0xC9, 48), {0x40: 63, 0xA1: 94})
,((0xF9, 1), {0x40: 63, 0xA1: 53})
]
,'big5hkscs':
[((0x87, 1), {0x40: 38, 0x67: 19})
,((0x88, 1), {0x40: 34, 0x63: 1, 0x65: 26, 0xA1: 2, 0xA4: 1, 0xA6: 5})
,((0x89, 1), {0x40: 2, 0x43: 1, 0x46: 4, 0x4C: 51, 0xA1: 6, 0xAB: 4, 0xB0: 3, 0xB5: 11, 0xC1: 3, 0xC5: 58})
,((0x8A, 1), {0x40: 2, 0x43: 32, 0x64: 17, 0x76: 9, 0xA1: 10, 0xAC: 5, 0xB2: 8, 0xBB: 13, 0xC9: 4, 0xCE: 15, 0xDF: 22, 0xF6: 9})
,((0x8B, 1), {0x40: 20, 0x55: 42, 0xA1: 60, 0xDE: 32})
,((0x8C, 1), {0x40: 63, 0xA1: 5, 0xA7: 31, 0xC9: 4, 0xCE: 23, 0xE6: 25})
,((0x8D, 1), {0x40: 1, 0x42: 61, 0xA1: 94})
,((0x8E, 1), {0x40: 41, 0x6A: 5, 0x70: 14, 0xA1: 10, 0xAC: 8, 0xB5: 24, 0xCE: 2, 0xD1: 46})
,((0x8F, 1), {0x40: 23, 0x58: 17, 0x6A: 4, 0x6F: 16, 0xA1: 42, 0xCD: 49})
,((0x90, 1), {0x40: 45, 0x6E: 12, 0x7B: 4, 0xA1: 59, 0xDD: 20, 0xF2: 13})
,((0x91, 1), {0x40: 63, 0xA1: 30, 0xC0: 63})
,((0x92, 1), {0x40: 4, 0x45: 58, 0xA1: 14, 0xB3: 21, 0xC9: 8, 0xD2: 45})
,((0x93, 1), {0x40: 63, 0xA1: 94})
,((0x94, 1), {0x40: 7, 0x48: 55, 0xA1: 41, 0xCB: 52})
,((0x95, 1), {0x40: 63, 0xA1: 56, 0xDA: 37})
,((0x96, 1), {0x40: 4, 0x45: 58, 0xA1: 76, 0xEE: 14, 0xFD: 2})
,((0x97, 4), {0x40: 63, 0xA1: 94})
,((0x9B, 1), {0x40: 33, 0x62: 20, 0x77: 1, 0x79: 2, 0x7C: 3, 0xA1: 37, 0xC7: 23, 0xDF: 13, 0xED: 9, 0xF7: 8})
,((0x9C, 1), {0x40: 2, 0x43: 16, 0x54: 14, 0x63: 5, 0x69: 2, 0x6C: 11, 0x78: 7, 0xA1: 27, 0xBE: 18, 0xD1: 46})
,((0x9D, 1), {0x40: 23, 0x58: 2, 0x5B: 36, 0xA1: 35, 0xC5: 58})
,((0x9E, 1), {0x40: 63, 0xA1: 8, 0xAA: 2, 0xAD: 23, 0xC5: 42, 0xF0: 4, 0xF5: 8, 0xFE: 1})
,((0x9F, 1), {0x40: 14, 0x4F: 17, 0x61: 5, 0x67: 24, 0xA1: 12, 0xAE: 3, 0xB2: 14, 0xC1: 7, 0xC9: 2, 0xCC: 12, 0xD9: 1, 0xDB: 11, 0xE7: 3, 0xEB: 4, 0xF0: 15})
,((0xA0, 1), {0x40: 20, 0x55: 2, 0x58: 2, 0x5B: 7, 0x64: 14, 0x73: 4, 0x78: 7, 0xA1: 4, 0xA6: 7, 0xAE: 1, 0xB0: 35, 0xD4: 1, 0xD6: 9, 0xE0: 1, 0xE2: 2, 0xE5: 26})
,((0xA1, 1), {0x40: 63, 0xA1: 93})
,((0xA2, 1), {0x41: 61, 0xA8: 36, 0xCD: 1, 0xCF: 48})
,((0xA3, 1), {0x40: 63, 0xA1: 31})
,((0xA4, 34), {0x40: 63, 0xA1: 94})
,((0xC6, 1), {0x40: 63, 0xA1: 46, 0xD0: 3, 0xD4: 1, 0xD6: 1, 0xD8: 6, 0xE0: 31})
,((0xC7, 1), {0x40: 63, 0xA1: 94})
,((0xC8, 1), {0x40: 63, 0xA1: 4, 0xCD: 37, 0xF5: 10})
,((0xC9, 49), {0x40: 63, 0xA1: 94})
,((0xFA, 1), {0x40: 31, 0x60: 6, 0x67: 24, 0xA1: 28, 0xBE: 7, 0xC6: 15, 0xD6: 41})
,((0xFB, 1), {0x40: 8, 0x49: 54, 0xA1: 23, 0xB9: 58, 0xF4: 5, 0xFA: 5})
,((0xFC, 1), {0x40: 15, 0x50: 28, 0x6D: 18, 0xA1: 24, 0xBA: 40, 0xE3: 14, 0xF2: 13})
,((0xFD, 1), {0x40: 63, 0xA1: 22, 0xB9: 2, 0xBC: 53, 0xF2: 13})
,((0xFE, 1), {0x40: 18, 0x53: 28, 0x70: 15, 0xA1: 9, 0xAB: 50, 0xDE: 33})
]
,'shift_jis':
[((0x81, 1), {0x40: 63, 0x80: 45, 0xB8: 8, 0xC8: 7, 0xDA: 15, 0xF0: 8, 0xFC: 1})
,((0x82, 1), {0x4F: 10, 0x60: 26, 0x81: 26, 0x9F: 83})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 24, 0xBF: 24})
,((0x84, 1), {0x40: 33, 0x70: 15, 0x80: 18, 0x9F: 32})
,((0x88, 1), {0x9F: 94})
,((0x89, 15), {0x40: 63, 0x80: 125})
,((0x98, 1), {0x40: 51, 0x9F: 94})
,((0x99, 7), {0x40: 63, 0x80: 125})
,((0xE0, 10), {0x40: 63, 0x80: 125})
,((0xEA, 1), {0x40: 63, 0x80: 37})
]
,'shift_jis_2004':
[((0x81, 1), {0x40: 63, 0x80: 125})
,((0x82, 1), {0x40: 63, 0x80: 117})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 87, 0xF7: 6})
,((0x84, 1), {0x40: 63, 0x80: 93, 0xE5: 22})
,((0x85, 1), {0x40: 63, 0x80: 125})
,((0x86, 1), {0x40: 35, 0x64: 3, 0x6F: 16, 0x80: 5, 0x87: 107, 0xFB: 2})
,((0x87, 1), {0x40: 55, 0x7E: 1, 0x80: 16, 0x93: 1, 0x98: 2, 0x9D: 96})
,((0x88, 24), {0x40: 63, 0x80: 125})
,((0xE0, 28), {0x40: 63, 0x80: 125})
,((0xFC, 1), {0x40: 63, 0x80: 117})
]
,'shift_jisx0213':
[((0x81, 1), {0x40: 63, 0x80: 125})
,((0x82, 1), {0x40: 63, 0x80: 117})
,((0x83, 1), {0x40: 63, 0x80: 23, 0x9F: 87, 0xF7: 6})
,((0x84, 1), {0x40: 63, 0x80: 93, 0xE5: 22})
,((0x85, 1), {0x40: 63, 0x80: 125})
,((0x86, 1), {0x40: 35, 0x64: 3, 0x6F: 16, 0x80: 5, 0x87: 107, 0xFB: 2})
,((0x87, 1), {0x40: 55, 0x7E: 1, 0x80: 16, 0x93: 1, 0x98: 2, 0x9D: 2, 0xA0: 93})
,((0x88, 1), {0x40: 63, 0x80: 30, 0x9F: 94})
,((0x89, 15), {0x40: 63, 0x80: 125})
,((0x98, 1), {0x40: 51, 0x74: 11, 0x80: 30, 0x9F: 94})
,((0x99, 7), {0x40: 63, 0x80: 125})
,((0xE0, 10), {0x40: 63, 0x80: 125})
,((0xEA, 1), {0x40: 63, 0x80: 37, 0xA6: 87})
,((0xEB, 4), {0x40: 63, 0x80: 125})
,((0xEF, 1), {0x40: 63, 0x80: 120})
,((0xF0, 12), {0x40: 63, 0x80: 125})
,((0xFC, 1), {0x40: 63, 0x80: 117})
]
}
    )#end-deepcopy
######################
######################
######################
def calc_total_of_rng_rngs_pair(rng_rngs_pair, /):
    (rng, rngs) = rng_rngs_pair
    (i, j) = rng
    sz4fst = j-i
    sz4snd = sum(j-i for i, j in rngs)
    total = sz4fst*sz4snd
    return total


def calc_total_of_hxsz8rng_hxszs8rngs_pair(hxsz8rng_hxszs8rngs_pair, /):
    (hxsz8rng, hxszs8rngs) = hxsz8rng_hxszs8rngs_pair
    (_, sz4fst) = hxsz8rng
    sz4snd = sum(sz for hx, sz in hxszs8rngs)
    total = sz4fst*sz4snd
    return total

def calc_total_of_hxsz8rng_hx2sz8rngs_pair(hxsz8rng_hx2sz8rngs_pair, /):
    (hxsz8rng, hx2sz8rngs) = hxsz8rng_hx2sz8rngs_pair
    (_, sz4fst) = hxsz8rng
    sz4snd = sum(hx2sz8rngs.values())
    total = sz4fst*sz4snd
    return total
def calc_total_of_hxsz8rng_hx2sz8rngs_pairs(hxsz8rng_hx2sz8rngs_pairs, /):
    return sum(map(calc_total_of_hxsz8rng_hx2sz8rngs_pair, hxsz8rng_hx2sz8rngs_pairs))

######################
def calc_intersection_of_hxsz8rng_hx2sz8rngs_pairs__with__rng_rngs_pair(hxsz8rng_hx2sz8rngs_pairs, rng_rngs_pair, /):
    '-> hxsz8rng_hx2sz8rngs_pairs/[(hxsz8rng,hx2sz8rngs)]'
    #xxx:'-> rng_rngs_pairs/[(rng, [rng])]'
    from seed.data_funcs.rngs import make_Ranges, IRanges, StackStyleSimpleIntMapping, TouchRangeBasedIntMapping
    #
    ((i4blk,j4blk), rngs6blk) = rng_rngs_pair
    rngs6blk = make_Ranges(rngs6blk)

    rng_rngs_pairs = []
    for ((hx,sz), hx2sz8rngs) in hxsz8rng_hx2sz8rngs_pairs:
        i, j = hx, hx+sz
        i = max(i4blk, i)
        j = min(j4blk, j)
        if not i < j:continue
        rng = (i, j)
        rngs = IRanges.from_hex2sz(hx2sz8rngs)
        rngs &= rngs6blk
        if rngs:
            rng_rngs_pairs.append((rng, rngs))
    rng_rngs_pairs.sort()
    i2js = StackStyleSimpleIntMapping()
    i2js.push_rng_value_pairs(rng_rngs_pairs)
    i2js
    i2js # StackStyleSimpleIntMapping<IRanges>
    i2js = i2js.to_TouchRangeBasedIntMapping()
    i2js # IRangeBasedIntMapping__view_part_API<IRanges>
    hxsz8rng_hx2sz8rngs_pairs = mk_hxsz8rng_hx2sz8rngs_pairs5i2js(i2js)
    return hxsz8rng_hx2sz8rngs_pairs
    #rng_rngs_pairs = [*k2rngs.iter_rng_value_pairs_(reverse=False)]
    #'-> rng_rngs_pairs/[(rng, [rng])]'
    #return rng_rngs_pairs




#from seed.data_funcs.rngs import make_Ranges, sorted_rngs_to_iter_nontouch_ranges, sorted_ints_to_iter_nontouch_ranges, detect_iter_ranges, StackStyleSimpleIntSet, StackStyleSimpleIntMapping, TouchRangeBasedIntMapping
#    TouchRangeBasedIntMapping.from_value2begin2sz/.from_rng_value_pairs/.from_clone_of_rngs_with_default
#from seed.data_funcs.rngs import IRanges
#    for:.from_hexXhexszpair_list/.from_hex_repr_pair_list/.from_len_rng2hexbegins/.from_len_rng2begin_chars/.from_char_pairs__str/.from_hex_sz_pair_list/.from_hex2sz
#from seed.data_funcs.rngs import NonTouchRanges, TouchRanges, make_NonTouchRanges, make_TouchRanges
#from seed.data_funcs.rngs import len_of__rng, len_of__rng__neg_as0
#
#

#from seed.data_funcs.rngs import IRangeBasedIntMapping__view_part_API, IRangeBasedIntMapping


######################
######################
######################
class _G:
    r'''[[[
view ../lots/NOTE/encoding/gbk-www.txt

==:data-table:
GBK Encoding Ranges
range	byte 1	byte 2	code points	characters
GB 18030	GBK 1.0	Codepage 936	GB 2312
Level GBK/1	A1–A9	A1–FE	846	718 [7] : 8–10 	717	715	682
Level GBK/2	B0–F7	A1–FE	6,768	6,763	6,763	6,763
Level GBK/3	81–A0	40–FE except 7F	6,080	6,080	6,080	
Level GBK/4	AA–FE	40–A0 except 7F	8,160	8,160	8,080
Level GBK/5	A8–A9	40–A0 except 7F	192	166	153
user-defined 1 [7]	AA–AF	A1–FE	564	
user-defined 2	F8–FE	A1–FE	658
user-defined 3	A1–A7	40–A0 except 7F	672
total:			23,940	21,887	21,886	21,791	7,445

    #]]]'''#'''
    #==:data-py-rng_rngs_pair:
    #Level GBK/1
    gb_lvl_1 = ((0xA1,0xA9+1), [(0xA1,0xFE+1)])
    szs4gb_lvl_1 = (846, 718, 717, 715, 682)
      #(总数纟编码点/total_code_pts,gb18030,gbk_1_0,cp936,gb2312)

    gb_lvl_2 = ((0xB0,0xF7+1), [(0xA1,0xFE+1)])
    szs4gb_lvl_2 = (6768, 6763, 6763, 6763, 6763)
      # [6763+682==7445]

    gb_lvl_3 = ((0x81,0xA0+1), [(0x40,0x7E+1),(0x80,0xFE+1)])
    szs4gb_lvl_3 = (6080, 6080, 6080, 6080, 0)

    gb_lvl_4 = ((0xAA,0xFE+1), [(0x40,0x7E+1),(0x80,0xA0+1)])
    szs4gb_lvl_4 = (8160, 8160, 8160, 8080, 0)

    gb_lvl_5 = ((0xA8,0xA9+1), [(0x40,0x7E+1),(0x80,0xA0+1)])
    szs4gb_lvl_5 = (192, 166, 166, 153, 0)

    #user-defined 1:
    gb_ud_1 = ((0xAA,0xAF+1), [(0xA1,0xFE+1)])
    sz4gb_ud_1 = 564

    gb_ud_2 = ((0xF8,0xFE+1), [(0xA1,0xFE+1)])
    sz4gb_ud_2 = 658

    gb_ud_3 = ((0xA1,0xA7+1), [(0x40,0x7E+1),(0x80,0xA0+1)])
    sz4gb_ud_3 = 672

    total = (23940, 21887, 21886, 21791, 7445)
      #(总数纟编码点/total_code_pts,gb18030,gbk_1_0,cp936,gb2312)
      #
      # [6763+682==7445]#gb2312
      # [715+6763+6080+8080+153==21791]#cp936
      # [717+6763+6080+8160+166==21886]#gbk_1_0
      # [718+6763+6080+8160+166==21887]#gb18030
      # [846+6768+6080+8160+192 + 564+658+672 == 23940]#编码点:含:未赋值编码点+用户自定义区/?私用区?/?造字区?


    jmm2sz4gb_lvl_j = (
        [szs4gb_lvl_1
        ,szs4gb_lvl_2
        ,szs4gb_lvl_3
        ,szs4gb_lvl_4
        ,szs4gb_lvl_5
        ]
    )

    jmm2gb_lvl_j = (
        [gb_lvl_1
        ,gb_lvl_2
        ,gb_lvl_3
        ,gb_lvl_4
        ,gb_lvl_5
        ]
    )

    kmm2sz4gb_ud_k = (
        [sz4gb_ud_1
        ,sz4gb_ud_2
        ,sz4gb_ud_3
        ]
    )

    kmm2gb_ud_k = (
        [gb_ud_1
        ,gb_ud_2
        ,gb_ud_3
        ]
    )


    [idx4all_code_pts__6szs4gb_lvl_j
    ,idx4gb18030__6szs4gb_lvl_j
    ,idx4gbk__6szs4gb_lvl_j
    ,idx4cp936__6szs4gb_lvl_j
    ,idx4gb2312__6szs4gb_lvl_j
    ] = range(5)



    ## [py.gbk =[def]= cp936]

    r'''[[[
from seed.math.sign_of import sign_of
import nn_ns.CJK.iter_gbk_chars as m
import importlib
m=importlib.reload(m)
h=m.calc_intersection_of_hxsz8rng_hx2sz8rngs_pairs__with__rng_rngs_pair
ct=m.calc_total_of_hxsz8rng_hx2sz8rngs_pairs

_G=m._G
jmm2sz4gb_lvl_j = _G.jmm2sz4gb_lvl_j
jmm2gb_lvl_j = _G.jmm2gb_lvl_j
d = m.clone_result_data4gb2312_gbk_gb18030()

#xxx:i2s8sgn = ('0', '+1', '-1')
i2s8sgn = ('==', '>', '<')
for encoding, hxsz8rng_hx2sz8rngs_pairs in d.items():
    print('='*22)
    print((encoding, hxsz8rng_hx2sz8rngs_pairs))
    print('+'*22)
    idx4sz = getattr(_G, f'idx4{encoding}__6szs4gb_lvl_j')
    for j, (szs4gb_lvl_j, gb_lvl_j) in enumerate(zip(jmm2sz4gb_lvl_j, jmm2gb_lvl_j), 1):
            sz4gb_lvl_j = szs4gb_lvl_j[idx4sz]
            #print((j, szs4gb_lvl_j, gb_lvl_j))
            nm4gb_lvl_j = f'gb_lvl_{j}'
            r = h(hxsz8rng_hx2sz8rngs_pairs, gb_lvl_j)
            sz = ct(r)
            i8sgn = sign_of(sz4gb_lvl_j -sz)
            s8sgn = i2s8sgn[i8sgn]
            print((encoding, nm4gb_lvl_j, sz4gb_lvl_j, s8sgn, sz, r))
    print('-'*22)

==>>:
    有的『>』有的『<』，到底是啥毛病？
    gbk 『声明>实际』:<<== [py3_11_9.gbk =[def]= cp936]
    gb18030 『声明<实际』:<<==???可能是gb_lvl_5之后，使用unicode实心填充的缘故，所有编码点均被赋值...???
======================
('gb2312', [((161, 1), {161: 94}), ((162, 1), {177: 50, 229: 10, 241: 12}), ((163, 1), {161: 94}), ((164, 1), {161: 83}), ((165, 1), {161: 86}), ((166, 1), {161: 24, 193: 24}), ((167, 1), {161: 33, 209: 33}), ((168, 1), {161: 26, 197: 37}), ((169, 1), {164: 76}), ((176, 39), {161: 94}), ((215, 1), {161: 89}), ((216, 32), {161: 94})])
++++++++++++++++++++++
('gb2312', 'gb_lvl_1', 682, '==', 682, [((0xA1, 1), {0xA1: 94}), ((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12}), ((0xA3, 1), {0xA1: 94}), ((0xA4, 1), {0xA1: 83}), ((0xA5, 1), {0xA1: 86}), ((0xA6, 1), {0xA1: 24, 0xC1: 24}), ((0xA7, 1), {0xA1: 33, 0xD1: 33}), ((0xA8, 1), {0xA1: 26, 0xC5: 37}), ((0xA9, 1), {0xA4: 76})])
('gb2312', 'gb_lvl_2', 6763, '==', 6763, [((0xB0, 39), {0xA1: 94}), ((0xD7, 1), {0xA1: 89}), ((0xD8, 32), {0xA1: 94})])
('gb2312', 'gb_lvl_3', 0, '==', 0, [])
('gb2312', 'gb_lvl_4', 0, '==', 0, [])
('gb2312', 'gb_lvl_5', 0, '==', 0, [])
----------------------
======================
('gbk', [((129, 32), {64: 63, 128: 127}), ((161, 1), {161: 94}), ((162, 1), {161: 10, 177: 50, 229: 10, 241: 12}), ((163, 1), {161: 94}), ((164, 1), {161: 83}), ((165, 1), {161: 86}), ((166, 1), {161: 24, 193: 24, 224: 12, 238: 5, 244: 2}), ((167, 1), {161: 33, 209: 33}), ((168, 1), {64: 63, 128: 22, 161: 27, 189: 2, 192: 1, 197: 37}), ((169, 1), {64: 24, 89: 2, 92: 1, 96: 31, 128: 9, 150: 1, 164: 76}), ((170, 6), {64: 63, 128: 33}), ((176, 39), {64: 63, 128: 127}), ((215, 1), {64: 63, 128: 122}), ((216, 32), {64: 63, 128: 127}), ((248, 6), {64: 63, 128: 33}), ((254, 1), {64: 16})])
++++++++++++++++++++++
('gbk', 'gb_lvl_1', 717, '>', 715, [((0xA1, 1), {0xA1: 94}), ((0xA2, 1), {0xA1: 10, 0xB1: 50, 0xE5: 10, 0xF1: 12}), ((0xA3, 1), {0xA1: 94}), ((0xA4, 1), {0xA1: 83}), ((0xA5, 1), {0xA1: 86}), ((0xA6, 1), {0xA1: 24, 0xC1: 24, 0xE0: 12, 0xEE: 5, 0xF4: 2}), ((0xA7, 1), {0xA1: 33, 0xD1: 33}), ((0xA8, 1), {0xA1: 27, 0xBD: 2, 0xC0: 1, 0xC5: 37}), ((0xA9, 1), {0xA4: 76})])
('gbk', 'gb_lvl_2', 6763, '==', 6763, [((0xB0, 39), {0xA1: 94}), ((0xD7, 1), {0xA1: 89}), ((0xD8, 32), {0xA1: 94})])
('gbk', 'gb_lvl_3', 6080, '==', 6080, [((0x81, 32), {0x40: 63, 0x80: 127})])
('gbk', 'gb_lvl_4', 8160, '>', 8080, [((0xAA, 84), {0x40: 63, 0x80: 33}), ((0xFE, 1), {0x40: 16})])
('gbk', 'gb_lvl_5', 166, '>', 153, [((0xA8, 1), {0x40: 63, 0x80: 22}), ((0xA9, 1), {0x40: 24, 0x59: 2, 0x5C: 1, 0x60: 31, 0x80: 9, 0x96: 1})])
----------------------
======================
('gb18030', [((129, 126), {64: 63, 128: 127})])
++++++++++++++++++++++
('gb18030', 'gb_lvl_1', 718, '<', 846, [((0xA1, 9), {0xA1: 94})])
('gb18030', 'gb_lvl_2', 6763, '<', 6768, [((0xB0, 72), {0xA1: 94})])
('gb18030', 'gb_lvl_3', 6080, '==', 6080, [((0x81, 32), {0x40: 63, 0x80: 127})])
('gb18030', 'gb_lvl_4', 8160, '==', 8160, [((0xAA, 85), {0x40: 63, 0x80: 33})])
('gb18030', 'gb_lvl_5', 166, '<', 192, [((0xA8, 2), {0x40: 63, 0x80: 33})])
----------------------


#old-output:
==>>:
    有的『>』有的『<』，到底是啥毛病？
    @bug:missing_max_value_of_fst_byte

xxx:======================
xxx:('gb2312', [((161, 1), {161: 94}), ((162, 1), {177: 50, 229: 10, 241: 12}), ((163, 1), {161: 94}), ((164, 1), {161: 83}), ((165, 1), {161: 86}), ((166, 1), {161: 24, 193: 24}), ((167, 1), {161: 33, 209: 33}), ((168, 1), {161: 26, 197: 37}), ((169, 1), {164: 76}), ((176, 39), {161: 94}), ((215, 1), {161: 89}), ((216, 31), {161: 94})])
xxx:++++++++++++++++++++++
xxx:('gb2312', 'gb_lvl_1', 682, '==', 682, [((0xA1, 1), {0xA1: 94}), ((0xA2, 1), {0xB1: 50, 0xE5: 10, 0xF1: 12}), ((0xA3, 1), {0xA1: 94}), ((0xA4, 1), {0xA1: 83}), ((0xA5, 1), {0xA1: 86}), ((0xA6, 1), {0xA1: 24, 0xC1: 24}), ((0xA7, 1), {0xA1: 33, 0xD1: 33}), ((0xA8, 1), {0xA1: 26, 0xC5: 37}), ((0xA9, 1), {0xA4: 76})])
xxx:('gb2312', 'gb_lvl_2', 6763, '>', 6669, [((0xB0, 39), {0xA1: 94}), ((0xD7, 1), {0xA1: 89}), ((0xD8, 31), {0xA1: 94})])
xxx:('gb2312', 'gb_lvl_3', 0, '==', 0, [])
xxx:('gb2312', 'gb_lvl_4', 0, '==', 0, [])
xxx:('gb2312', 'gb_lvl_5', 0, '==', 0, [])
xxx:----------------------
xxx:======================
xxx:('gbk', [((129, 32), {64: 63, 128: 127}), ((161, 1), {161: 94}), ((162, 1), {161: 10, 177: 50, 229: 10, 241: 12}), ((163, 1), {161: 94}), ((164, 1), {161: 83}), ((165, 1), {161: 86}), ((166, 1), {161: 24, 193: 24, 224: 12, 238: 5, 244: 2}), ((167, 1), {161: 33, 209: 33}), ((168, 1), {64: 63, 128: 22, 161: 27, 189: 2, 192: 1, 197: 37}), ((169, 1), {64: 24, 89: 2, 92: 1, 96: 31, 128: 9, 150: 1, 164: 76}), ((170, 6), {64: 63, 128: 33}), ((176, 39), {64: 63, 128: 127}), ((215, 1), {64: 63, 128: 122}), ((216, 32), {64: 63, 128: 127}), ((248, 6), {64: 63, 128: 33})])
xxx:++++++++++++++++++++++
xxx:('gbk', 'gb_lvl_1', 717, '>', 715, [((0xA1, 1), {0xA1: 94}), ((0xA2, 1), {0xA1: 10, 0xB1: 50, 0xE5: 10, 0xF1: 12}), ((0xA3, 1), {0xA1: 94}), ((0xA4, 1), {0xA1: 83}), ((0xA5, 1), {0xA1: 86}), ((0xA6, 1), {0xA1: 24, 0xC1: 24, 0xE0: 12, 0xEE: 5, 0xF4: 2}), ((0xA7, 1), {0xA1: 33, 0xD1: 33}), ((0xA8, 1), {0xA1: 27, 0xBD: 2, 0xC0: 1, 0xC5: 37}), ((0xA9, 1), {0xA4: 76})])
xxx:('gbk', 'gb_lvl_2', 6763, '==', 6763, [((0xB0, 39), {0xA1: 94}), ((0xD7, 1), {0xA1: 89}), ((0xD8, 32), {0xA1: 94})])
xxx:('gbk', 'gb_lvl_3', 6080, '==', 6080, [((0x81, 32), {0x40: 63, 0x80: 127})])
xxx:('gbk', 'gb_lvl_4', 8160, '>', 8064, [((0xAA, 84), {0x40: 63, 0x80: 33})])
xxx:('gbk', 'gb_lvl_5', 166, '>', 153, [((0xA8, 1), {0x40: 63, 0x80: 22}), ((0xA9, 1), {0x40: 24, 0x59: 2, 0x5C: 1, 0x60: 31, 0x80: 9, 0x96: 1})])
xxx:----------------------
xxx:======================
xxx:('gb18030', [((129, 125), {64: 63, 128: 127})])
xxx:++++++++++++++++++++++
xxx:('gb18030', 'gb_lvl_1', 718, '<', 846, [((0xA1, 9), {0xA1: 94})])
xxx:('gb18030', 'gb_lvl_2', 6763, '<', 6768, [((0xB0, 72), {0xA1: 94})])
xxx:('gb18030', 'gb_lvl_3', 6080, '==', 6080, [((0x81, 32), {0x40: 63, 0x80: 127})])
xxx:('gb18030', 'gb_lvl_4', 8160, '>', 8064, [((0xAA, 84), {0x40: 63, 0x80: 33})])
xxx:('gb18030', 'gb_lvl_5', 166, '<', 192, [((0xA8, 2), {0x40: 63, 0x80: 33})])
xxx:----------------------


    #]]]'''#'''

######################
######################
######################
def _exclude_ea_gc_prefixes_(ea_gc_prefixes4exclude4return, ea_gc_ls, /):
    'Iter prefix -> ea_gc_ls -> ea_gc_ls/(sorted [(f"{ea}.{gc}:", (ea,gc))])'
    # ea_gc_ls :: sorted [(f'{ea}.{gc}:', (ea,gc))]
    ea_gc_ls = [*ea_gc_ls]

    from seed.seq_tools.bisearch import bisearch
    from seed.tiny_.funcs import fst

    ea_gc_prefixes4exclude4return = sorted({*ea_gc_prefixes4exclude4return})

    i0 = 0
    for prefix in ea_gc_prefixes4exclude4return:
        (i0, _) = bisearch(prefix, ea_gc_ls, i0, key=fst)
        for i in range(i0, len(ea_gc_ls)):
            if not fst(ea_gc_ls[i]).startswith(prefix):
                break
            ea_gc_ls[i] = None
            i0 = i+1
    ea_gc_ls = [m for m in ea_gc_ls if not m is None]
    return ea_gc_ls

def _findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6(*, may_ea_gc_prefixes4include4return=None, ea_gc_prefixes4exclude4return=(), to_show_all=True):
    '-> (sz, cs, hx2sz8rngs)'
    #xxx:'-> (sz, cs, rngs)'
    from seed.data_funcs.rngs import make_Ranges, IRanges, sorted_ints_to_iter_nontouch_ranges
    import unicodedata as U


    d = clone_result_data4gb2312_gbk_gb18030()
    gbk = d['gbk']
        #hxsz8rng_hx2sz8rngs_pairs
    gbk = mk_unicode_code_rngs5hxsz8rng_hx2sz8rngs_pairs(gbk, encoding='gbk')
        # NonTouchRanges<cp>
    assert 0xFA18 in gbk
    一龥 = make_Ranges([(0x4E00, 0x9FA6)])
    ascii = make_Ranges([(0, 0x80)])
    extra_rngs4gbk = (gbk - ascii - 一龥)
    assert 0xFA18 in extra_rngs4gbk

    if to_show_all:
        print('='*22)
        print('total{gbk-ascii-一龥} ==', extra_rngs4gbk.len_ints())

    if to_show_all:
        extra_hXhLs4gbk = extra_rngs4gbk.to_hexXhexszpair_list()
        from seed.helper.stable_repr import stable_repr__expand_top_layer, stable_repr_print__expand_top_layer

        print('='*22)
        print(stable_repr__expand_top_layer(extra_hXhLs4gbk))
        assert extra_rngs4gbk == IRanges.from_hexXhexszpair_list(extra_hXhLs4gbk)
        extra_rngs4gbk = IRanges.from_hexXhexszpair_list(extra_hXhLs4gbk)

    if to_show_all:
        print('='*22)
        for i,j in extra_rngs4gbk.ranges:
            print(repr(s:=''.join(ch for ch in map(chr, range(i,j)))), '#', len(s))




    if 1:
        ea_gc2cp_ls = {}
        for i,j in extra_rngs4gbk.ranges:
          for cp in range(i,j):
            ch = chr(cp)
            ea = U.east_asian_width(ch)
            gc = U.category(ch)
            ea_gc = ea, gc
            ea_gc2cp_ls.setdefault(ea_gc, []).append(cp)

        ea_gc2chars = {ea_gc:''.join(map(chr, cp_ls)) for ea_gc, cp_ls in ea_gc2cp_ls.items()}

    if to_show_all:
        print('='*22)
        for (ea,gc), chars in sorted(ea_gc2chars.items()):
            sz = len(chars)
            print(f'{ea}.{gc}:{sz}:{chars}')
    if to_show_all:
        print('='*22)


    ea_gc_ls = sorted((f'{ea}.{gc}:', (ea,gc)) for (ea,gc) in ea_gc2chars.keys())
    # ea_gc_ls :: sorted [(f'{ea}.{gc}:', (ea,gc))]
    if not may_ea_gc_prefixes4include4return is None:
        ea_gc_prefixes4include4return = may_ea_gc_prefixes4include4return
        _ea_gc_ls4del = _exclude_ea_gc_prefixes_(ea_gc_prefixes4include4return, ea_gc_ls)
        _ea_gc_ls8new = sorted({*ea_gc_ls} -{*_ea_gc_ls4del})
        if 0b000:
            #fixed:bug:_exclude_ea_gc_prefixes_:modify ea_gc_ls inplace
            print(len(ea_gc_ls))
            print(len(_ea_gc_ls4del))
            print(len(_ea_gc_ls8new))
        if 0b000:
            print(ea_gc_ls)
            print(_ea_gc_ls4del)
            print(_ea_gc_ls8new)
        ea_gc_ls = _ea_gc_ls8new
        #
    ea_gc_ls = _exclude_ea_gc_prefixes_(ea_gc_prefixes4exclude4return, ea_gc_ls)

    cs = []
    for (s, ea_gc) in ea_gc_ls:
        cs.extend(ea_gc2chars[ea_gc])
    cs.sort()
    cs = ''.join(cs)
    rngs = sorted_ints_to_iter_nontouch_ranges(map(ord, cs))
    #rngs = tuple(rngs)
    rngs = make_Ranges(rngs)
    hx2sz8rngs = rngs.to_hex2sz()
    sz = len(cs)
    '-> (sz, cs, hx2sz8rngs)'
    return (sz, cs, hx2sz8rngs)
    '-> (sz, cs, rngs)'
    return (sz, cs, rngs)

    r'''[[[
>>> sum([1,1,3,15,3,4,3,7,1,5,2,19,21,19,1,2,4])
111

17
<<==:
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6 -to_show_all --ea_gc_prefixes4exclude4return="'A. F.Ll: F.Lu: F.Nd: F.Zs: W.Nl: W.No: W.Lm: W.Lo: W.So:'.split()"
(111, '、。〃〈〉《》「」『』【】〔〕〖〗〝〞゛゜︰︱ ︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦﹨﹩﹪﹫！＂＃＄％＆＇（）＊＋，－．／：；＜＝＞？＠［＼］＾＿｀｛｜｝～￠￡￢￣￤￥', {0x3001: 3, 0x3008: 10, 0x3014: 4, 0x301D: 2, 0x309B: 2, 0xFE30: 2, 0xFE33: 18, 0xFE49: 10, 0xFE54: 4, 0xFE59: 14, 0xFE68: 4, 0xFF01: 15, 0xFF1A: 7, 0xFF3B: 6, 0xFF5B: 4, 0xFFE0: 6})

F.Pc:1:＿
F.Pd:1:－
F.Pe:3:）］｝
F.Po:15:！＂＃％＆＇＊，．／：；？＠＼
F.Ps:3:（［｛
F.Sc:4:＄￠￡￥
F.Sk:3:＾｀￣
F.Sm:7:＋＜＝＞｜～￢
F.So:1:￤
W.Pc:5:︳︴﹍﹎﹏
W.Pd:2:︱﹣
W.Pe:19:〉》」』】〕〗〞︶︸︺︼︾﹀﹂﹄﹚﹜﹞
W.Po:21:、。〃︰﹉﹊﹋﹌﹐﹑﹒﹔﹕﹖﹗﹟﹠﹡﹨﹪﹫
W.Ps:19:〈《「『【〔〖〝︵︷︹︻︽︿﹁﹃﹙﹛﹝
W.Sc:1:﹩
W.Sk:2:゛゜
W.Sm:4:﹢﹤﹥﹦

    #]]]'''#'''
    r'''[[[
    +to_show_all
py_adhoc_call   nn_ns.CJK.iter_gbk_chars   @_findout_gbk_fullwidth_chars__excludes_ge4E00_lt9FA6 +to_show_all
    ==>>:
======================
total{gbk-ascii-一龥} == 889
======================
[0xA4
,(0xA7, 2)
,(0xB0, 2)
,0xB7
,0xD7
,(0xE0, 2)
,(0xE8, 3)
,(0xEC, 2)
,(0xF2, 2)
,0xF7
,(0xF9, 2)
,0xFC
,0x101
,0x113
,0x11B
,0x12B
,0x144
,0x148
,0x14D
,0x16B
,0x1CE
,0x1D0
,0x1D2
,0x1D4
,0x1D6
,0x1D8
,0x1DA
,0x1DC
,0x251
,0x261
,0x2C7
,(0x2C9, 3)
,0x2D9
,(0x391, 17)
,(0x3A3, 7)
,(0x3B1, 17)
,(0x3C3, 7)
,0x401
,(0x410, 64)
,0x451
,0x2010
,(0x2013, 4)
,(0x2018, 2)
,(0x201C, 2)
,(0x2025, 2)
,0x2030
,(0x2032, 2)
,0x2035
,0x203B
,0x2103
,0x2105
,0x2109
,0x2116
,0x2121
,(0x2160, 12)
,(0x2170, 10)
,(0x2190, 4)
,(0x2196, 4)
,0x2208
,0x220F
,0x2211
,0x2215
,0x221A
,(0x221D, 4)
,0x2223
,0x2225
,(0x2227, 5)
,0x222E
,(0x2234, 4)
,0x223D
,0x2248
,0x224C
,0x2252
,(0x2260, 2)
,(0x2264, 4)
,(0x226E, 2)
,0x2295
,0x2299
,0x22A5
,0x22BF
,0x2312
,(0x2460, 10)
,(0x2474, 40)
,(0x2500, 76)
,(0x2550, 36)
,(0x2581, 15)
,(0x2593, 3)
,(0x25A0, 2)
,(0x25B2, 2)
,(0x25BC, 2)
,(0x25C6, 2)
,0x25CB
,(0x25CE, 2)
,(0x25E2, 4)
,(0x2605, 2)
,0x2609
,0x2640
,0x2642
,(0x3000, 4)
,(0x3005, 19)
,(0x301D, 2)
,(0x3021, 9)
,(0x3041, 83)
,(0x309B, 4)
,(0x30A1, 86)
,(0x30FC, 3)
,(0x3105, 37)
,(0x3220, 10)
,0x3231
,0x32A3
,(0x338E, 2)
,(0x339C, 3)
,0x33A1
,0x33C4
,0x33CE
,(0x33D1, 2)
,0x33D5
,0xF92C
,0xF979
,0xF995
,0xF9E7
,0xF9F1
,(0xFA0C, 4)
,0xFA11
,(0xFA13, 2)
,0xFA18
,(0xFA1F, 3)
,(0xFA23, 2)
,(0xFA27, 3)
,(0xFE30, 2)
,(0xFE33, 18)
,(0xFE49, 10)
,(0xFE54, 4)
,(0xFE59, 14)
,(0xFE68, 4)
,(0xFF01, 94)
,(0xFFE0, 6)
]
======================
'¤' # 1
'§¨' # 2
'°±' # 2
'·' # 1
'×' # 1
'àá' # 2
'èéê' # 3
'ìí' # 2
'òó' # 2
'÷' # 1
'ùú' # 2
'ü' # 1
'ā' # 1
'ē' # 1
'ě' # 1
'ī' # 1
'ń' # 1
'ň' # 1
'ō' # 1
'ū' # 1
'ǎ' # 1
'ǐ' # 1
'ǒ' # 1
'ǔ' # 1
'ǖ' # 1
'ǘ' # 1
'ǚ' # 1
'ǜ' # 1
'ɑ' # 1
'ɡ' # 1
'ˇ' # 1
'ˉˊˋ' # 3
'˙' # 1
'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ' # 17
'ΣΤΥΦΧΨΩ' # 7
'αβγδεζηθικλμνξοπρ' # 17
'στυφχψω' # 7
'Ё' # 1
'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя' # 64
'ё' # 1
'‐' # 1
'–—―‖' # 4
'‘’' # 2
'“”' # 2
'‥…' # 2
'‰' # 1
'′″' # 2
'‵' # 1
'※' # 1
'℃' # 1
'℅' # 1
'℉' # 1
'№' # 1
'℡' # 1
'ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ' # 12
'ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ' # 10
'←↑→↓' # 4
'↖↗↘↙' # 4
'∈' # 1
'∏' # 1
'∑' # 1
'∕' # 1
'√' # 1
'∝∞∟∠' # 4
'∣' # 1
'∥' # 1
'∧∨∩∪∫' # 5
'∮' # 1
'∴∵∶∷' # 4
'∽' # 1
'≈' # 1
'≌' # 1
'≒' # 1
'≠≡' # 2
'≤≥≦≧' # 4
'≮≯' # 2
'⊕' # 1
'⊙' # 1
'⊥' # 1
'⊿' # 1
'⌒' # 1
'①②③④⑤⑥⑦⑧⑨⑩' # 10
'⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛' # 40
'─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋' # 76
'═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳' # 36
'▁▂▃▄▅▆▇█▉▊▋▌▍▎▏' # 15
'▓▔▕' # 3
'■□' # 2
'▲△' # 2
'▼▽' # 2
'◆◇' # 2
'○' # 1
'◎●' # 2
'◢◣◤◥' # 4
'★☆' # 2
'☉' # 1
'♀' # 1
'♂' # 1
'\u3000、。〃' # 4
'々〆〇〈〉《》「」『』【】〒〓〔〕〖〗' # 19
'〝〞' # 2
'〡〢〣〤〥〦〧〨〩' # 9
'ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん' # 83
'゛゜ゝゞ' # 4
'ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ' # 86
'ーヽヾ' # 3
'ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ' # 37
'㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩' # 10
'㈱' # 1
'㊣' # 1
'㎎㎏' # 2
'㎜㎝㎞' # 3
'㎡' # 1
'㏄' # 1
'㏎' # 1
'㏑㏒' # 2
'㏕' # 1
'郎' # 1
'凉' # 1
'秊' # 1
'裏' # 1
'隣' # 1
'兀嗀﨎﨏' # 4
'﨑' # 1
'﨓﨔' # 2
'礼' # 1
'﨟蘒﨡' # 3
'﨣﨤' # 2
'﨧﨨﨩' # 3
'︰︱' # 2
'︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄' # 18
'﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒' # 10
'﹔﹕﹖﹗' # 4
'﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦' # 14
'﹨﹩﹪﹫' # 4
'！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～' # 94
'￠￡￢￣￤￥' # 6
======================
A.Ll:87:àáèéêìíòóùúüāēěīńňōūǎǐǒǔǖǘǚǜɑɡαβγδεζηθικλμνξοπρστυφχψωабвгдежзийклмнопрстуфхцчшщъыьэюяё
A.Lm:4:ˇˉˊˋ
A.Lu:57:ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩЁАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ
A.Nl:22:ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ
A.No:50:①②③④⑤⑥⑦⑧⑨⑩⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛
A.Pd:4:‐–—―
A.Pf:2:’”
A.Pi:2:‘“
A.Po:10:§·‖‥…‰′″‵※
A.Sc:1:¤
A.Sk:2:¨˙
A.Sm:44:±×÷←↑→↓∈∏∑∕√∝∞∟∠∣∥∧∨∩∪∫∮∴∵∶∷∽≈≌≒≠≡≤≥≦≧≮≯⊕⊙⊥⊿
A.So:161:°℃℅℉№℡↖↗↘↙⌒─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▓▔▕■□▲△▼▽◆◇○◎●◢◣◤◥★☆☉♀♂
F.Ll:26:ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ
F.Lu:26:ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ
F.Nd:10:０１２３４５６７８９
F.Pc:1:＿
F.Pd:1:－
F.Pe:3:）］｝
F.Po:15:！＂＃％＆＇＊，．／：；？＠＼
F.Ps:3:（［｛
F.Sc:4:＄￠￡￥
F.Sk:3:＾｀￣
F.Sm:7:＋＜＝＞｜～￢
F.So:1:￤
F.Zs:1:　
W.Lm:6:々ゝゞーヽヾ
W.Lo:228:〆ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ郎凉秊裏隣兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩
W.Nl:10:〇〡〢〣〤〥〦〧〨〩
W.No:10:㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩
W.Pc:5:︳︴﹍﹎﹏
W.Pd:2:︱﹣
W.Pe:19:〉》」』】〕〗〞︶︸︺︼︾﹀﹂﹄﹚﹜﹞
W.Po:21:、。〃︰﹉﹊﹋﹌﹐﹑﹒﹔﹕﹖﹗﹟﹠﹡﹨﹪﹫
W.Ps:19:〈《「『【〔〖〝︵︷︹︻︽︿﹁﹃﹙﹛﹝
W.Sc:1:﹩
W.Sk:2:゛゜
W.Sm:4:﹢﹤﹥﹦
W.So:15:〒〓㈱㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕
======================
]]]'''#'''


__all__
from nn_ns.CJK.iter_gbk_chars import *



__all__ = '''
    more_refined_sm2ym2num2good_hanzi_str

    more_refine_sm2ym2num2good_hanzi_str
    '''.split()


from .chars_3980 import chars_3980
from .refined_sm2ym2num2good_hanzi_str import refined_sm2ym2num2good_hanzi_str


def dict_value_transform(d, old_value2new_value, *, is_good_new_value=None):
    'Map k v -> (v->u) -> (u->Bool) -> Map k u'
    if is_good_new_value is None:
        is_good_new_value = bool
    new_d = {}
    for k, v in d.items():
        v = old_value2new_value(v)
        if is_good_new_value(v):
            new_d[k] = v
    return new_d

class Refine:
    def __init__(self, chars):
        self.char_set = set(chars)
    def old_value2new_value(self, v):
        if type(v) is str:
            return ''.join(sorted(set(v) & self.char_set))
        else:
            #v is mapping
            d = v
            return self.refine(d)
    def refine(self, d):
        return dict_value_transform(d, self.old_value2new_value)


def more_refine_sm2ym2num2good_hanzi_str(
    refined_sm2ym2num2good_hanzi_str, chars
    ):
    if chars is None:
        chars = chars_3980
    (more_refined_sm2ym2num2good_hanzi_str
    ) = Refine(chars).refine(refined_sm2ym2num2good_hanzi_str)
    return more_refined_sm2ym2num2good_hanzi_str

(more_refined_sm2ym2num2good_hanzi_str
) = more_refine_sm2ym2num2good_hanzi_str(
    refined_sm2ym2num2good_hanzi_str, chars_3980)

def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint
    from pathlib import PurePath as Path
    this_file = Path(__file__)
    this_folder = this_file.parent
    this_file_name = this_file.name

    parser = argparse.ArgumentParser(
        description=f'more refine refined_sm2ym2num2good_hanzi_str'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'
    var_name = 'more_refined_sm2ym2num2good_hanzi_str'
    sm2ym_num_graph = globals()[var_name]

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / f'{var_name}.py'
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{var_name} generated by {this_file_name}', file=fout);
        print(f'{var_name} = \\', file=fout);
        pprint(more_refined_sm2ym2num2good_hanzi_str, stream=fout)



if __name__ == '__main__':
    main()




__all__ = '''
    simple_decomposed_chars3980

    iter_simple_decomp_chars
    make_simple_decomposed_chars3980
    '''.split()

from ..CJK_data.chars_3980 import chars_3980
from .cjk_decomp_0_4_0.read_a_d_only import default_iter_read_a_d
from pathlib import PurePath as Path
this_file = Path(__file__)
this_folder = this_file.parent
this_file_name = this_file.name
class Global:
    ifname = 'simple_decomposed_chars3980.txt'
    ipath = this_folder / ifname



def iter_simple_decomp_chars(chars):
    # -> Iter (hanzi, (case, hanzi_or_num_eithers))
    # case = 'a'|'d'
    #
    char_set = set(chars)
    for hanzi_or_num, (case, hanzi_or_num_eithers) in default_iter_read_a_d():
        if hanzi_or_num in char_set:
            hanzi = hanzi_or_num
            yield hanzi, (case, hanzi_or_num_eithers)

def make_simple_decomposed_chars3980():
    it = iter_simple_decomp_chars(chars_3980)
    return dict(it)

simple_decomposed_chars3980 = make_simple_decomposed_chars3980()


def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint

    parser = argparse.ArgumentParser(
        description=f'make simple_decomposed_chars3980 from chars_3980.py & cjk_decomp_0_4_0'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'
    var_name = 'simple_decomposed_chars3980'
    simple_decomposed_chars3980 = globals()[var_name]

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / f'{var_name}.py'
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{var_name} generated by {this_file_name}', file=fout);
        print(f'{var_name} = \\', file=fout);
        pprint(simple_decomposed_chars3980, stream=fout)



if __name__ == '__main__':
    main()


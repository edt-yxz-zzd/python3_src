
__all__ = '''
    edge2hanzis
    doublesize2max_clique_srcs_dsts_pairs

    edges_to_doublesize2max_clique_srcs_dsts_pairs
    make_a_d_bipartite_graph
    '''.split()

from .simple_decomposed_chars3980 import simple_decomposed_chars3980
from pathlib import PurePath as Path
this_file = Path(__file__)
this_folder = this_file.parent
this_file_name = this_file.name

def make_a_d_bipartite_graph(simple_decomposed_chars):
    '-> edge2hanzis :: {((0,(hanzi|num)),(1,(hanzi|num))) : [hanzi]}'
    edge2hanzis = {}
    for hanzi, (case, components) in simple_decomposed_chars.items():
        if case in ('a', 'd') and len(components) == 2:
            c0, c1 = components
            vtx0 = (0,c0)
            vtx1 = (1,c1)
            edge = vtx0, vtx1
            hanzis = edge2hanzis.setdefault(edge, [])
            hanzis.append((case, hanzi))
    return edge2hanzis

def pairs_to_src2dsts(pairs):
    #->src2dsts
    src2dsts = {}
    for src, dst in pairs:
        dsts = src2dsts.setdefault(src, [])
        dsts.append(dst)
    return src2dsts


#############################################################
from ..CJK_pinyin.find_cliques__sm2ym_num_graph import \
    iter_find_cliques__sm2ym_num_graph
from ..CJK_pinyin.make_max_cliques__sm2ym_num_graph import \
    make_max_cliques__sm2ym_num_graph

def edges_to_doublesize2max_clique_srcs_dsts_pairs(edges):
    # -> doublesize2max_clique_srcs_dsts_pairs
    src2dsts = pairs_to_src2dsts(edges)
    sm2ym_num_graph__for_good_hanzis = src2dsts
    ###################################################
    (iter_sms_yms_pairs__sm2ym_num_graph
    ) = iter_find_cliques__sm2ym_num_graph(
            sm2ym_num_graph__for_good_hanzis
            ,sm_remove_h=False#sm_remove_h_1
            ,ym_remove_g=False#ym_remove_g_1
            )
    (max_cliques__sm2ym_num_graph
    ) = make_max_cliques__sm2ym_num_graph(iter_sms_yms_pairs__sm2ym_num_graph)
    ###################################################
    doublesize2max_clique_srcs_dsts_pairs = max_cliques__sm2ym_num_graph
    return doublesize2max_clique_srcs_dsts_pairs


#############################################################
edge2hanzis = make_a_d_bipartite_graph(simple_decomposed_chars3980)
(doublesize2max_clique_srcs_dsts_pairs
) = edges_to_doublesize2max_clique_srcs_dsts_pairs(edge2hanzis)

def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint

    parser = argparse.ArgumentParser(
        description=f'make max_cliques from simple_decomposed_chars3980'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'
    var_name = 'doublesize2max_clique_srcs_dsts_pairs'
    doublesize2max_clique_srcs_dsts_pairs = globals()[var_name]

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / f'{var_name}.py'
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{var_name} generated by {this_file_name}', file=fout);
        print(f'{var_name} = \\', file=fout);
        pprint(doublesize2max_clique_srcs_dsts_pairs, stream=fout)



if __name__ == '__main__':
    main()


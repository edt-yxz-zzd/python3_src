
__all__ = '''
    max_cliques__sm2ym_num_graph

    read_cliques__sm2ym_num_graph
    make_max_cliques__sm2ym_num_graph
    '''.split()

from pathlib import PurePath as Path
this_file = Path(__file__)
this_folder = this_file.parent
this_file_name = this_file.name
class Global:
    ifname = 'all_cliques__sm2ym_num_graph.txt'
    ipath = this_folder / ifname

def __parse_line(line):
    length, ls = eval(line)
    assert length == len(ls)
    return ls
def read_cliques__sm2ym_num_graph(ifile):
    'ifile = all_cliques__sm2ym_num_graph.txt'
    txt = ifile.read()
    sms_yms_pairs = []
    for double_lines in txt.split('====='):
        double_lines = double_lines.strip()
        if not double_lines: continue
        sm_line, ym_line = double_lines.split('\n')
        sm_vertices = __parse_line(sm_line)
        ym_vertices = __parse_line(ym_line)
        sms_yms_pairs.append((sm_vertices, ym_vertices))
    return sms_yms_pairs

def make_max_cliques__sm2ym_num_graph(sms_yms_pairs):
    def before(lhs_double_sizes, rhs_double_sizes):
        l1, l2 = lhs_double_sizes
        r1, r2 = rhs_double_sizes
        return (l1 < r1 and l2 <= r2) or (l1 <= r1 and l2 < r2)

    max_double_sizes2sms_yms_pairs = {}
    for new_pair in sms_yms_pairs:
        sm_vertices, ym_vertices = new_pair
        new_sizes = len(sm_vertices), len(ym_vertices)
        old_sizess_to_dels = []
        for old_sizes in max_double_sizes2sms_yms_pairs:
            if before(old_sizes, new_sizes):
                old_sizess_to_dels.append(old_sizes)
            elif new_sizes == old_sizes:
                max_double_sizes2sms_yms_pairs[old_sizes].append(new_pair)
                assert not old_sizess_to_dels
                break
            elif before(new_sizes, old_sizes):
                assert not old_sizess_to_dels
                break
        else:
            for old_sizes in old_sizess_to_dels:
                del max_double_sizes2sms_yms_pairs[old_sizes]
            max_double_sizes2sms_yms_pairs[new_sizes] = [new_pair]

    for pairs in max_double_sizes2sms_yms_pairs.values():
        pairs.sort()
    return max_double_sizes2sms_yms_pairs

def __make_max_cliques__sm2ym_num_graph():
    with open(Global.ipath, encoding='utf8') as fin:
        sms_yms_pairs = read_cliques__sm2ym_num_graph(fin)
    return make_max_cliques__sm2ym_num_graph(sms_yms_pairs)

max_cliques__sm2ym_num_graph = __make_max_cliques__sm2ym_num_graph()


def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint

    parser = argparse.ArgumentParser(
        description=f'make max_cliques__sm2ym_num_graph from all_cliques__sm2ym_num_graph.txt'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    output_encoding = args.output_encoding
    omode = 'wt' if args.force else 'xt'
    var_name = 'max_cliques__sm2ym_num_graph'
    max_cliques__sm2ym_num_graph = globals()[var_name]

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / f'{var_name}.py'
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#{var_name} generated by {this_file_name}', file=fout);
        print(f'{var_name} = \\', file=fout);
        pprint(max_cliques__sm2ym_num_graph, stream=fout)



if __name__ == '__main__':
    main()


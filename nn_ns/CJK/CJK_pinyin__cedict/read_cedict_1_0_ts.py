

import re
from collections import defaultdict
#from seed.io.savefile.SaveFile import create_or_extend_SaveFile__ObjectPerLine
from ..CJK_data.normal_pinyin_prime2full_pinyin_prime_ym_cls_ex_pair import (
    normal_pinyin_prime2full_pinyin_prime_ym_cls_ex_pair
    )
from ..CJK_common.normal_pinyin_prime2full_pinyin_prime import (
    normal_pinyin2full_pinyin_pair
    ,split_normal_pinyin
    )
from seed.tiny import print_err

class Global:
    kwargs = {'hanzi_only':True, 'pinyin_only':True, 'generator':__file__}
    iencoding = 'u8'
    oencoding = 'u8'
    ipath_to_cedict_1_0_ts = r'E:\book\数据\[Chinese-English dictionary]cedict_1_0_ts.u8'
    #opath_to_hanzi2pinyins = fr'hanzi2pinyins.{oencoding}.txt'
    opath_to_hanzi2pinyins = fr'hanzi2pinyins.py'
    #######################
    zh_char_pattern = r'[^\x00-\xFF]'
    zh_char_line_start_rex = re.compile(fr'^\s*(?P<traditional>{zh_char_pattern})\s+(?P<simpilfied>{zh_char_pattern})\s+\[(?P<pinyin>[a-z]+\d)\]')

def read_cedict_1_0_ts(ifile):
    hanzi2pinyins = defaultdict(list)
    regex = Global.zh_char_line_start_rex
    for line in ifile:
        m = regex.match(line)
        if m:
            ch = m['simpilfied']
            pinyin = m['pinyin']
            try:
                (normal_pinyin_prime, _) = split_normal_pinyin(pinyin)
                normal_pinyin_prime2full_pinyin_prime_ym_cls_ex_pair[normal_pinyin_prime]
            except Exception:
                print_err(pinyin)
            else:
                hanzi2pinyins[ch].append(pinyin)
    return dict(hanzi2pinyins)


def main(args=None):
    import argparse
    from seed.io.may_open import may_open_stdout # may_open_stdin
    from pprint import pprint
    from pathlib import PurePath as Path
    this_file = Path(__file__)
    this_folder = this_file.parent
    this_file_name = this_file.name




    parser = argparse.ArgumentParser(
        description=f'read “{Global.ipath_to_cedict_1_0_ts}”'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('-i', '--input', type=str, default=None
                        , help='input file path')
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-ie', '--input_encoding', type=str
                        , default=Global.iencoding
                        , help='input file encoding')
    parser.add_argument('-oe', '--output_encoding', type=str
                        , default=Global.oencoding
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    input_encoding = args.input_encoding
    output_encoding = args.output_encoding
    omode = 'w+t' if args.force else 'x+t'

    may_ifname = args.input
    if may_ifname is None:
        ifname = this_folder / Global.ipath_to_cedict_1_0_ts
    else:
        ifname = may_ifname
    with open(ifname, 'rt', encoding=input_encoding) as ifile:
        hanzi2pinyins = read_cedict_1_0_ts(ifile)

    may_ofname = args.output
    if may_ofname is None:
        may_ofname = this_folder / Global.opath_to_hanzi2pinyins
    '''
    kwargs = Global.kwargs
    with open(opath, omode, encoding=oencoding) as ofile:
        create_or_extend_SaveFile__ObjectPerLine(ofile, hanzi2pinyins.items(), encoding=oencoding, kwargs=kwargs)
    '''
    with may_open_stdout(may_ofname, omode, encoding=output_encoding) as fout:
        print(f'#hanzi2pinyins generated by {this_file_name}', file=fout);
        print('hanzi2pinyins = \\', file=fout);
        pprint(hanzi2pinyins, stream=fout)


if __name__ == '__main__':
    main()



configuration file format
like json, but allow:
    comment
    multi-line string
    fraction # no float number

#################################################################
#################################################################
#################################################################
WholeFileText
    = IgnoreTailMultiLines0 Repr_TheMainObject IgnoreTailMultiLines0
Repr_TheMainObject
    = Repr_Object<''>
    | '>>> {}:' IgnoreTailMultiLines0 '\n'
        MultiLineRepr_DictBody<''>
    | '>>> ():' IgnoreTailMultiLines0 '\n'
        MultiLineRepr_ListBody<''>
    | '>>> []:' IgnoreTailMultiLines0 '\n'
        MultiLineRepr_ListBody<''>
    | ">>> '':" IgnoreTailMultiLines0 '\n'
        MultiLineRepr_CharStringBody<''>
    | ">>> b'':" IgnoreTailMultiLines0 '\n'
        MultiLineRepr_ByteStringBody<''>



#################################################################
#################################################################
#################################################################
@deprecated
Object = Dict | ObjectArray | ObjectTuple | CharString | ByteString | Fraction | Bool | None
NonPathObject = Dict | ObjectArray | ObjectTuple | CharString | ByteString | Integer | Bool | None
Object = NonPathObject | InlinePath
    Dict = Map CharString Object
    ObjectArray = [Object]
    Bool = False | True
    None = None

    CharString
    ByteString

    @deprecated
    ??Fraction??
    now replace Fraction by InlinePath and Integer:
        * -> Integer
        * -> InlinePath
            InlinePath = InlineNonPathObject ('/' InlineNonPathObject)+
                # must contains '/'
            InlineNonPathObject
                = InlineObject except InlinePath

repr:
    InlineRepr_Basic_Object
        = Repr_Bool
        | Repr_None
        | Repr_Fraction
    Repr_Bool = "False" | "True"
    Repr_None = "None"
    Repr_Fraction = Repr_Integer (Ignores0 '/' Ignores0 Repr_NonZeroInteger)?
    Repr_Integer = Repr_Zero | Repr_NonZeroInteger
    Repr_Zero = "0" # not "-0" "0x0"...
    Repr_NonZeroInteger = regex"[+-]?" Repr_PInt # "-3" not "- 3"
    Repr_PInt
        = HexRepr_PInt
        | BinRepr_PInt
        | DecRepr_PInt
    HexRepr_PInt = regex"(?:0x[_0]*(?![_0])[_\<xdigit>]+)" # not "0X"
    BinRepr_PInt = regex"(?:0b[_0]*1[_01]*)" # not "0B"
    DecRepr_PInt = regex"(?:(?![_0])[_\<digit>]+)"

    digit = regex'[0-9]' # not include [a-f]
    xdigit = regex'[0-9A-F]' # not include [a-f]
    inline_text_byte = regex'(?:(?=[\x00-\x7F])[\x20\S])'
    inline_string_byte = regex'(?:(?![\'\"\\])\<inline_text_byte>)'
    escaped_byte_sequence = regex'(?:\\\\|\\\"|\\\'|\\n|\\r|\\t|\\x\<xdigit>{2})'
        # exclude '\0'
    inline_text_char = regex'(?:[\x20\u3000\S])'
    string_char = regex'(?:(?![\'\"\\])\<inline_text_char>)'
    escaped_char_sequence = regex'(?:\\\\|\\\"|\\\'|\\n|\\r|\\t|\\x\<xdigit>{2}|\\u&\<xdigit>{4};|\\U&\<xdigit>{4}_\<xdigit>{4};)'
        # exclude '\0'

    InlineRepr_ByteString
        = regex"r?b'(\"|\<inline_string_byte>|\<escaped_byte_sequence>)*'"
        | regex'r?b"(\'|\<inline_string_byte>|\<escaped_byte_sequence>)*"'
    InlineRepr_CharString
        = regex"r?'(\"|\<string_char>|\<escaped_char_sequence>)*'"
        | regex'r?"(\'|\<string_char>|\<escaped_char_sequence>)*"'
    InlineRepr_ObjectTuple = '(' Ignores0 (InlineRepr_Objects1 Ignores0)? ')'
    InlineRepr_ObjectArray = '[' Ignores0 (InlineRepr_Objects1 Ignores0)? ']'
    InlineRepr_Objects1 = InlineRepr_Object (Ignores0 ',' Ignores1 InlineRepr_Object)*
    InlineRepr_Dict = '{' Ignores0 (InlineRepr_DictItems1 Ignores0)? '}'
    InlineRepr_DictItems1 = InlineRepr_DictItem (Ignores0 ',' Ignores1 InlineRepr_DictItem)*
    InlineRepr_DictItem
        = InlineRepr_CharString Ignores1 ':' Ignores1 InlineRepr_Object
        | RawRepr_DictKey Ignores1 '=' Ignores1 InlineRepr_Object
    RawRepr_DictKey = regex"(?:(?:(?![\'\",:=#(){}\[\]\s])\<inline_text_char>)+)"

    InlineRepr_Object
        = InlineRepr_ByteString
        | InlineRepr_CharString
        | InlineRepr_ObjectTuple
        | InlineRepr_ObjectArray
        | InlineRepr_Dict
        | InlineRepr_Basic_Object

    ignore_char = regex' '
    tail_comment = regex"(?:# \<inline_text_char>*$)"

    # ignore single line
    Ignores0 = regex'(?:\<ignore_char>*)' = Ignores1?
    Ignores1 = regex'(?:\<ignore_char>+)'
    IgnoreTail = regex'(?:\<ignore_char>*\<tail_comment>?$)'
    IgnoreLine = regex'(?:^\<ignore_char>*\<tail_comment>?$)'
    # ignore multiple lines
    IgnoreMultiLines0 = ('\n' IgnoreLine)*
    IgnoreTailMultiLines0 = IgnoreTail IgnoreMultiLines0

    Indent = regex' {4}'
    Repr_Object<Indents>
        = InlineRepr_Object
        | MultiLineRepr_Object<Indents>

    MultiLineRepr_Dict<Indents>
        = '{}:' IgnoreTailMultiLines0 '\n'
            MultiLineRepr_DictBody<Indents+Indent>
        # no "?" at last
    MultiLineRepr_DictBody<Indents>
        = MultiLineRepr_DictItems1<Indents>
            (IgnoreTailMultiLines0 '\n' MultiLineRepr_DictItems1<Indents>)*
    MultiLineRepr_DictItems1<Indents>
        = Indents (InlineRepr_DictItem Ignores0 ',')* MultiLineRepr_DictItem<Indents>
    MultiLineRepr_DictItem<Indents>
        = InlineRepr_CharString Ignores1 ':' Ignores1 Repr_Object<Indents>
        | RawRepr_DictKey Ignores1 '=' Ignores1 Repr_Object<Indents>
    MultiLineRepr_ObjectTuple<Indents>
        = '():' IgnoreTailMultiLines0 '\n'
            MultiLineRepr_ListBody<Indents+Indent>
        # no "?" at last
    MultiLineRepr_ObjectArray<Indents>
        = '():' IgnoreTailMultiLines0 '\n'
            MultiLineRepr_ListBody<Indents+Indent>
        # no "?" at last
    MultiLineRepr_ListBody<Indents>
        = MultiLineRepr_ListItems1<Indents>
            (IgnoreTailMultiLines0 '\n' MultiLineRepr_ListItems1<Indents>)*
    MultiLineRepr_ListItems1<Indents>
        = Indents (InlineRepr_Object Ignores0 ',' Ignores1)* Repr_Object<Indents>
    MultiLineRepr_CharString<Indents>
        = "'':" IgnoreTailMultiLines0 '\n'
            MultiLineRepr_CharStringBody<Indents+Indent>
    MultiLineRepr_CharStringBody<Indents>
        #= MultiLineRepr_CharStringHeadLine<Indents>
        = MultiLineRepr_CharStringLine<Indents>
            (IgnoreMultiLines0 '\n' MultiLineRepr_CharStringLine<Indents>)*
            # not IgnoreTailMultiLines0
    Repr_IndentedEscapedCharString
        = regex"(?:([\'\"]|\<string_char>|\<escaped_char_sequence>)*$)"
        # NOTE: '$' at last
        #   so, when follow IgnoreTailMultiLines0, equivalence to IgnoreMultiLines0
    @deprecated
    MultiLineRepr_CharStringHeadLine<Indents>
        # = Indents regex'[|;] {3}\<inline_text_char>*$'
        = Indents regex'; {3}\<inline_text_char>*$'
        | Indents regex'\| {3}' Repr_IndentedEscapedCharString regex'$'
        | Indents regex'[|;]$'
    MultiLineRepr_CharStringLine<Indents>
        # = Indents regex'[|\\;,] {3}\<inline_text_char>*$'
        = Indents regex'[;,] {3}\<inline_text_char>*$'
        | Indents regex'[|\\] {3}' Repr_IndentedEscapedCharString regex'$'
        #| Indents regex'[|;]$'
        | Indents regex'[|;,\\]$'
        #
        # | \
        #   to escape, using InlineRepr_CharString format
        # ; ,
        #   raw text
        # | ;
        #   begining or newline
        # \ ,
        #   continue last line # not begining
        #
    MultiLineRepr_ByteString<Indents>
        = "b'':" IgnoreTailMultiLines0 '\n'
            MultiLineRepr_ByteStringBody<Indents+Indent>
    MultiLineRepr_ByteStringBody<Indents>
        #= MultiLineRepr_ByteStringHeadLine<Indents>
        = MultiLineRepr_ByteStringLine<Indents>
            (IgnoreMultiLines0 '\n' MultiLineRepr_ByteStringLine<Indents>)*
            # not IgnoreTailMultiLines0
    Repr_IndentedEscapedByteString
        = regex"(?:([\'\"]|\<inline_string_byte>|\<escaped_byte_sequence>)*$)"
    @deprecated
    MultiLineRepr_ByteStringHeadLine<Indents>
        = Indents regex'; {3}\<inline_text_byte>*$'
        | Indents regex'\| {3}' Repr_IndentedEscapedByteString regex'$'
        | Indents regex'[|;]$'
    MultiLineRepr_ByteStringLine<Indents>
        = Indents regex'[;,] {3}\<inline_text_char>*$'
        | Indents regex'[|\\] {3}' Repr_IndentedEscapedByteString regex'$'
        #| Indents regex'[|;]$'
        | Indents regex'[|;,\\]$'

    MultiLineRepr_Object<Indents>
        = MultiLineRepr_ByteString<Indents>
        | MultiLineRepr_CharString<Indents>
        | MultiLineRepr_ObjectTuple<Indents>
        | MultiLineRepr_ObjectArray<Indents>
        | MultiLineRepr_Dict<Indents>
        #| InlineRepr_Basic_Object
        #| InlineRepr_Object




'''
assume the list obj's type is
    List_iappendleft
    List_iappendright
the list obj is generated by Empty_iappendleft/Empty_iappendright


usage:
    see: PLY_YACC_Helper_YaccRules

    @let_be_all_staticmethod('p_')
    class PLY_YACC_Helper_YaccRules:
        '-> [(RuleName, [(RuleBody, [PythonLine])])]'
        start = 'Main'
        tokens = terminals

        inject_to = make_rule_inject_to(locals())
        @inject_to
        def p_(p):
            r'Main : Rules1'
            p[0] = list(p[1])

        @inject_to
        def p_(p):
            r'Rules1 : Rules0 Rule'
            handle_many1_iappendright(p)
        @inject_to
        def p_(p):
            r'Rules0 : Rules1 | Empty_iappendright'
            handle_many0_iappendright(p)
        @inject_to
        def p_(p):
            r'Empty_iappendright :'
            p[0] = List_iappendright()

'''

__all__ = '''
    handle_many0_iappendright
    handle_many1_iappendright
    handle_empty_iappendright
    '''.split()

from .List_iappendright import List_iappendright
from .List_iappendleft import List_iappendleft


def handle_many0_iappendright(p):
    r'>many0 : many1 | Empty_iappendright'
    p[0] = p[1]


def handle_many1_iappendright(p):
    '>many1_iappendright : many0 a'
    p[0] = p[1].iappendright(p[2])
def handle_empty_iappendright(p):
    '>Empty_iappendright : '
    p[0] = List_iappendright()


"""
def handle_many1_iappendleft(p):
    '>many1_iappendleft : a many0'
    p[0] = p[2].iappendleft(p[1])
"""

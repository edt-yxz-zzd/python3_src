
r'''
factor (2**m-1)

e ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py

from nn_ns.math_nn.factor_Mersenne_number_into_prime2exp import factor_Mersenne_number_into_prime2exp
from nn_ns.math_nn.factor_Mersenne_number_into_prime2exp import exp2bad_status__factordb_com__le3000__sz815__20220708

py -m nn_ns.math_nn.factor_Mersenne_number_into_prime2exp --path4exp2bad_status '/sdcard/0my_files/tmp/out4py/parse_html_of_integer_factor_result_at_factordb_com.py.out.exp2bad_status.txt'
view ../../python3_src/nn_ns/math_nn/factor_Mersenne_number_into_prime2exp.py.cached.txt

2**137-1 很慢
搜索:
    分解 2^137-1
    #xxx https://zh.numberempire.com/numberfactorizer.php
    32032215596496435569
    5439042183600204290159
    更好的网站:
        https://www.mersenne.ca/exponent/211
            https://www.mersenne.ca/prp.php?show=2#M211
                列出许多
        http://factordb.com/index.php?query=2%5E211-1
            搜索『2^211-1』
py_eval '2**137-1 == 32032215596496435569 * 5439042183600204290159'

    2^149-1
    86656268566282183151
    8235109336690846723986161

#'''



__all__ = '''
    factor_Mersenne_number_into_prime2exp

    exp2bad_status__factordb_com__le3000__sz815__20220708
    '''.split()

from seed.tiny import MapView
from seed.io.savefile.unbuffered_growonly_dict_in_file import tabular_cached_calc
#from nn_ns.math_nn.factor_pint_into_prime2exp__using_hints import iter_factor_hints4pow_p_e_minus1
if 0:
    #moved to EOF
    from nn_ns.math_nn.factor_pint_into_prime2exp__using_hints import factor_pint_into_prime2exp__using_hints
from seed.io.read_file_as_python_object import read_file_as_python_object

#def iter_factor_hints4pow_p_e_minus1(base, exp, /, *, hints4exp):

from pathlib import Path
class _Globals:
    curr_dir = Path(__file__).parent
    opath = Path(__file__ + '.cached.txt')
def _factor_Mersenne_number_into_prime2exp(exp, /):
    return (factor_pint_into_prime2exp__using_hints((1<<exp) -1, hints=(), _is_hardwork_layer=True))
        #stable_repr 无法处理 MapView
    return MapView(factor_pint_into_prime2exp__using_hints((1<<exp) -1, hints=(), _is_hardwork_layer=True))

_exp_to_prime2exp = tabular_cached_calc(_Globals.opath, _factor_Mersenne_number_into_prime2exp, dict(description='cached factor (2**exp -1)'), allow_create_file=True)

def factor_Mersenne_number_into_prime2exp(exp, /, *, query_only):
    'cached factor (2**exp -1)'
    #hints4whole = iter_factor_hints4pow_p_e_minus1(2, exp, hints4exp=hints4exp)
    if query_only:
        if not exp in _exp_to_prime2exp:
            return None
    return {**_exp_to_prime2exp[exp]}






from nn_ns.math_nn.factor_pint_into_prime2exp__using_hints import factor_pint_into_prime2exp__using_hints

def main(args=None, /):
    import argparse
    from seed.io.may_open import may_open_stdin, may_open_stdout
    #from seed.io.savefile.unbuffered_growonly_dict_in_file import tabular_cached_calc
    from itertools import count
    from seed.tiny import echo, print_err, mk_fprint
    from seed.helper.stable_repr import stable_repr

    parser = argparse.ArgumentParser(
        description='factor (2^m-1) and cache'
        , epilog=''
        , formatter_class=argparse.RawDescriptionHelpFormatter
        )
    parser.add_argument('--path4exp2bad_status', type=str, default=None
                        , help='path to inputfile saved exp2bad_status; skip exp with bad_status')
    parser.add_argument('-o', '--output', type=str, default=None
                        , help='output file path')
    parser.add_argument('-oe', '--oencoding', type=str
                        , default='utf8'
                        , help='output file encoding')
    parser.add_argument('-f', '--force', action='store_true'
                        , default = False
                        , help='open mode for output file')

    args = parser.parse_args(args)
    oencoding = args.oencoding
    omode = 'wt' if args.force else 'xt'

    may_path4exp2bad_status = args.path4exp2bad_status
    if not may_path4exp2bad_status is None:
        path4exp2bad_status = may_path4exp2bad_status
        exp2bad_status = read_file_as_python_object(path4exp2bad_status, encoding='u8')
        print_err(f'#number of exp with bad_status is {len(exp2bad_status)}')
            #[1..=3000] skip 815
            #[1207..=2999]
    else:
        exp2bad_status = ()

    may_ofname = args.output
    with may_open_stdout(may_ofname, omode, encoding=oencoding) as fout:
        fprint = mk_fprint(fout)
        for e in count(1):
            if e in _exp_to_prime2exp:continue
            if e in exp2bad_status:
                bad_status = exp2bad_status[e]
                print_err(f'#skip:{e}:{bad_status}')
                continue
            fprint(f'factor(2**{e}-1)...')
            prime2exp = factor_Mersenne_number_into_prime2exp(e, query_only=False)
            s = stable_repr(prime2exp)
            fprint(f'factor(2**{e}-1)=={s}')
if __name__ == "__main__":
    #bug: 出现 重复 key，原因:__main__::main vs nn_ns.math_nn.factor_Mersenne_number_into_prime2exp::main
    from nn_ns.math_nn.factor_Mersenne_number_into_prime2exp import factor_Mersenne_number_into_prime2exp
    from nn_ns.math_nn.factor_Mersenne_number_into_prime2exp import main, _exp_to_prime2exp
    main()
r'''
This indicates how the number is currently listed in the database.
C	Composite, no factors known
CF	Composite, factors known
FF	Composite, fully factored
P	Definitely prime
Prp	Probably prime
U	Unknown
Unit	Just for "1"
N	This number is not in database (and was not added due to your settings)
*	Added to database during this request
#'''


exp2bad_status__factordb_com__le3000__sz815__20220708 = (
{1207: 'CF'
,1213: 'CF'
,1217: 'CF'
,1229: 'CF'
,1231: 'CF'
,1237: 'CF'
,1243: 'CF'
,1249: 'CF'
,1255: 'CF'
,1259: 'CF'
,1265: 'CF'
,1277: 'C'
,1283: 'CF'
,1291: 'CF'
,1297: 'CF'
,1315: 'CF'
,1319: 'CF'
,1325: 'CF'
,1331: 'CF'
,1339: 'CF'
,1343: 'CF'
,1345: 'CF'
,1349: 'CF'
,1351: 'CF'
,1357: 'CF'
,1367: 'CF'
,1379: 'CF'
,1381: 'CF'
,1385: 'CF'
,1387: 'CF'
,1403: 'CF'
,1415: 'CF'
,1417: 'CF'
,1419: 'CF'
,1421: 'CF'
,1423: 'CF'
,1429: 'CF'
,1433: 'CF'
,1439: 'CF'
,1443: 'CF'
,1447: 'CF'
,1451: 'CF'
,1453: 'CF'
,1463: 'CF'
,1465: 'CF'
,1467: 'CF'
,1475: 'CF'
,1477: 'CF'
,1481: 'CF'
,1483: 'CF'
,1493: 'CF'
,1497: 'CF'
,1499: 'CF'
,1501: 'CF'
,1503: 'CF'
,1505: 'CF'
,1507: 'CF'
,1511: 'CF'
,1513: 'CF'
,1517: 'CF'
,1519: 'CF'
,1521: 'CF'
,1523: 'CF'
,1525: 'CF'
,1533: 'CF'
,1537: 'CF'
,1541: 'CF'
,1549: 'CF'
,1551: 'CF'
,1561: 'CF'
,1565: 'CF'
,1567: 'CF'
,1569: 'CF'
,1571: 'CF'
,1573: 'CF'
,1577: 'CF'
,1579: 'CF'
,1581: 'CF'
,1583: 'CF'
,1585: 'CF'
,1587: 'CF'
,1589: 'CF'
,1591: 'CF'
,1597: 'CF'
,1599: 'CF'
,1601: 'CF'
,1607: 'CF'
,1609: 'CF'
,1611: 'CF'
,1613: 'CF'
,1619: 'C'
,1621: 'CF'
,1627: 'CF'
,1629: 'CF'
,1631: 'CF'
,1633: 'CF'
,1635: 'CF'
,1639: 'CF'
,1641: 'CF'
,1643: 'CF'
,1645: 'CF'
,1647: 'CF'
,1649: 'CF'
,1651: 'CF'
,1653: 'CF'
,1655: 'CF'
,1659: 'CF'
,1661: 'CF'
,1663: 'CF'
,1665: 'CF'
,1667: 'CF'
,1669: 'CF'
,1675: 'CF'
,1677: 'CF'
,1679: 'CF'
,1685: 'CF'
,1687: 'CF'
,1689: 'CF'
,1691: 'CF'
,1695: 'CF'
,1697: 'CF'
,1699: 'CF'
,1701: 'CF'
,1703: 'CF'
,1705: 'CF'
,1707: 'CF'
,1709: 'CF'
,1711: 'CF'
,1715: 'CF'
,1717: 'CF'
,1719: 'CF'
,1721: 'CF'
,1729: 'CF'
,1731: 'CF'
,1733: 'CF'
,1735: 'CF'
,1737: 'CF'
,1739: 'CF'
,1741: 'CF'
,1743: 'CF'
,1745: 'CF'
,1747: 'CF'
,1749: 'CF'
,1751: 'CF'
,1753: 'C'
,1757: 'CF'
,1759: 'CF'
,1761: 'CF'
,1763: 'CF'
,1765: 'CF'
,1767: 'CF'
,1769: 'CF'
,1771: 'CF'
,1773: 'CF'
,1777: 'CF'
,1779: 'CF'
,1785: 'CF'
,1787: 'CF'
,1789: 'CF'
,1791: 'CF'
,1793: 'CF'
,1795: 'CF'
,1799: 'CF'
,1801: 'CF'
,1803: 'CF'
,1805: 'CF'
,1807: 'CF'
,1809: 'CF'
,1811: 'CF'
,1817: 'CF'
,1819: 'CF'
,1821: 'CF'
,1823: 'CF'
,1825: 'CF'
,1827: 'CF'
,1829: 'CF'
,1831: 'CF'
,1833: 'CF'
,1835: 'CF'
,1837: 'CF'
,1839: 'CF'
,1841: 'CF'
,1843: 'CF'
,1845: 'CF'
,1847: 'CF'
,1849: 'CF'
,1851: 'CF'
,1853: 'CF'
,1855: 'CF'
,1857: 'CF'
,1859: 'CF'
,1861: 'CF'
,1863: 'CF'
,1865: 'CF'
,1867: 'CF'
,1869: 'CF'
,1871: 'CF'
,1873: 'CF'
,1875: 'CF'
,1877: 'CF'
,1879: 'CF'
,1881: 'CF'
,1885: 'CF'
,1887: 'CF'
,1889: 'CF'
,1891: 'CF'
,1893: 'CF'
,1895: 'CF'
,1897: 'CF'
,1899: 'CF'
,1901: 'CF'
,1903: 'CF'
,1905: 'CF'
,1909: 'CF'
,1911: 'CF'
,1913: 'CF'
,1915: 'CF'
,1919: 'CF'
,1921: 'CF'
,1923: 'CF'
,1929: 'CF'
,1931: 'CF'
,1933: 'CF'
,1937: 'CF'
,1939: 'CF'
,1941: 'CF'
,1943: 'CF'
,1945: 'CF'
,1947: 'CF'
,1949: 'CF'
,1951: 'CF'
,1953: 'CF'
,1955: 'CF'
,1957: 'CF'
,1959: 'CF'
,1961: 'CF'
,1963: 'CF'
,1965: 'CF'
,1967: 'CF'
,1969: 'CF'
,1971: 'CF'
,1973: 'CF'
,1977: 'CF'
,1979: 'CF'
,1981: 'CF'
,1985: 'CF'
,1987: 'CF'
,1989: 'CF'
,1991: 'CF'
,1993: 'CF'
,1995: 'CF'
,2001: 'CF'
,2003: 'CF'
,2005: 'CF'
,2007: 'CF'
,2009: 'CF'
,2011: 'CF'
,2013: 'CF'
,2015: 'CF'
,2017: 'CF'
,2019: 'CF'
,2023: 'CF'
,2025: 'CF'
,2027: 'CF'
,2033: 'CF'
,2035: 'CF'
,2039: 'CF'
,2041: 'CF'
,2043: 'CF'
,2045: 'CF'
,2047: 'CF'
,2049: 'CF'
,2051: 'CF'
,2053: 'CF'
,2055: 'CF'
,2057: 'CF'
,2059: 'CF'
,2061: 'CF'
,2063: 'CF'
,2067: 'CF'
,2071: 'CF'
,2073: 'CF'
,2075: 'CF'
,2077: 'CF'
,2079: 'CF'
,2081: 'CF'
,2083: 'CF'
,2085: 'CF'
,2089: 'CF'
,2091: 'CF'
,2095: 'CF'
,2097: 'CF'
,2099: 'CF'
,2101: 'CF'
,2103: 'CF'
,2105: 'CF'
,2107: 'CF'
,2109: 'CF'
,2111: 'CF'
,2113: 'CF'
,2115: 'CF'
,2117: 'CF'
,2121: 'CF'
,2123: 'CF'
,2125: 'CF'
,2127: 'CF'
,2129: 'CF'
,2131: 'CF'
,2133: 'CF'
,2135: 'CF'
,2137: 'CF'
,2139: 'CF'
,2141: 'CF'
,2143: 'CF'
,2145: 'CF'
,2147: 'CF'
,2149: 'CF'
,2151: 'CF'
,2153: 'CF'
,2155: 'CF'
,2157: 'CF'
,2159: 'CF'
,2161: 'CF'
,2163: 'CF'
,2165: 'CF'
,2167: 'CF'
,2171: 'CF'
,2173: 'CF'
,2179: 'CF'
,2181: 'CF'
,2182: 'CF'
,2183: 'CF'
,2185: 'CF'
,2187: 'CF'
,2189: 'CF'
,2191: 'CF'
,2193: 'CF'
,2194: 'CF'
,2195: 'CF'
,2197: 'CF'
,2199: 'CF'
,2201: 'CF'
,2205: 'CF'
,2207: 'CF'
,2209: 'CF'
,2213: 'CF'
,2215: 'CF'
,2216: 'CF'
,2217: 'CF'
,2218: 'CF'
,2219: 'CF'
,2221: 'CF'
,2223: 'CF'
,2225: 'CF'
,2227: 'CF'
,2229: 'CF'
,2231: 'CF'
,2233: 'CF'
,2235: 'CF'
,2237: 'CF'
,2239: 'CF'
,2241: 'CF'
,2245: 'CF'
,2246: 'CF'
,2247: 'CF'
,2248: 'CF'
,2249: 'CF'
,2253: 'CF'
,2255: 'CF'
,2257: 'CF'
,2258: 'CF'
,2261: 'CF'
,2263: 'CF'
,2265: 'CF'
,2267: 'C'
,2269: 'CF'
,2272: 'CF'
,2273: 'C'
,2275: 'CF'
,2277: 'CF'
,2278: 'CF'
,2279: 'CF'
,2283: 'CF'
,2285: 'CF'
,2287: 'CF'
,2291: 'CF'
,2293: 'CF'
,2294: 'CF'
,2295: 'CF'
,2297: 'CF'
,2299: 'CF'
,2301: 'CF'
,2302: 'CF'
,2303: 'CF'
,2305: 'CF'
,2306: 'CF'
,2307: 'CF'
,2309: 'CF'
,2315: 'CF'
,2318: 'CF'
,2319: 'CF'
,2321: 'CF'
,2326: 'CF'
,2327: 'CF'
,2329: 'CF'
,2331: 'CF'
,2333: 'CF'
,2335: 'CF'
,2336: 'CF'
,2337: 'CF'
,2339: 'CF'
,2341: 'CF'
,2343: 'CF'
,2345: 'CF'
,2347: 'CF'
,2349: 'CF'
,2355: 'CF'
,2359: 'CF'
,2360: 'CF'
,2361: 'CF'
,2363: 'CF'
,2367: 'CF'
,2369: 'CF'
,2371: 'CF'
,2373: 'CF'
,2374: 'CF'
,2375: 'CF'
,2377: 'CF'
,2379: 'CF'
,2385: 'CF'
,2389: 'CF'
,2391: 'CF'
,2393: 'CF'
,2395: 'CF'
,2397: 'CF'
,2399: 'CF'
,2401: 'CF'
,2403: 'CF'
,2405: 'CF'
,2407: 'CF'
,2410: 'CF'
,2411: 'CF'
,2414: 'CF'
,2416: 'CF'
,2417: 'CF'
,2419: 'CF'
,2421: 'CF'
,2423: 'C'
,2425: 'CF'
,2426: 'CF'
,2427: 'CF'
,2429: 'CF'
,2431: 'CF'
,2432: 'CF'
,2433: 'CF'
,2434: 'CF'
,2435: 'CF'
,2437: 'CF'
,2439: 'CF'
,2443: 'CF'
,2445: 'CF'
,2446: 'CF'
,2449: 'CF'
,2451: 'CF'
,2453: 'CF'
,2455: 'CF'
,2457: 'CF'
,2458: 'CF'
,2459: 'CF'
,2461: 'CF'
,2462: 'CF'
,2463: 'CF'
,2465: 'CF'
,2467: 'CF'
,2469: 'CF'
,2471: 'CF'
,2473: 'CF'
,2474: 'CF'
,2475: 'CF'
,2477: 'CF'
,2479: 'CF'
,2480: 'CF'
,2481: 'CF'
,2482: 'CF'
,2483: 'CF'
,2485: 'CF'
,2486: 'CF'
,2487: 'CF'
,2489: 'CF'
,2491: 'CF'
,2493: 'CF'
,2495: 'CF'
,2498: 'CF'
,2501: 'CF'
,2503: 'CF'
,2505: 'CF'
,2507: 'CF'
,2509: 'CF'
,2510: 'CF'
,2511: 'CF'
,2512: 'CF'
,2513: 'CF'
,2515: 'CF'
,2517: 'CF'
,2518: 'CF'
,2519: 'CF'
,2521: 'C'
,2522: 'CF'
,2523: 'CF'
,2525: 'CF'
,2530: 'CF'
,2531: 'CF'
,2533: 'CF'
,2535: 'CF'
,2537: 'CF'
,2539: 'CF'
,2541: 'CF'
,2542: 'CF'
,2543: 'CF'
,2545: 'CF'
,2546: 'CF'
,2547: 'CF'
,2551: 'CF'
,2552: 'CF'
,2553: 'CF'
,2554: 'CF'
,2555: 'CF'
,2557: 'CF'
,2559: 'CF'
,2561: 'CF'
,2563: 'CF'
,2565: 'CF'
,2566: 'CF'
,2567: 'CF'
,2569: 'CF'
,2570: 'CF'
,2571: 'CF'
,2573: 'CF'
,2575: 'CF'
,2577: 'CF'
,2578: 'CF'
,2579: 'CF'
,2581: 'CF'
,2582: 'CF'
,2584: 'CF'
,2585: 'CF'
,2589: 'CF'
,2591: 'CF'
,2593: 'CF'
,2594: 'CF'
,2595: 'CF'
,2597: 'CF'
,2599: 'CF'
,2600: 'CF'
,2601: 'CF'
,2602: 'CF'
,2603: 'CF'
,2605: 'CF'
,2606: 'CF'
,2607: 'CF'
,2609: 'CF'
,2611: 'CF'
,2613: 'CF'
,2615: 'CF'
,2617: 'CF'
,2619: 'CF'
,2621: 'CF'
,2623: 'CF'
,2625: 'CF'
,2626: 'CF'
,2627: 'CF'
,2629: 'CF'
,2630: 'CF'
,2631: 'CF'
,2632: 'CF'
,2633: 'CF'
,2635: 'CF'
,2638: 'CF'
,2639: 'CF'
,2641: 'CF'
,2642: 'CF'
,2643: 'CF'
,2645: 'CF'
,2647: 'CF'
,2649: 'CF'
,2650: 'CF'
,2653: 'CF'
,2654: 'CF'
,2655: 'CF'
,2656: 'CF'
,2657: 'CF'
,2659: 'CF'
,2661: 'CF'
,2662: 'CF'
,2663: 'CF'
,2665: 'CF'
,2667: 'CF'
,2669: 'CF'
,2671: 'CF'
,2673: 'CF'
,2675: 'CF'
,2678: 'CF'
,2679: 'CF'
,2681: 'CF'
,2683: 'CF'
,2685: 'CF'
,2686: 'CF'
,2687: 'CF'
,2689: 'CF'
,2690: 'CF'
,2691: 'CF'
,2693: 'CF'
,2695: 'CF'
,2696: 'CF'
,2697: 'CF'
,2698: 'CF'
,2701: 'CF'
,2702: 'CF'
,2703: 'CF'
,2705: 'CF'
,2707: 'CF'
,2709: 'CF'
,2711: 'CF'
,2713: 'C'
,2714: 'CF'
,2717: 'CF'
,2719: 'C'
,2720: 'CF'
,2721: 'CF'
,2723: 'CF'
,2725: 'CF'
,2726: 'CF'
,2727: 'CF'
,2729: 'CF'
,2731: 'CF'
,2734: 'CF'
,2735: 'CF'
,2737: 'CF'
,2738: 'CF'
,2739: 'CF'
,2741: 'CF'
,2743: 'CF'
,2744: 'CF'
,2745: 'CF'
,2746: 'CF'
,2747: 'CF'
,2750: 'CF'
,2751: 'CF'
,2752: 'CF'
,2753: 'CF'
,2755: 'CF'
,2757: 'CF'
,2758: 'CF'
,2759: 'CF'
,2761: 'CF'
,2762: 'CF'
,2763: 'CF'
,2765: 'CF'
,2767: 'CF'
,2768: 'CF'
,2769: 'CF'
,2770: 'CF'
,2771: 'CF'
,2773: 'CF'
,2774: 'CF'
,2775: 'CF'
,2777: 'CF'
,2779: 'CF'
,2781: 'CF'
,2782: 'CF'
,2783: 'CF'
,2786: 'CF'
,2787: 'CF'
,2791: 'CF'
,2792: 'CF'
,2793: 'CF'
,2794: 'CF'
,2795: 'CF'
,2797: 'CF'
,2798: 'CF'
,2801: 'CF'
,2803: 'CF'
,2806: 'CF'
,2807: 'CF'
,2809: 'CF'
,2811: 'CF'
,2813: 'CF'
,2815: 'CF'
,2816: 'CF'
,2818: 'CF'
,2819: 'CF'
,2821: 'CF'
,2823: 'CF'
,2824: 'CF'
,2825: 'CF'
,2827: 'CF'
,2829: 'CF'
,2830: 'CF'
,2831: 'CF'
,2832: 'CF'
,2833: 'CF'
,2834: 'CF'
,2835: 'CF'
,2838: 'CF'
,2839: 'CF'
,2840: 'CF'
,2841: 'CF'
,2842: 'CF'
,2843: 'CF'
,2845: 'CF'
,2846: 'CF'
,2847: 'CF'
,2848: 'CF'
,2849: 'CF'
,2851: 'C'
,2853: 'CF'
,2854: 'CF'
,2855: 'CF'
,2857: 'CF'
,2858: 'CF'
,2859: 'CF'
,2861: 'CF'
,2863: 'CF'
,2864: 'CF'
,2866: 'CF'
,2867: 'CF'
,2869: 'CF'
,2870: 'CF'
,2872: 'CF'
,2875: 'CF'
,2877: 'CF'
,2878: 'CF'
,2879: 'CF'
,2881: 'CF'
,2882: 'CF'
,2883: 'CF'
,2885: 'CF'
,2886: 'CF'
,2888: 'CF'
,2889: 'CF'
,2890: 'CF'
,2891: 'CF'
,2893: 'CF'
,2894: 'CF'
,2895: 'CF'
,2896: 'CF'
,2897: 'CF'
,2899: 'CF'
,2902: 'CF'
,2903: 'CF'
,2905: 'CF'
,2906: 'CF'
,2907: 'CF'
,2911: 'CF'
,2912: 'CF'
,2913: 'CF'
,2914: 'CF'
,2915: 'CF'
,2917: 'CF'
,2919: 'CF'
,2920: 'CF'
,2921: 'CF'
,2923: 'CF'
,2925: 'CF'
,2926: 'CF'
,2930: 'CF'
,2931: 'CF'
,2933: 'CF'
,2934: 'CF'
,2935: 'CF'
,2937: 'CF'
,2938: 'CF'
,2939: 'CF'
,2941: 'CF'
,2942: 'CF'
,2943: 'CF'
,2944: 'CF'
,2945: 'CF'
,2946: 'CF'
,2947: 'CF'
,2950: 'CF'
,2951: 'CF'
,2953: 'CF'
,2954: 'CF'
,2955: 'CF'
,2957: 'CF'
,2960: 'CF'
,2962: 'CF'
,2963: 'CF'
,2965: 'CF'
,2966: 'CF'
,2967: 'CF'
,2968: 'CF'
,2969: 'CF'
,2971: 'CF'
,2973: 'CF'
,2974: 'CF'
,2975: 'CF'
,2976: 'CF'
,2977: 'CF'
,2978: 'CF'
,2979: 'CF'
,2983: 'CF'
,2985: 'CF'
,2986: 'CF'
,2987: 'CF'
,2989: 'CF'
,2990: 'CF'
,2991: 'CF'
,2993: 'CF'
,2994: 'CF'
,2995: 'CF'
,2997: 'CF'
,2998: 'CF'
,2999: 'CF'
})
assert len(exp2bad_status__factordb_com__le3000__sz815__20220708) == 815


'''
a script to eval RMQ algorithm args...
'''

from math import log, log2, ceil, log1p

def f1():
    '''
    see: RMQ .py
        to make complete_normal_block_size <= p
            <<== log2(p)**2_x <= p
            # log2(4)**(2+0) == 4 # (delta_x, p) == (0, 4)
            # p ==>> 0 < delta_x <= log<log2(p)>(p)-2
    '''


    begin = 3
    L = 100
    for p in range(begin, begin+L):
        max_delta_x = log(p, log2(p)) - 2

        print(p, max_delta_x)
    '''
3 0.38537976361576076
4 0.0
5 -0.08945644090554716
6 -0.11336346882991544
7 -0.11487154104860964
8 -0.10721073928562808
9 -0.09551055118342822
10 -0.08205074249495214
11 -0.06793412445207281
12 -0.05372193835958283
13 -0.03970643698327536
14 -0.02603872429550491
15 -0.012792904562538121
16 0.0
17 0.012333370161017765
18 0.024214373792442956
19 0.03565778879914383
20 0.04668235020234146
21 0.05730857109781917
22 0.06755744272390407
23 0.07744966761386474
24 0.08700521986990184
25 0.09624310759131793
26 0.10518126042353337
27 0.11383649413800345
28 0.12222452193580224
29 0.13035999325696324
30 0.13825654788029906
31 0.14592687756606715
32 0.15338279036696534
33 0.16063527459096072
34 0.16769456060442822
35 0.17457017944530362
36 0.18127101772032317
37 0.18780536858289398
38 0.19418097879084595
39 0.2004050919669922
    '''

def f2_1():
    '''see f2_2 for final result
    how to compute a complete_super_block_size?
        if p == 2**power:
            complete_super_block_size = power**2 + 1
        else:
            complete_super_block_size = ceil_log2(p)**2
                <<== log2(p)**2_x <= ceil_log2(p)**2 <= p
                <<== ???
'''
    # [ceil_log2(p)**2 <= p] ==>> p >= 36
    for p in range(17, 100):
        lhs = ceil(log2(p))**2
        prefix = 'ooo' if lhs <= p else 'xxx'
        print(prefix, lhs, p)
    '''
xxx 25 17
xxx 25 18
xxx 25 19
xxx 25 20
xxx 25 21
xxx 25 22
xxx 25 23
xxx 25 24
ooo 25 25
ooo 25 26
ooo 25 27
ooo 25 28
ooo 25 29
ooo 25 30
ooo 25 31
ooo 25 32
xxx 36 33
xxx 36 34
xxx 36 35
ooo 36 36
ooo 36 37
ooo 36 38
ooo 36 39
ooo 36 40
ooo 36 41
ooo 36 42
ooo 36 43
ooo 36 44
ooo 36 45
ooo 36 46
ooo 36 47
ooo 36 48
ooo 36 49
ooo 36 50
ooo 36 51
ooo 36 52
ooo 36 53
ooo 36 54
ooo 36 55
ooo 36 56
ooo 36 57
ooo 36 58
ooo 36 59
ooo 36 60
ooo 36 61
ooo 36 62
ooo 36 63
ooo 36 64
ooo 49 65
ooo 49 66
ooo 49 67
ooo 49 68
ooo 49 69
ooo 49 70
'''

def f2_2():
    '''
    how to compute a complete_super_block_size?
        [p>=17]
        if p == 2**power:
            complete_super_block_size = power**2 + 1
        else:
            complete_super_block_size = ceil_log2(p)**2
                <<== log2(p)**2_x <= ceil_log2(p)**2 <= p
                <<== ???
                <<== p >= 36 # from f2_1
            what for [17 <= p < 36]??
'''
    # [log2(p)**2_x <= ceil_log2(p)**2] ==>> p != 2**power
    for p in range(17, 200):
        lhs_ = log2(p) ** 2 # lhs_ < lhs <= rhs
        rhs = ceil(log2(p))**2
        if 1 << p.bit_length()-1 == p:
            prefix = 'XXX'
        else:
            prefix = 'ooo' if lhs_ < rhs else 'xxx'
        if prefix == 'xxx':
            print(prefix)
        print(prefix, lhs_, rhs, p)
    '''
ooo 16.707352478602296 25 17
ooo 17.388274517653667 25 18
ooo 18.044888159471 25 19
ooo 18.67906245737671 25 20
ooo 19.292452342445856 25 21
ooo 19.886530361302064 25 22
ooo 20.46261277028635 25 23
ooo 21.021881133019196 25 24
ooo 21.56540031130902 25 25
ooo 22.094133543878314 25 26
ooo 22.608955158230344 25 27
ooo 23.11066134663147 25 28
ooo 23.599979349020675 25 29
ooo 24.077575317271325 25 30
ooo 24.544061081850924 25 31
XXX 25.0 25 32
ooo 25.445912031418146 36 33
ooo 25.882278161102974 36 34
ooo 26.309544267920057 36 35
ooo 26.72812452053829 36 36
ooo 27.138404368662798 36 37
ooo 27.54074318635817 36 38
ooo 27.93547661515398 36 39
ooo 28.322918647151432 36 40
ooo 28.70336348218725 36 41
ooo 29.077087188003375 36 42
ooo 29.444349188122217 36 43
ooo 29.80539359857666 36 44
ooo 30.160450431665836 36 45
ooo 30.509736682400376 36 46
ooo 30.853457311181497 36 47
ooo 31.19180613446151 36 48
ooo 31.524966633604226 36 49
ooo 31.85311269085847 36 50
ooo 32.17640926024043 36 51
ooo 32.4950129801605 36 52
ooo 32.80907273380348 36 53
ooo 33.118730162557284 36 54
ooo 33.424120137165936 36 55
ooo 33.72537119074668 36 56
ooo 34.02260591734276 36 57
ooo 34.31594133927582 36 58
ooo 34.60548924620519 36 59
ooo 34.891356508488364 36 60
ooo 35.173645367162514 36 61
ooo 35.45245370262467 36 62
ooo 35.72787528387517 36 63
XXX 36.0 36 64
ooo 36.26891407540113 49 65
ooo 36.534700270135055 49 66
ooo 36.797438066588626 49 67
ooo 37.05720384360365 49 68
'''



def f2_3():
    '''
    how to compute a complete_super_block_size?
        [p>=17]
        if p == 2**power:
            complete_super_block_size = power**2 + 1
        else:
            complete_super_block_size = ceil_log2(p)**2
                <<== log2(p)**2_x <= ceil_log2(p)**2 <= p
                <<== ???
                <<== p >= 36 # from f2_1
            what for [17 <= p < 36]??
                log2(p) ** 2 < ??? <= p
'''
    for p in range(17, 36):
        lhs_ = log2(p) ** 2 # lhs_ < lhs <= rhs
        #print(lhs_, ceil(lhs_), p)
        rhs = ceil(lhs_)
        _rhs = log2(p) ** (2+0.012333370161017765) # from f1 when p == 17
        _rhs_ = log2(p) ** (2+0.01233337) # from f1 when p == 17
        prefix = 'ooo' if lhs_+0.01 < rhs < _rhs_ < _rhs <= p else 'xxx'
        prefix = 'ooo' if lhs_+0.01 < rhs <= p else 'xxx'
        if prefix == 'xxx':
            print(prefix)
        #print(prefix, lhs_, rhs, _rhs_, _rhs_, p)
        print(prefix, lhs_, rhs, p)
    '''
ooo 16.707352478602296 17 17
ooo 17.388274517653667 18 18
ooo 18.044888159471 19 19
ooo 18.67906245737671 19 20
ooo 19.292452342445856 20 21
ooo 19.886530361302064 20 22
ooo 20.46261277028635 21 23
ooo 21.021881133019196 22 24
ooo 21.56540031130902 22 25
ooo 22.094133543878314 23 26
ooo 22.608955158230344 23 27
ooo 23.11066134663147 24 28
ooo 23.599979349020675 24 29
ooo 24.077575317271325 25 30
ooo 24.544061081850924 25 31
xxx
xxx 25.0 25 32
ooo 25.445912031418146 26 33
ooo 25.882278161102974 26 34
ooo 26.309544267920057 27 35
'''




def f3_1():
    '''

    ==>> delta_x should have a upper_bound independant with p
    ==>> delta_y should have a upper_bound independant with p
    # recall:
    #   s_ = complete_super_block_size = log2(p)**2_x
    #       | p == 2**power = power**2 + 1          (*c1_s_*)
    #       | p >= 36       = ceil_log2(p)**2       (*c2_s_*)
    #       | otherwise     = undefined # use other method
    # does this definition yield a upper_bound of delta_x??
    for *c1_s_* :
        power == log2(p)
        2_x = log<power>(power**2+1)
        delta_x = log<power>(power**2+1) - 2
                = log<power>(1+ 1/power**2)
                # p >= 36 ==>> power > 5
                < ????
                <= delta_x(p==64) # 32 then 64
                == 0.015291658650989949
'''
    prev_min = 100
    for power in range(5, 100):
        delta_x_1 = log(1+1/power**2, power)
        delta_x_2 = log1p(1/power**2)/log(power)
        curr_max = max(delta_x_1, delta_x_2)
        if curr_max >= prev_min: print('xxx')
        curr_min = min(delta_x_1, delta_x_2)
        print(power, curr_max/prev_min, curr_min, (curr_max-curr_min)/curr_min)
        prev_min = curr_min
    '''
5 0.00024369199240475363 0.024369199240475342 8.542209986591105e-16
6 0.6274994307400855 0.015291658650989949 3.403273998398803e-15
7 0.6789412475658664 0.010382137801854477 1.1696111690666092e-15
8 0.7181505214484545 0.007455937676151504 0.0
9 0.748981555139402 0.005584359795706388 4.50427467460161e-15
10 0.7738351289551806 0.004321373782642574 1.0035717593700042e-15
11 0.79428091855949 0.0034323847375162296 3.4114425853427747e-15
12 0.8113866273931438 0.0027849910760889846 3.581577001271488e-15
13 0.825902830393827 0.00230013201236343 5.2792901740280624e-15
14 0.8383720583197726 0.0019283664096123106 9.782952921815583e-15
15 0.8491959157248554 0.001637560879063767 6.488419103192436e-15
16 0.8586778766194324 0.0014061372984695267 0.0
17 0.8670514261201265 0.0012191933499586865 1.5295586518235676e-14
18 0.8744990707946229 0.00106618345165785 4.4743609099525976e-15
'''

def f3_2():
    '''

    ==>> delta_x should have a upper_bound independant with p
    ==>> delta_y should have a upper_bound independant with p
    # recall:
    #   s_ = complete_super_block_size = log2(p)**2_x
    #       | p == 2**power = power**2 + 1          (*c1_s_*)
    #       | p >= 36       = ceil_log2(p)**2       (*c2_s_*)
    #       | otherwise     = undefined # use other method
    # does this definition yield a upper_bound of delta_x??
    for *c1_s_* :
        power == log2(p)
        2_x = log<power>(power**2+1)
        delta_x = log<power>(power**2+1) - 2
                = log<power>(1+ 1/power**2)
                # p >= 36 ==>> power > 5
                <= delta_x(p==64) # 32 then 64
    for *c2_s_* :
        s_ = log2(p)**2_x = ceil_log2(p)**2
        delta_x = log<log2(p)>(ceil_log2(p))*2-2
                <= ???
                it seems delta_x(p==36)==0.18127101772032317 is the delta_x__upper_bound_2
'''
    for p in range(36, 100):
        delta_x = log(ceil(log2(p)), log2(p))*2 - 2
        print(p, delta_x)
        # y = log(log2(x), ceil(log2(x)))*2 - 2
        # y = log(log2(x-36), ceil(log2(x-36)))*2 - 2

    '''# NOTE: 64 -> 65
36 0.18127101772032317
37 0.17120470795515796
38 0.16156779431132362
39 0.1523299130694995
40 0.14346363155375608
41 0.13494409443192268
42 0.12674872073749244
43 0.11885694324969132
44 0.11124998341769965
45 0.10391065624736706
46 0.09682320055478444
47 0.08997313078453262
48 0.08334710723227001
49 0.07693282203326568
50 0.07071889870492942
51 0.06469480338146916
52 0.05885076616746554
53 0.053177711276162665
54 0.04766719481700665
55 0.04231134926282909
56 0.03710283376602774
57 0.03203478960993289
58 0.02710080018012695
59 0.02229485492390193
60 0.01761131683691941
61 0.013044893076461506
62 0.008590608352232465
63 0.004243780789835672
64 0.0
65 0.16756477400427316
66 0.1631664152937513
67 0.15886716098210707
68 0.15466320205412076
69 0.15055093326794777
70 0.1465269393091293
71 0.1425879820782896
'''














###########

def floor_log2(pint):
    '''floor_log2(p) = floor(log2(p)) where p > 0

assume:
    u >= 0
    p > 0
u < 2**u.bit_length()
2**(p.bit_length()-1) <= p < 2**p.bit_length()

example:
    >>> floor_log2(1)
    0
    >>> floor_log2(2)
    1
    >>> floor_log2(3)
    1
    >>> floor_log2(4)
    2
    >>> floor_log2(5)
    2
    >>> floor_log2(6)
    2
    >>> floor_log2(7)
    2
    >>> floor_log2(8)
    3
'''
    assert pint > 0
    return pint.bit_length()-1





def f4_2():
    '''
    * delta_y__upper_bound
    # recall:
    #   s = complete_normal_block_size = s = log2(p)/(2+delta_y)
    #       | p == 2**(2*half_power) = half_power-1          (*c1_s*)
    #       | p >= 5 or 36           = floor_log2(p)//2      (*c2_s*)
    #       | otherwise              = undefined # use other method
    # does this definition yield a upper_bound of delta_y??
    for *c1_s* :
        p >= 5
            power >= 3
            even_power >= 4
            half_power >= 2
        p >= 36
            p >= 64 == 2**6
            half_power >= 3
        half_power == log2(p)/2

        2_y = log2(p)/s = 2*half_power/(half_power-1)
        delta_y = 2*half_power/(half_power-1) - 2
                = 2/(half_power-1)
        delta_y__upper_bound_1
            # | p >= 5 = delta_y(half_power==2) = 2
            | p >= 36 = delta_y(half_power==3) = 1
    for *c2_s* :
        floor_log2(p)//2 = log2(p)/2_y
        2_y = log2(p)/(floor_log2(p)//2)
        delta_y = log2(p)/(floor_log2(p)//2) - 2
                <= ????

'''
    for p in range(5, 300):
        delta_y = log2(p)/(floor_log2(p)//2) - 2
        print(p, delta_y)
    '''
5 0.3219280948873622
6 0.5849625007211561
7 0.8073549220576042
8 1.0
9 1.1699250014423122
10 1.3219280948873622
11 1.4594316186372973
12 1.584962500721156
13 1.7004397181410922
14 1.8073549220576042
15 1.9068905956085187
16 0.0
17 0.04373142062516955
18 0.08496250072115608
19 0.1239637567217926
20 0.1609640474436813
21 0.19615871138938035
22 0.22971580931864866
23 0.26178097802850653
24 0.29248125036057804
25 0.3219280948873622
26 0.3502198590705463
27 0.3774437510817341
28 0.40367746102880186
29 0.42899049756378593
30 0.45344529780425935
31 0.47709815519343746
32 0.5
33 0.5221970596792267
34 0.5437314206251695
35 0.5646415084724832
36 0.5849625007211561
37 0.6047266828144751
38 0.6239637567217926
39 0.6427011094311244
40 0.6609640474436813
41 0.6787760023090419
42 0.6961587113893803
43 0.713132377351049
44 0.7297158093186487
45 0.7459265481648374
46 0.7617809780285065
47 0.7772944258388188
48 0.792481250360578
49 0.8073549220576042
50 0.8219280948873622
51 0.8362126709857476
52 0.8502198590705463
53 0.8639602272815994
54 0.8774437510817341
55 0.89067985676233
56 0.9036774610288019
57 0.9164450070823706
58 0.9289904975637859
59 0.9413215246809208
60 0.9534452978042594
61 0.9653686687814433
62 0.9770981551934375
63 0.9886399617499584
64 0.0
65 0.007455937676151603
66 0.01479803978615113
67 0.022029730152590687
68 0.0291542804167797
69 0.03617481892605623
70 0.0430943389816556
71 0.04991570650156074
72 0.056641667147437236
73 0.06327485296000601
74 0.06981778854298337
75 0.07627289683196015
76 0.08264250448119492
77 0.0889288468983005
78 0.09513407295408305
79 0.10126024939236755
80 0.10730936496245436
81 0.11328333429487492
82 0.11918400153936126
83 0.12501314378230832
84 0.13077247425958705
85 0.13646364537923406
86 0.14208825156736582
87 0.14764783194957598
88 0.15314387287909925
89 0.1585778103221327
90 0.1639510321098916
91 0.16926488006623197
92 0.17452065201900435
93 0.17971960370267714
94 0.18486295055921254
95 0.18995186944364928
96 0.19498750024038536
97 0.19997094739570942
98 0.20490328137173597
99 0.2097855400265365
100 0.21461872992490827
101 0.2194038275839314
102 0.22414178065716506
103 0.2288335090610727
104 0.23347990604703073
105 0.23808183922204096
106 0.2426401515210661
107 0.24715566213371565
108 0.2516291673878226
109 0.2560614415923088
110 0.26045323784155316
111 0.26480528878336873
112 0.2691183073525347
113 0.27339298747172913
114 0.2776300047215803
115 0.2818300169814587
116 0.2859936650425241
117 0.2901215731944684
118 0.29421434978728067
119 0.2982725877693144
120 0.3022968652028397
121 0.30628774575819806
122 0.31024577918762875
123 0.3141715017797466
124 0.3180654367956248
125 0.3219280948873622
126 0.3257599744999724
127 0.32956156225738864
128 0.3333333333333335
129 0.3370757518077512
130 0.34078927100948464
131 0.3444743338458167
132 0.3481313731194846
133 0.3517608118337301
134 0.35536306348592417
135 0.35893853235027695
136 0.3624876137501132
137 0.3660106943201753
138 0.3695081522593897
139 0.37298035757450254
140 0.37642767231498864
141 0.3798504507995979
142 0.3832490398348942
143 0.38662377892612954
144 0.3899750004807707
145 0.393303030004978
146 0.39660818629333905
147 0.3998907816121213
148 0.40315112187631685
149 0.4063895068207204
150 0.4096062301652936
151 0.4128015797750262
152 0.4159758378145284
153 0.41912928089755086
154 0.42226218023163353
155 0.4253748017580792
156 0.4284674062874161
157 0.4315402496305425
158 0.43459358272570103
159 0.4376276517614519
160 0.4406426982957874
161 0.4436389593715391
162 0.44661666762820795
163 0.44957605141035906
164 0.45251733487269474
165 0.4554407380819385
166 0.45834647711564136
167 0.46123476415801745
168 0.4641058075929201
169 0.46695981209406145
170 0.4697969787125671
171 0.4726175049619661
172 0.4754215849006993
173 0.47820940921224153
174 0.48098116528290946
175 0.483737037277443
176 0.4864772062124323
177 0.48920185002766603
178 0.49191114365546573
179 0.4946052590880856
180 0.4972843654432251
181 0.49994862902773507
182 0.5025982133995655
183 0.5052332794280141
184 0.5078539853523378
185 0.5104604868387708
186 0.5130529370360102
187 0.515631486629212
188 0.518196283892546
189 0.5207474747403578
190 0.5232852027769828
191 0.5258096093452496
192 0.5283208335737188
193 0.5308190124226937
194 0.5333042807290425
195 0.53577677124987
196 0.5382366147050694
197 0.5406839398187921
198 0.54311887335987
199 0.5455415401812163
200 0.5479520632582413
201 0.5503505637263095
202 0.5527371609172649
203 0.5551119723950588
204 0.5574751139904985
205 0.5598266998351487
206 0.5621668423944062
207 0.5644956524997751
208 0.5668132393803642
209 0.5691197106936277
210 0.571415172555374
211 0.573699729569062
212 0.5759734848543996
213 0.5782365400752796
214 0.5804889954670487
215 0.5827309498631537
216 0.5849625007211561
217 0.58718374414816
218 0.5893947749256419
219 0.5915956865337244
220 0.5937865711748866
221 0.5959675197971439
222 0.5981386221167022
223 0.6002999666401014
224 0.6024516406858678
225 0.604593730405679
226 0.6067263208050626
227 0.6088494957636383
228 0.6109633380549138
229 0.613067929365648
230 0.6151633503147917
231 0.6172496804720193
232 0.6193269983758571
233 0.6213953815514266
234 0.6234549065278014
235 0.6255056488549999
236 0.6275476831206137
237 0.6295810829660864
238 0.6316059211026479
239 0.6336222693269162
240 0.6356301985361728
241 0.6376297787433205
242 0.6396210790915315
243 0.6416041678685933
244 0.6435791125209622
245 0.6455459796675238
246 0.6475048351130801
247 0.6494557438615591
248 0.6513987701289583
249 0.6533339773560272
250 0.6552614282206957
251 0.6571811846502573
252 0.6590933078333054
253 0.6609978582314366
254 0.6628948955907217
255 0.6647844789529525
256 0.0
257 0.001406137298469723
258 0.0028068138558134947
259 0.004202071921638684
260 0.005591953257113591
261 0.006976499142471226
262 0.008355750384362537
263 0.009729747323075522
264 0.011098529839613569
265 0.012462137362640568
266 0.013820608875297236
267 0.015173982921888651
268 0.016522297614443016
269 0.017865590639155826
270 0.019203899262707935
271 0.0205372603384677
272 0.021865710312584774
273 0.023189285229963108
274 0.02450802074013181
275 0.02582195210300542
276 0.02713111419454206
277 0.028435541512297213
278 0.029735268180876684
279 0.031030327957296766
280 0.03232075423624181
281 0.03360658005523165
282 0.03488783809969842
283 0.03616456070797058
284 0.037436779876170334
285 0.0387045272630262
286 0.03996783419459726
287 0.04122673166892188
288 0.04248125036057804
289 0.04373142062516955
290 0.04497727250373362
291 0.04621883572707075
292 0.0474561397200044
293 0.04868921360556211
294 0.049918086209090884
295 0.05114278606230105
296 0.05236334140723731
297 0.05357978020019161
298 0.054792130115540516
299 0.0560004185495262
'''
f4_2()





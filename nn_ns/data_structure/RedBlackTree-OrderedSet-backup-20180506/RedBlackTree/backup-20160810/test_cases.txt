// how to reconstruct a given red-black-tree 
//    using only insert_at_leaf/remove_leaf_and_its_parent
//    begin from an empty tree (i.e. leaf_root)??



insert_at_leaf
    // how to reconstruct a given red-black-tree 
    //    using only insert_at_leaf 
    //    begin from an empty tree (i.e. leaf_root)??
    // defective problem since some valid rb-tree can not be built by insert_at_leaf
    //   e.g. a tree size = 2**k-1 > 1 and all nodes are black
    //         (black, (black, (), ()), (black, (), ()))

    // which rb-tree can be built using insert_at_leaf??
    //   leaf_root : black++
    //   insert new nonleaf : black++ red++
    //   trinode_restructure: ---
    //   push down black (recolor red root) : black++ red--
    //   if n nonleaf nodes ==>> black >= (n+1); red <= n; black+red == 2n+1
    //   ((black-1) - red)/2 == number of <push-down-color>

    1) leaf_root:black
        ==>>
        me:black->{leaf, leaf}
        ------
        ()
            . := 0 ==>> (black, 0, (), ())
    2) ...parent:black -> leaf
        ==>>
        ...parent:black -> me:red->{leaf, leaf}
        ------
        (black, 1, (), ())
            .left := 0 ==>> (black, 1, (red, 0, (), ()), ())
            .right := 2 ==>> (black, 1, (), (red, 2, (), ()))
            <<== () := 1
    3) ...parent:red -> leaf
        ==>>
        ...grandpa:black -> parent:red -> me:red->{leaf, leaf}
        3-1) grandpa:black -> uncle:black
            ==>>
            trinode_restructure
            3-1-1) same direction: me.direction==parent.direction
                ==>>
                adjust: parent:red->{grandpa:black, me:red}
            3-1-2) otherwise
                ==>>
                me:red->{grandpa:black, parent:red}
                
            recolor: x:black->{grandpa:red, y:red}
            end
            ------
            (black, 3, (), (red, 5, (), ()))
                .right.left := 4 ==>> (black, 4, (red, 3, (), ()), (red, 5, (), ()))
                .right.right := 6 ==>> (black, 5, (red, 3, (), ()), (red, 6, (), ()))
                <<== () := 3; .right := 5
            (black, 3, (red, 1, (), ()), ())
                .left.left := 0 ==>> (black, 1, (red, 0, (), ()), (red, 3, (), ()))
                .left.right := 2 ==>> (black, 2, (red, 1, (), ()), (red, 3, (), ()))
                <<== () := 3; .left := 1
            ------
        3-2) grandpa:black -> uncle:red
            ==>>
            recolor: grandpa:red -> {uncle:black, parent:black}
            me = grandpa
            continue
            ------
            (black, 3, (red, 1, (), ()), (red, 5, (), ()))
                .left.left := 0 ==>> (black, 3, (black, 1, (red, 0, (), ()), ()), (black, 5, (), ()))
                .left.right := 2 ==>> (black, 3, (black, 1, (), (red, 2, (), ())), (black, 5, (), ()))
                .right.left := 4 ==>> (black, 3, (black, 1, (), ()), (black, 5, (red, 4, (), ()), ()))
                .right.right := 6 ==>> (black, 3, (black, 1, (), ()), (black, 5, (), (red, 6, (), ())))
                <<== () := 3; .left := 1; .right := 5
            ------
            # continue test
            (black, 1, (black, 0, (), ()), 
                       (red, 3, (black, 2, (), ()), 
                                (black, 7, (red, 5, (), ()), 
                                           (red, 9, (), ()))))
                .right.right.left.left := 4 ==>> 
                        (black, 3, (red, 1, (black, 0, (), ()), (black, 2, (), ())), 
                                   (red, 7, (black, 5, (red, 4, (), ()), ()), 
                                            (black, 9, (), ())))
                <<== () := 1; .left := 0; .right := 3; .right.left := 2; .right.right := 7; .right.right.left := 5; .right.right.right := 9
                







remove_leaf_and_its_parent
    ...parent->{sibling_leaf, me} ==>> ...me
    // easy: (red, (), ()), 
    //       (black, (), (red, (), ())), 
    //       (black, (red, (), ()), ())
    // hard: (black, (), ())
    1) ...parent:red->{sibling_leaf, me:black} ==>> ...me:black
        -----
        assert me is leaf
        (black, 0, (), (red, 1, (), ()))
            del .right.left ==>> (black, 0, (), ())
            del .right.right ==>> (black, 0, (), ())
            <<== () := 0 ; .right := 1
    2) ...parent:black->{sibling_leaf, me:red} ==>> ...me:black
        -----
        (black, 0, (), (red, 1, (), ()))
            del .left ==>> (black, 1, (), ())
            <<==  () := 0 ; .right := 1
        
    3) ...old_parent:black->{old_sibling_leaf, me:black} ==>> ...me:double_black
        -----
        assert org_me is leaf
    3-1) root_me:double_black ==>> root_me:black
        -----
        (black, 0, (), ())
            del .left/right ==>> ()
            <<==  () := 0
    3-2) parent:black->{sibling:red, me:double_black}
        ==>> adjust
            sibling:black->{same_direction_nephew, 
                            parent:red->{other_nephew, me:double_black}}
        me' = me
        sibling' = other_nephew:black
        goto 3-3) or indeed:
            sibling:black->{same_direction_nephew, 
                            parent:black->{other_nephew:red, me:black}}
        -----
        (black, 3, (red, 1, (black, 0, (), ()), (black, 2, (), ())), 
                   (black, 4, (), ()))  
            del .right.left/right ==>> (black, 1, (black, 0, (), ()), (black, 3, (red, 2, (), ()), ()))
            <<==  () := 3; .left := 1; .right := 4; .left.left := 0; .left.right := 2;
                  ; .left.left.left := -1; del .left.left.left.left
    3-3) parent:grey->{sibling:black->{nephew1:black, nephew2:black}, me:double_black}
    # what if sibling is a leaf?? cannot! since me double-black
        ==>> recolor ...
        parent:(grey+black)->{sibling:red->{nephew1:black, nephew2:black}, me:black}
            where red+black=black, black+black=double_black
        if grey is black: me=parent; continue
        -----
        # below trees cannot be constructed by only using insert_at_leaf
        (black, 1, (black, 0, (), ()), (black, 2, (), ()))
            del .left.left/right ==>> (black, 1, (), (red, 2, (), ()))
            del .right.left/right ==>> (black, 1, (red, 0, (), ()), ())
            <<== () := 1; .left := 0; .right := 2
                 ; .left.left := -1; del .left.left.left
        -----
        (black, 3, (red, 1, (black, 0, (), ()), 
                            (black, 2, (), ())), 
                   (black, 4, (), ()))
            del .left.left.left/right ==>> (black, 3, (black, 1, (), (red, 2, (), ())), (black, 4, (), ()))
            del .left.right.left/right ==>> (black, 3, (black, 1, (red, 0, (), ()), ()), (black, 4, (), ()))
            <<== () := 3; .left := 1; .right := 4
                 ; .left.left := 0; .left.right := 2
                 ; .left.left.left := -1; del .left.left.left.left
        -----
        # continue test
        (black, 7, (red, 3, (black, 1, (black, 0, (), ()), 
                                       (black, 2, (), ())), 
                            (black, 5, (black, 4, (), ()), 
                                       (black, 6, (), ()))),
                   (black, 9, (black, 8, (), ()), 
                              (black, 10, (), ())))

            del .left.left.left.left/right ==>> 
            (black, 7, (black, 3, (black, 1, (), 
                                             (red, 2, (), ())), 
                                  (red, 5, (black, 4, (), ()), 
                                           (black, 6, (), ()))),
                       (black, 9, (black, 8, (), ()), 
                                  (black, 10, (), ())))
            del .left.left.right.left/right ==>> 
            (black, 7, (black, 3, (black, 1, (red, 0, (), ()), 
                                             ()), 
                                  (red, 5, (black, 4, (), ()), 
                                           (black, 6, (), ()))),
                       (black, 9, (black, 8, (), ()), 
                                  (black, 10, (), ())))
            <<== () := 7; .left := 3; .right := 9
                 ; .left.left := 1; .left.right := 5
                 ; .right.left := 8; .right.right := 10 # b->b->r->()
                 ; .left.left.left := 0; .left.left.right := 2
                 ; .left.right.left := 4; .left.right.right := 6 # (b->)r->b->r->()
                    (black, 7, (red, 3, (black, 1, (red, 0, (), ()), 
                                                   (red, 2, (), ())), 
                                        (black, 5, (red, 4, (), ()), 
                                                   (red, 6, (), ()))),
                               (black, 9, (red, 8, (), ()), 
                                          (red, 10, (), ())))
                 ; .right.right.right := 11; del .right.right.right.right # (b->)r->b->()
                 ; .left.left.left.left := -1; .left.right.left.left := 3.5 
                    (black, 7, (black, 3, (red, 1, (black, 0, (red, -1, (), ()), 
                                                              ()), 
                                                   (black, 2, (), ())), 
                                          (red, 5, (black, 4, (red, 3.5, (), ()), 
                                                              ()), 
                                                   (black, 6, (), ()))),
                               (black, 9, (black, 8, (), ()), 
                                          (black, 10, (), ())))
                 ; .left.left.left.right := 0.5; .left.left.left.left.left := -2
                    (black, 7, (red, 3, (black, 1, (red, 0, (black, -1, (red, -2, (), ()), 
                                                                        ()), 
                                                            (black, 0.5, (), ())), 
                                                   (black, 2, (), ())), 
                                        (black, 5, (black, 4, (red, 3.5, (), ()), 
                                                              ()), 
                                                   (black, 6, (), ()))),
                               (black, 9, (black, 8, (), ()), 
                                          (black, 10, (), ())))
                 ; del .left.left.left.left.left.left
                 ; del .left.left.left.left.left
                 ; del .left.left.left.right.left
                 ; del .left.right.left.left.left
                 
    3-4) parent:grey->{sibling:black->{red_nephew:red, other_nephew}, me:double_black}
        ==>>
        trinode restructure + recolor
        3-4-1) sibling.direction == red_nephew.direction
                sibling:grey->{red_nephew:black, 
                               parent:black->{other_nephew, me:black}}
        3-4-2) otherwise
                red_nephew:grey->{sibling:black->{other_nephew, one_child_of_red_nephew}, 
                                  parent:black->{me:black, another_child_of_red_nephew}}
            

        end
        -----
        (black, 2, (black, 0, (), (red, 1, (), ())), (black, 3, (), ()))
        (black, 2, (black, 1, (red, 0, (), ()), ()), (black, 3, (), ()))
            del .right.left/right ==>> (black, 1, (black, 0, (), ()), (black, 2, (), ()))
            <<== () := 2; .left := 0; .right := 3; .left.right := 1
            <<== () := 2; .left := 1; .right := 3; .left.left := 0
        -----
        (black, 4, (red, 2, (black, 0, (), (red, 1, (), ())), 
                            (black, 3, (), ())), 
                   (black, 5, (), ()))
        (black, 4, (red, 2, (black, 1, (red, 0, (), ()), ()), (black, 3, (), ())), (black, 5, (), ()))
            del .left.right.left/right ==>> (black, 4, (red, 1, (black, 0, (), ()), (black, 2, (), ())), (black, 5, (), ()))
            <<== () := 4; .left := 2; .right := 5; 
                 ; .left.left := 0; .left.right := 3; .left.left.right := 1
            <<== () := 4; .left := 2; .right := 5; 
                 ; .left.left := 1; .left.right := 3; .left.left.left := 0










// how to reconstruct a given red-black-tree 
//    using only insert_at_leaf/remove_leaf_and_its_parent
//    begin from an empty tree (i.e. leaf_root)??

0) constraint : we do not perform trinode restructure
1) use only insert_at_leaf to construct a tree 
    which has same structure as the given one, but allow color mismatch
    we can fill up 2**(max height) - 1 nodes layer by layer first
        i.e. 2**(max height-1) - 1 nonleaf nodes
        2**(max height) - 1 >= num_nodes known max height
            >= 1 + (2+1) + (2+2**2-1) + ... 
            # if 
            = 1 + sum 2+2**(i-1)-1 {i=2..min_black_height}
            = min_black_height + sum 2**i {i=1..min_black_height-1}
            = min_black_height + sum 2**i {i=1..min_black_height-1}
            = min_black_height + 2**min_black_height - 2
            where min_black_height = ceil(max_height/2)
        num useless nodes = 2**(max height) - 1 - (min_black_height + 2**min_black_height - 2)
                          =~ 2**(max_height) - 2**(max_height/2)
        too many ...
    or:
        we try to insert, if need not restructure then fine
        otherwise wait on the color of black "uncle node"
        can this cause a dead lock??
        yes, if there are not enough black height
        consider the most baised rb-tree:
            AllBlackRBT black_height = () if black_height == 0 else
                                       (black, (AllBlackRBT black_height-1), 
                                               (AllBlackRBT black_height-1))
            MostBaisedRBT black_height
                | black_height == 1 = ()
                | black_height > 1 = (black, (AllBlackRBT black_height-1),
                                             (red, (AllBlackRBT black_height-1),
                                                   (MostBaisedRBT black_height-1)))
        if dead lock occurs, we call to_red(black node waited)
        until no black_uncle
    or:
        using restructure insert
        what we need is indeed a tree >= old tree i.e.
            new >= old ::= all(not get_node(new, path).is_leaf() for path in get_nonleaf_paths(old))
        hence, we can insert i-th node with entity i in any order, 
            until new tree >= old tree

2) use both insert_at_leaf and remove_leaf_and_its_parent to 
    recolor the tree s.t. it has same black height as the given one
    2-0) constraint : 
        the modifying tree is a tree 
           which replace some leaves of the given tree by subtrees
           if ignore color.
        black height does not change
    if height > org's:
        black2double_black(root)
    elif < :
        to_red(root)
        recolor(root)
2) use both insert_at_leaf and remove_leaf_and_its_parent to recolor
    2-1) assume a node x with wrong color and its proper ancestors are correct
        ==>> x is not root; x is not leaf ==>> x is a nonroot_nonleaf
        ==>> x.parent is black (since x can be both color)
       
        case org x of
        # org x has a leaf child
        (red, (), ()) ==>> new x == (black, (...), (...)) 
            black_height[new x] >= 2 > black_height[org x] == 1
            ==>> impossible
        (black, (), (...)) ==>> new x == (red, (...), (...))
            black_height[new x] == black_height[org x] == 2
            new x == (red, (black, (), ()), (black, (), ()))
            del new_x.left/right.left
        # org x has no leaf children
        (red, (black, (...), (...)), (black, (...), (...)))
            ==>> new x == (black, (red/black, (...), (...)), (red/black, (...), (...)))
            ==>> new_x' = (black, (red, (...), (...)), (red, (...), (...)))
            ==>> new_x'' = (red, (black, (...), (...)), (black, (...), (...)))
            def to_red(new_x):
                # return [([op], new_x')]
                # i.e. operation sequence candidates
                if new_x is leaf: 
                    op = insert (red, (), ()) at new_x
                    op_seq = [op]
                    new_x' = insert_at_leaf(new_x, -xxx)
                    return [([op], new_x')]
                if new_x is (red...) 
                    return [([], new_x')]
                ls = parallel_mul(new_x, to_red, to_red)
                def parallel_mul(new_x, f, g):
                    [(left_ops + right_ops, (black, new_x.entity, left', right'))
                        for left_ops, left' in f(new_x.left)
                        for right_ops, right' in g(new_x.right)]
                # update(new_x.left/right)
                def iter_serial_mul(new_x, ls, f):
                    for ops in ls:
                        new_x' = update(new_x, ops)
                        for next_ops, new_x'' in push_down_black(new_x'):
                            yield ops+next_ops, new_x''
                    
                ls = iter_serial_mul(new_x, ls, push_down_black)
                return list(ls)
            def push_down_black(new_x):
                assert new_x is (black, (red...), (red...))
                # return to_red(new_x.left/right.left/right) # 4 possible
                return to_red(new_x.left.left) + ...
        (black, (...), (...))
            ==>> new x == (red, (black, (...), (...)), (black, (...), (...)))
            ==>> new_x' == (red, (double_black...), (black, (nonred...), (nonred...)))
            ==>> <auto> == (black, (black, (...), (...)), (red, (nonred...), (nonred...)))
            def to_black(new_x):
                if new_x is black: 
                    return [([], new_x)]
                return red2black(new_x)
            def red2black(new_x):
                assert new_x is red
                return more_black(new_x)
            def more_black(new_x):
                # red->black or black2double_black
                assert new_x is not leaf
                if new_x is leaf:
                    return []
                if new_x == (black, e, (), (...)):
                    if e < 0:
                        return [([remove at new_x.left/right], ())]
                    else:
                        # can not remove org node
                        return []
                if new_x is red:
                    new_x = (black, new_x.entity, new_x.left, new_x.right)
                    
                ls = parallel_mul(new_x, 
                                  black2double_black . to_black,
                                  \right:parallel_mul(right, to_black, to_black)
                                  )
                    +parallel_mul(new_x,
                                  \left:parallel_mul(left, to_black, to_black),
                                  black2double_black
                                  )
                return ls
            def black2double_black(new_x):
                assert new_x is black
                return more_black(new_x)
                                
                
3) remove useless bottom red nonleaf nodes if they does not present in org tree.







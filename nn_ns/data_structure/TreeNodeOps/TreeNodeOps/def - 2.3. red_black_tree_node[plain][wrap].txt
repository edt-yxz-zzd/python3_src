
RBT_Node = red_black_tree_node:
    1) Plain + Parented
        [immutable Plain] ==>> subtree sharable
        Plain a = Leaf | Nonleaf color a (Plain a) (Plain a)
        Parented a = (Plain a, Maybe (direction, Parented a))
            1-1) both immutable
            1-2) immutable plain + mutable parent_info
            ??1-3) mutable plain + immutable parent_info

    2) Leaf + Nonleaf
        [mutable Nonleaf]
        Nonleaf a = Nonleaf (may_parent::Maybe (Nonleaf a)) color a (Node a) (Node a)
        Node a = Leaf a | Nonleaf a
            2-1) immutable leaf + mutable nonleaf
                # constant leaf
                Leaf a = Leaf
            2-2) mutable leaf + mutable nonleaf
                # parented leaf
                Leaf a = Leaf (may_parent::Maybe (Nonleaf a))



suppose we are to wrap a plain node as RBT_Node
    there are lots of cases
    leaf:
        1) only one instance
        2) each leaf is distinguishable
        2-1) contain nothing
        2-2) contain .parent
        2-3) contain .parent, .direction
        2-4) contain .direction

    nonleaf:
        must: .color, .entity, .left, .right
        1) which properties??
            .parent? .direction?
        2) which properties are mutable??
            this determines whether a modification is preformed inplace

    3 cases = no_property, immutable_property, mutable_property
    leaf: 1 + 3*3 = 10
        singleton + parent? * direction?
    nonleaf: 2**3 * 3*3 = 72
        mutable?{color*entity*child} * parent? * direction?
    total = 10 * 72


assume underlying node use same RED/BLACK/LEFT/RIGHT


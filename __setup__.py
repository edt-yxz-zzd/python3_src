
r'''
run me before using these packages

0. -- inside this program: sys.path.append(this_folder) --
1. make my_py3src.pth
    so that we can access to nn_ns,seed:

    from distutils.sysconfig import get_python_lib
    get_python_lib() == r'C:\Python36\Lib\site-packages'

    C:/Python<XY>/Lib/site-packages/my_py3src.pth:
        # put this file into C:/Python<XY>/Lib/site-packages
        <path/to/python3_src>
        # encoding = locale.getpreferredencoding(False)
        # spaces are OK; should not in inside "" and ''
        C:\Program Files\按键精灵9
        E:/my_data/program_source/github/edt-yxz-zzd/python3_src

2. exec generate_set_path.py
    # update Windows Register
    # generate set_path.bat and other bat if there are *.bat.tpl
    so that we have right-click "MS-DOS" menuitem
        and put *.bat into %PATH%

    py -m <path/to/python3_src>/windows_bat/set_path/generate_set_path.py

3. exec update_cmd_reg_setting.py
    # update [HKEY_CURRENT_USER\Console]
    set cmd.exe: color/quick-edit/font/...

4. exec let_exe_py_file_executable.bat
    ".exe_py" instead of ".py"
    executable vs open_with_editor
5. exec nn_ns.app.scripts.__startup__register__exe_py__
    let ".exe_py" be a python source suffix like ".py" and ".pyw"
    # inject "import nn_ns.app.scripts" to 'sitecustomize.py'
    # nn_ns.app.scripts.__init__ will append '.exe_py' to importlib.machinery.SOURCE_SUFFIXES

r'''


from distutils.sysconfig import get_python_lib
import os.path
from pathlib import Path
from runpy import run_path, run_module
import sys
import subprocess

def _mk_Global():
    site_packages_path = get_python_lib()
    this_fname = os.path.abspath(__file__)
    this_folder = os.path.dirname(this_fname)
    user_py_src_root = this_folder

    pth_prime_basename_without_ext = 'nn_ns_py3_src' # 'my_py3src'


    windows_bat_relative_path = 'windows_bat'
    generate_set_path_py_basename = 'generate_set_path.py'
    update_cmd_reg_setting_py_basename = 'update_cmd_reg_setting.py'
    let_exe_py_file_executable_bat_basename = 'let_exe_py_file_executable.bat'
    middle_folders = 'set_path'

    def _mk_path(basename):
        relative_path = f'{windows_bat_relative_path}/{middle_folders}/{basename}'
        path = Path(user_py_src_root, relative_path).resolve()
        return str(path)
    generate_set_path_py_path = _mk_path(generate_set_path_py_basename)
    update_cmd_reg_setting_py_path = _mk_path(update_cmd_reg_setting_py_basename)
    let_exe_py_file_executable_bat_path = _mk_path(let_exe_py_file_executable_bat_basename)
    del _mk_path
    return dict(locals())

class Global: pass
def _fill_Global():
    for name, value in _mk_Global().items():
        setattr(Global, name, value)
_fill_Global(); del _fill_Global, _mk_Global


def generate_path_configuration_file(pth_prime_basename_without_ext):
    # path configuration file
    pth_fname = fr'{Global.site_packages_path}/{pth_prime_basename_without_ext}.pth'
    pth_fname = os.path.abspath(pth_fname)

    path_configuration_file_content = fr'''
# generated by {Global.this_fname!r}
# file name: {pth_fname!r}
# encoding = locale.getpreferredencoding(False)
# cannot recognize encoding declaration: -*- coding: utf-8 -*-
# spaces are OK; should not in inside "" and ''
{Global.user_py_src_root!s}
{Global.user_py_src_root!s}/nn_ns/app/scripts
''' # user_py_src_root!s not !r

    # bug: Path(pth_fname).write_text(path_configuration_file_content, encoding='utf8') # may not be utf8
    Path(pth_fname).write_text(path_configuration_file_content)

def run_generate_set_path():
    return run_path(Global.generate_set_path_py_path
            , run_name = '<runpy>.__run_as_main__')

def run_update_cmd_reg_setting():
    return run_path(Global.update_cmd_reg_setting_py_path
            , run_name = '<runpy>.__run_as_main__')
def run_let_exe_py_file_executable():
    subprocess.run('assoc .exe_py="executable python script"', shell=True, check=True)
    subprocess.run('ftype "executable python script"=py "%1" %*', shell=True, check=True)
    return
    return subprocess.run([Global.let_exe_py_file_executable_bat_basename], check=True)
def run_startup__register__exe_py():
    return run_module('nn_ns.app.scripts.__startup__register__exe_py__'
        , run_name='<runpy>.__run_as_main__')

if __name__ == '__main__':
    sys.path.append(Global.user_py_src_root)
        # now can "import nn_ns"
        # now can "import nn_ns.app.scripts.XXX" # XXX.exe_py
    import nn_ns.app.scripts
        # now can "import xxx.yyy.zzz.XXX" # XXX.exe_py

    run_startup__register__exe_py()
    generate_path_configuration_file(Global.pth_prime_basename_without_ext)
    run_generate_set_path()
    run_update_cmd_reg_setting()
    run_let_exe_py_file_executable()



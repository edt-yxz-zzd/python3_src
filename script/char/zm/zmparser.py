

L = 4

'''

基根/一般根: 有无编码


基根:1码根/2码根/3码根 (注意:一码多根)
1码根:第一主根/第一主根同码形近根
2码根:第一主根异码形近根/第二主根/第二主根同码形近根/2码副根/2码副根同码形近根

3码根:
3码形近根


基根:主根/副根
主根:第一主根/第二主根

第一主根
第二主根
副根
形近根


基根:成字基根/不成字基根/笔画代码
成字基根
不成字基根
笔画代码

根编码: 区码 位码 形近码

字编码:
简码:一/二/三级简码 (比常规码优先)
常规码:
    一基根字:
        第一主根构字: 1A
        第一主根同码形近根构字: 1AA 1AAA
        不成字笔画代码: 1AAA
        第二主根构字：1D
        常用成字2码根构字: 2 (属于部分二级简码)
        成字3码形近根构字: 3
        不常用成字非形近2码根构字: 2A
        other: NAAA
            不常用成字形近根构字: 2A 2AA 3A
            不成字基根: 2AA 3A
    二基根字: 31 22 21 12 11VV
    三基根字 301 211 112 111
    四或多基根字 3.1 2.11 11.11
        四基根字 3.1 2011 1111
        多基根字 3.1 2.11 11.11
    

zm = zm2 | zm3 | zm4
zm2 = 2 | 1A | 1D
zm3 = 21 | 12 | 111 | 3 | 1AA | 2A
zm4 = 3.1 | 2.11 | 22 | 11.11 | 112 | 1AAA | 2AA | 3A | 11VV

'''


def zmparser(zm):
    zmL = len(zm)
    assert 0 < zmL <= L

    zm = zm.upper()
    
    # (解释:首根全取(1-3码), 其余按末/次末/次根分配, 最后再分配给末根)
    # 高频字有简码
    #     一级简码: 1. 首根区码(例外: D '的')
    
#     二级简码: 11. 首次根区码
    #     三级简码: 12 111.
    # 与简码区分, 有填充: 1A(第一主根构字), 11VV, 2A(成字基根), 2A/2AA/3A(成字形近根), 1AAA/2AA/3A(不成字基根或笔画代码)
    #    除了A/V,还有一个D, 是第二主根位码
    # 特殊 JAA
    

    if zmL == 1:
        r = zmparser_高频字一级简码(zm)
    elif zmL == 2 and zm[-1] == 'A':
        r = zmparser_第一主根构字(zm)
    elif zmL == 2:
        r = zmparser_二级简码或第二主根或副根构字(zm) # 二级简码优先, 副根构字可能填充A
    else:
        # 高频字二级简码 高频字三级简码
        # 以下左优先
        # 二基根字 31 22 21 12 11VV
        # 三基根字 301 211 112 111
        # 四或多基根字 3.1 2.11 11.11
        #   四基根字 3.1 2011 1111
        #   多基根字 3.1 2.11 11.11
    
    

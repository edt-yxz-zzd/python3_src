

'''
pattern = "a?"*n + "a"*n
string = "a"*n

see website:
    Regular Expression Matching Can Be Simple And Fast
        (but is slow in Java, Perl, PHP, Python, Ruby, ...)
        Russ Cox
        January 2007
'''


def main(test):
    from timeit import timeit
    from time import perf_counter, process_time
    #from random import *
    for i in range(100):
        start = perf_counter()
        test(i)
        end = perf_counter()
        print(i, end-start)




import re
def test_re(n):
    pattern = "a?"*n + "a"*n
    string = "a"*n
    rex = re.compile(pattern)
    m = rex.match(string)
    assert m
    '''
n seconds
0 0.00013244120416911227
1 0.00019597388513584516
2 0.0003117988496675042
3 0.00027563409280951775
4 0.0002551081497279579
5 0.000663672159637101
6 0.0006294622545011674
7 0.00040709787111760376
8 0.0003968348995768232
9 0.00042322539782454344
10 0.00048480322706922173
11 0.0006304396803621937
12 0.0009349078360719985
13 0.0013923431390324773
14 0.0024132644508748184
15 0.003939514932867948
16 0.007634184687548715
17 0.015435509197332997
18 0.03098293365575354
19 0.06318911577658196
20 0.1299306858450653
21 0.2672599967451719
22 0.5494501735175261
23 1.1218131640692388
24 2.2916203814795395
25 4.746976699633612
26 9.573585261590926
27 19.52595823166068
28 40.15475388172463
'''



from nn_ns.regex.Simple.app import search_leftmost_substring
def test_mine(n):
    pattern = r"a\?"*n + "a"*n
    string = "a"*n
    m = search_leftmost_substring(pattern, string)
    try:
        assert m
    except:
        print(repr(m))
        raise
    '''
n seconds
0 0.00028247607383670437
1 0.0020516168822949567
2 0.0048597613810245485
3 0.008589129753771763
4 0.01424158350808893
5 0.021346492091891718
6 0.030031409580044098
7 0.040145812389947966
8 0.05275704956184443
9 0.06670247303404225
10 0.084952968711132
11 0.10244058350369051
12 0.1257189578099014
13 0.1492602596727285
14 0.17725373633253205
15 0.21002829159154734
16 0.2470893479640952
17 0.28444216595615956
18 0.32240049926912984
19 0.3702181272422762
20 0.4229580718515522
21 0.4781919185452388
22 0.5415740759293728
23 0.6102885800983389
24 0.6860747603718318
25 0.7697658722963787
26 0.8574189799485978
27 0.9532653598808709
28 1.0605876968474597
29 1.1718906006330787
30 1.292751751913677
31 1.4264914663391632
32 1.5675672505645863
33 1.7194778004594866
34 1.8827953988655004
35 2.0576006834161618
36 2.236407060728933
37 2.4416347252040467
38 2.652540745218797
39 2.88336474942955
40 3.123175207006579
41 3.3804600841270442
42 3.6486608532634506
43 3.940479652192778
44 4.253926930574906
45 4.695325607433517
46 4.924107769020587
47 5.2923632251339185
48 5.672436737332923
49 6.0599357537981575
50 6.54206816470213
51 6.9423455581614775
52 7.753797666004786
53 7.953104084613798
54 8.516487463780265
55 9.321668407299228
'''

if False:
    main(test_re)
else:
    main(test_mine)


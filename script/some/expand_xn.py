


'''
[int m>=n>=0]
x**j = sum A(m,j,i) (x+i)**m {i=0..m}
Y = [(x+i)**m for i=0..m]
X = [x**j for j=0..m]
X = A(m)Y
Y = B(m)*X
==>> (x+i)**m = sum B(m,i,j) x**j {j=0..m} ==>> B(m,i,j) = C(m,j) i**(m-j)
A(m) = 1/B(m)


x**j = sum A2(m,j,i) (x+i-m/2)**m {i=0..m}
(x+i-m/2)**m = sum B2(m,i,j) x**j {j=0..m} ==>> B(m,i,j) = C(m,j) (i-m/2)**(m-j)


fall(x,1) = x**1
fall(x,2) = x(x-1) = x**2 - x = x**2 - ((x+1)**2-(x-1)**2)/4
    = (x-1)**2/4 + x**2 - (x+1)**2/4
'''

import sympy
from sympy import Matrix, binomial as C, factorial, gcd, factorint as fi, lcm
from sympy.abc import x

from fractions import Fraction
import pprint
from sand.deep_map import deep_map

ff = factorial
noprint = lambda *args, **kwargs: None

def calc_B(m, base):
    assert m>=0
    L = m+1
    Cs = [C(m,j) for j in range(L)]
    B = [[c*(i+base)**(m-j) for j, c in zip(range(L), Cs)] for i in range(L)]
    return Matrix(B)

def calc_A_B(m, base):
    B = calc_B(m, base)
    A = B.inv()
    return A,B
    


def t(M, base_f, print=None):
    if print is None:
        print = lambda *args, **kwargs: None
        
    m = 0
    pre_A, _ = A_B = calc_A_B(0, base_f(m))
    Ds_ls = []
    ABs = [A_B]
    
    for m in range(1, M):
        base = base_f(m)
        L = m+1
        X = Matrix([x**i for i in range(L)])
        Y = Matrix([(x+i+base)**m for i in range(L)])
        A,B = A_B = calc_A_B(m, base)
        ABs.append(A_B)
        print(m, B, A, sep='\n'*2)

        AY = A*Y
        AY = AY.expand()
        BX = B*X
        BX = BX.expand()
        Y = Y.expand()
        assert AY == X
        assert Y == BX


        if base == 0:
            Ds = [a/-row for row, a in enumerate(A[1:, -1]*factorial(m), 1)]
            Ds_ls.append(Ds)
            print(Ds)
            pre_y0 = Matrix([i**m for i in range(m)])
            Ds2 = pre_A*pre_y0/m
            assert list(Ds2) == Ds
        
        pre_A = A
        #print('\n')

    if base == 0: print(Ds_ls)
    return ABs


'''
t(10, lambda m:0)
    D(m,j) = [m/2,...]
        [[0], 
        [1/2, 0], 
        [1, -1/3, 0], 
        [3/2, -11/12, 1/2, 0], 
        [2, -7/4, 5/3, -6/5, 0], 
        [5/2, -17/6, 15/4, -137/30, 4, 0], 
        [3, -25/6, 7, -58/5, 84/5, -120/7, 0], 
        [7/2, -23/4, 35/3, -967/40, 469/10, -1089/14, 90, 0], 
        [4, -91/12, 18, -1069/24, 534/5, -29531/126, 3044/7, -560, 0]]
        
'''


def sympy_fraction2py_fraction(fr):
    N, D = map(int, sympy.fraction(fr))
    return Fraction(N, D)
def sympy_mx2lsls(mx):
    R = mx.rows
    C = mx.cols
    lsls = [list(mx[r, :]) for r in range(R)]
    return lsls

##def list_map(f, ls):
##    return list(map(f, ls))
##def ls_of_sympy_fraction2py_fraction(ls):
##    return list(map(sympy_fraction2py_fraction, ls))

def lsls_of_sympy_fraction2py_fraction(lsls):
    return deep_map(2, sympy_fraction2py_fraction, lsls)
    return list(map(ls_of_sympy_fraction2py_fraction, ls))
def sympy_mx2lsls_with_fraction_convert(mx):
    return lsls_of_sympy_fraction2py_fraction(sympy_mx2lsls(mx))


def show_As(M):
    ABs = t(M, lambda m:Fraction(-m,2))
    #_ABs = deep_map(2, sympy_mx2lsls_with_fraction_convert, ABs)
    As = [A for A,B in ABs]
    _As = deep_map(1, sympy_mx2lsls_with_fraction_convert, As)
    pprint.pprint(_As)
    return ABs, As, _As

#ABs, As, _As = show_As(10)
#As = list(map(Matrix, _As))

from _data_of_expand_xn import As, _As

def show_nth_row(As, r):
    Ds = []
    
    for m, A in enumerate(As):
        if m < r: continue
        print('\n m =', m)
        row = A[r, :]
        ls = list(row)
        g = gcd(ls)
        
        #print(1/g, factorial(m))
        #error: assert 1/g % factorial(m) == 0
        
        #print(1/g)
        #print('{}/{}'.format(row/g, 1/g))
        D_g = 1/g
        Ds.append(D_g/factorial(m))
        common_D = factorial(m)*lcm([2**m, m+1])
        common2_D = factorial(m+1)*2**m

        k = D_g/common_D
        r2k = [1,1,3,1,15,3,21,3,45,5]
        if r < len(r2k):
            D_g = r2k[r]*common_D
        if r==2:
            b = D_g == 12*factorial(m)
            assert row[0] == (-1)**(m+1)*(m-2)/D_g
        elif r==3:
            b = D_g == 8*factorial(m)
        elif r==4:
            b = D_g == 240*factorial(m)
        elif r==5:
            b = D_g == 96*factorial(m)
        elif r==6:
            b = D_g == 1344*factorial(m) #{2: 6, 3: 1, 7: 1}
        elif r==7:
            b = D_g == 384*factorial(m) # {2: 7, 3: 1}
        if 2 <= r <= 7:
            assert b is True
            
        #assert D_g % common_D == 0
        assert D_g*g % 1 == 0

        Ns = row * D_g
        print('{Ns}/{D}, {D}/{m}!/2**m = {q}'.format(
            Ns=Ns, D=D_g, m=m, q=D_g/common_D))
        if m > r:
            print('ts = [0]preNs - preNs[0] = {}'.format(sub_0Ns_Ns0))
            print('Ns - ts = {}'.format(Ns-sub_0Ns_Ns0))
        _Ns = list(Ns)
        _0Ns = [0]+_Ns
        _Ns0 = _Ns+[0]
        _0Ns, _Ns0 = map(Matrix, (_0Ns, _Ns0))
        sub_0Ns_Ns0 = (_0Ns - _Ns0).H

        #print('[0]row - row[0] = {}'.format(sub_0Ns_Ns0))
        if r==2:
            if m > r:
                assert next_Ns == Ns
                
            neg_dNs = [(-1)**(m+1-i)*C(m+1, i) for i in range(m+2)]
            print('(-1)**(m+1-i)C(m+1, \\i) = {}'.format(neg_dNs))
            next_Ns = sub_0Ns_Ns0 - Matrix([neg_dNs])
            #print('next Ns = {}'.format(next_Ns))
            
        #print(row/factorial(m))

    D = lcm(Ds)
    print('lcm(D/m!) =', D, fi(D))
    return r, D, fi(D)
    '''
    (0, 1, {})
    (1, 2, {2: 1})
    (2, 12, {2: 2, 3: 1})
    (3, 8, {2: 3})
    (4, 240, {2: 4, 3: 1, 5: 1})
    (5, 96, {2: 5, 3: 1})
    (6, 1344, {2: 6, 3: 1, 7: 1})
    (7, 384, {2: 7, 3: 1})
    (8, 11520, {2: 8, 3: 2, 5: 1})
    (9, 2560, {2: 9, 5: 1})'''
    

#show_nth_row(As, 4)
orgprint = print
print = noprint
for r in range(10):
    orgprint(show_nth_row(As, r))
            
'''
first row = [C(m,i) (-1)**(m-i)]/m!
a(m,r,i) = A(m, r, i)/g(m,r)
g(m,0) = m!
a(m, 0, i) = 0 if i < 0 for m >= 0
a(m, 0, i) = a(m-1, 0, i-1) - a(m-1, 0, i) for m>=1
    = C(m,i) (-1)**(m-i) for m>=1

show_nth_row(As, 0)

 m = 0
1
[1]

 m = 1
1
[-1, 1]

 m = 2
2
[1, -2, 1]

 m = 3
6
[-1, 3, -3, 1]

 m = 4
24
[1, -4, 6, -4, 1]

 m = 5
120
[-1, 5, -10, 10, -5, 1]

 m = 6
720
[1, -6, 15, -20, 15, -6, 1]

 m = 7
5040
[-1, 7, -21, 35, -35, 21, -7, 1]

 m = 8
40320
[1, -8, 28, -56, 70, -56, 28, -8, 1]

 m = 9
362880
[-1, 9, -36, 84, -126, 126, -84, 36, -9, 1]


'''



'''
a(m,r,i) = A(m, r, i)/g(m,r)
g(m,1) = 2*m!
a(m, 1, i) = 0 if i < 0 for m >= 1
a(m, 1, i) = a(m-1, 1, i-1) - a(m-1, 1, i) for m>=2


show_nth_row(As, 1)

 m = 1
2
[1, 1]

 m = 2
4
[-1, 0, 1]

 m = 3
12
[1, -1, -1, 1]

 m = 4
48
[-1, 2, 0, -2, 1]

 m = 5
240
[1, -3, 2, 2, -3, 1]

 m = 6
1440
[-1, 4, -5, 0, 5, -4, 1]

 m = 7
10080
[1, -5, 9, -5, -5, 9, -5, 1]

 m = 8
80640
[-1, 6, -14, 14, 0, -14, 14, -6, 1]

 m = 9
725760
[1, -7, 20, -28, 14, 14, -28, 20, -7, 1]
'''


'''
show_nth_row(As, 2)
[(-1)**(m+1)C(m-2,1), ...]/(12*m!)
row[0] = (-1)**(m+1)(m-2)/(12*m!)
a(m, 2, i) = a(m-1, 2, i-1) - a(m-1, 2, i) - (-1)**(m-i)C(m,i) for m>=3
    = a(m-1, 2, i-1) - a(m-1, 2, i) - a(m, 0, i) for m>=3

x - a(2, 0, i) = x - [1,-2,1] == [0, 24, 0]==>> x = [1,22,1] == [0]row - row[0]
==>> fail: xxxxx row = [-1,1] xxxxxxxxxx
A(m,2) = a(m,2)/24 = [0,1,0] = [1,-1,1] - [1,-2,1] = [1,-1,1] - ([0 -1 1] - [-1 1 0])


 m = 2
[0, 24, 0]/24
[0]row - row[0] = [0, -24, 24, 0]
(-1)**(m+1-i)C(m+1, \i) = [-1, 3, -3, 1]

 m = 3
[1, -27, 27, -1]/72
[0]row - row[0] = [-1, 28, -54, 28, -1]
(-1)**(m+1-i)C(m+1, \i) = [1, -4, 6, -4, 1]

 m = 4
[-2, 32, -60, 32, -2]/288
[0]row - row[0] = [2, -34, 92, -92, 34, -2]
(-1)**(m+1-i)C(m+1, \i) = [-1, 5, -10, 10, -5, 1]

 m = 5
[3, -39, 102, -102, 39, -3]/1440
[0]row - row[0] = [-3, 42, -141, 204, -141, 42, -3]
(-1)**(m+1-i)C(m+1, \i) = [1, -6, 15, -20, 15, -6, 1]

 m = 6
[-4, 48, -156, 224, -156, 48, -4]/8640
[0]row - row[0] = [4, -52, 204, -380, 380, -204, 52, -4]
(-1)**(m+1-i)C(m+1, \i) = [-1, 7, -21, 35, -35, 21, -7, 1]

 m = 7
[5, -59, 225, -415, 415, -225, 59, -5]/60480
[0]row - row[0] = [-5, 64, -284, 640, -830, 640, -284, 64, -5]
(-1)**(m+1-i)C(m+1, \i) = [1, -8, 28, -56, 70, -56, 28, -8, 1]

 m = 8
[-6, 72, -312, 696, -900, 696, -312, 72, -6]/483840
[0]row - row[0] = [6, -78, 384, -1008, 1596, -1596, 1008, -384, 78, -6]
(-1)**(m+1-i)C(m+1, \i) = [-1, 9, -36, 84, -126, 126, -84, 36, -9, 1]

 m = 9
[7, -87, 420, -1092, 1722, -1722, 1092, -420, 87, -7]/4354560
[0]row - row[0] = [-7, 94, -507, 1512, -2814, 3444, -2814, 1512, -507, 94, -7]
(-1)**(m+1-i)C(m+1, \i) = [1, -10, 45, -120, 210, -252, 210, -120, 45, -10, 1]
'''

'''
show_nth_row(As, 3)
D = 8*m!
a(m, 3, i) = a(m-1, 3, i-1) - a(m-1, 3, i) - a(m, 1, i) for m>=4
a(3, 3) - a(3, 1) = [-3, 27, 27, -3] - [1, -1, -1, 1]


 m = 3
[-3, 27, 27, -3]/48

 m = 4
[4, -32, 0, 32, -4]/192
ts = [0]preNs - preNs[0] = [3, -30, 0, 30, -3]
Ns - ts = [1, -2, 0, 2, -1]

 m = 5
[-5, 39, -34, -34, 39, -5]/960
ts = [0]preNs - preNs[0] = [-4, 36, -32, -32, 36, -4]
Ns - ts = [-1, 3, -2, -2, 3, -1]

 m = 6
[6, -48, 78, 0, -78, 48, -6]/5760
ts = [0]preNs - preNs[0] = [5, -44, 73, 0, -73, 44, -5]
Ns - ts = [1, -4, 5, 0, -5, 4, -1]

 m = 7
[-7, 59, -135, 83, 83, -135, 59, -7]/40320
ts = [0]preNs - preNs[0] = [-6, 54, -126, 78, 78, -126, 54, -6]
Ns - ts = [-1, 5, -9, 5, 5, -9, 5, -1]

 m = 8
[8, -72, 208, -232, 0, 232, -208, 72, -8]/322560
ts = [0]preNs - preNs[0] = [7, -66, 194, -218, 0, 218, -194, 66, -7]
Ns - ts = [1, -6, 14, -14, 0, 14, -14, 6, -1]

 m = 9
[-9, 87, -300, 468, -246, -246, 468, -300, 87, -9]/2903040
ts = [0]preNs - preNs[0] = [-8, 80, -280, 440, -232, -232, 440, -280, 80, -8]
Ns - ts = [-1, 7, -20, 28, -14, -14, 28, -20, 7, -1]

'''


'''
first row = [C(m,i)/m! (-1)**(m-i)]

[odd m]
    last row: D = 2 .** [1,4,8,11,16,...]
========

1

[-1/2, 1]
[ 1/2, 1]

[ -1,   1]
[1/2, 1/2] D=2**1


2

[1, -2, 1]
[0,  0, 1]
[1,  2, 1]

[ 1/2, -1, 1/2]
[-1/4,  0, 1/4]
[   0,  1,   0]


3

[-27/8, 27/4, -9/2, 1]
[ -1/8,  3/4, -3/2, 1]
[  1/8,  3/4,  3/2, 1]
[ 27/8, 27/4,  9/2, 1]

[ -1/6,   1/2,  -1/2,   1/6]
[ 1/12, -1/12, -1/12,  1/12]
[ 1/72,  -3/8,   3/8, -1/72]
[-1/16,  9/16,  9/16, -1/16]  D=2**4


4

[16, -32, 24, -8, 1]
[ 1,  -4,  6, -4, 1]
[ 0,   0,  0,  0, 1]
[ 1,   4,  6,  4, 1]
[16,  32, 24,  8, 1]

[  1/24, -1/6,   1/4,  -1/6,   1/24]
[ -1/48, 1/24,     0, -1/24,   1/48]
[-1/144,  1/9, -5/24,   1/9, -1/144]
[  1/48, -1/6,     0,   1/6,  -1/48]
[     0,    0,     1,     0,      0]


5

[-3125/32, 3125/16, -625/4, 125/2, -25/2, 1]
[ -243/32,  405/16, -135/4,  45/2, -15/2, 1]
[   -1/32,    5/16,   -5/4,   5/2,  -5/2, 1]
[    1/32,    5/16,    5/4,   5/2,   5/2, 1]
[  243/32,  405/16,  135/4,  45/2,  15/2, 1]
[ 3125/32, 3125/16,  625/4, 125/2,  25/2, 1]

[ -1/120,    1/24,   -1/12,    1/12,   -1/24,  1/120]   D=5!
[  1/240,   -1/80,   1/120,   1/120,   -1/80,  1/240]     /2
[  1/480, -13/480,  17/240, -17/240,  13/480, -1/480]     /2
[ -1/192,  13/320, -17/480, -17/480,  13/320, -1/192]     /1
[-3/3200,   5/384,  -15/64,   15/64,  -5/384, 3/3200]     /(20/3)  = 25*4*32
[  3/256, -25/256,  75/128,  75/128, -25/256,  3/256]   D=2**8


6

[729, -1458, 1215, -540, 135, -18, 1]
[ 64,  -192,  240, -160,  60, -12, 1]
[  1,    -6,   15,  -20,  15,  -6, 1]
[  0,     0,    0,    0,   0,   0, 1]
[  1,     6,   15,   20,  15,   6, 1]
[ 64,   192,  240,  160,  60,  12, 1]
[729,  1458, 1215,  540, 135,  18, 1]

[  1/720, -1/120,    1/48,   -1/36,    1/48, -1/120,   1/720]
[-1/1440,  1/360,  -1/288,       0,   1/288, -1/360,  1/1440]
[-1/2160,  1/180, -13/720,   7/270, -13/720,  1/180, -1/2160]
[  1/960, -1/120,  13/960,       0, -13/960,  1/120,  -1/960]
[ 1/2700, -1/200,    1/20, -49/540,    1/20, -1/200,  1/2700]
[ -1/360,   1/40,    -1/8,       0,     1/8,  -1/40,   1/360]
[      0,      0,       0,       1,       0,      0,       0]


7

[-823543/128, 823543/64, -352947/32, 84035/16, -12005/8, 1029/4, -49/2, 1]
[ -78125/128, 109375/64,  -65625/32, 21875/16,  -4375/8,  525/4, -35/2, 1]
[  -2187/128,   5103/64,   -5103/32,  2835/16,   -945/8,  189/4, -21/2, 1]
[     -1/128,      7/64,     -21/32,    35/16,    -35/8,   21/4,  -7/2, 1]
[      1/128,      7/64,      21/32,    35/16,     35/8,   21/4,   7/2, 1]
[   2187/128,   5103/64,    5103/32,  2835/16,    945/8,  189/4,  21/2, 1]
[  78125/128, 109375/64,   65625/32, 21875/16,   4375/8,  525/4,  35/2, 1]
[ 823543/128, 823543/64,  352947/32, 84035/16,  12005/8, 1029/4,  49/2, 1]

[   -1/5040,      1/720,     -1/240,       1/144,      -1/144,     1/240,      -1/720,    1/5040]
[   1/10080,    -1/2016,     1/1120,     -1/2016,     -1/2016,    1/1120,     -1/2016,   1/10080]
[   1/12096,  -59/60480,     5/1344,   -83/12096,    83/12096,   -5/1344,    59/60480,  -1/12096]
[   -1/5760,   59/40320,     -3/896,    83/40320,    83/40320,    -3/896,    59/40320,   -1/5760]
[-37/403200, 499/403200, -433/44800,  1891/80640, -1891/80640, 433/44800, -499/403200, 37/403200]
[  37/69120, -499/96768,  433/17920, -1891/96768, -1891/96768, 433/17920,  -499/96768,  37/69120]
[   5/50176,    -7/5120,    35/3072,   -175/1024,    175/1024,  -35/3072,      7/5120,  -5/50176]
[   -5/2048,    49/2048,  -245/2048,   1225/2048,   1225/2048, -245/2048,     49/2048,   -5/2048]     D=2**11


8

[65536, -131072, 114688, -57344, 17920, -3584, 448, -32, 1]
[ 6561,  -17496,  20412, -13608,  5670, -1512, 252, -24, 1]
[  256,   -1024,   1792,  -1792,  1120,  -448, 112, -16, 1]
[    1,      -8,     28,    -56,    70,   -56,  28,  -8, 1]
[    0,       0,      0,      0,     0,     0,   0,   0, 1]
[    1,       8,     28,     56,    70,    56,  28,   8, 1]
[  256,    1024,   1792,   1792,  1120,   448, 112,  16, 1]
[ 6561,   17496,  20412,  13608,  5670,  1512, 252,  24, 1]
[65536,  131072, 114688,  57344, 17920,  3584, 448,  32, 1]

[ 1/40320, -1/5040,     1/1440,    -1/720,     1/576,    -1/720,     1/1440,  -1/5040,  1/40320]
[-1/80640, 1/13440,    -1/5760,    1/5760,         0,   -1/5760,     1/5760, -1/13440,  1/80640]
[-1/80640,  1/6720,  -13/20160,  29/20160,   -5/2688,  29/20160,  -13/20160,   1/6720, -1/80640]
[ 1/40320, -1/4480,   13/20160, -29/40320,         0,  29/40320,  -13/20160,   1/4480, -1/40320]
[ 1/57600, -1/4200, 169/100800, -61/12600,   13/1920, -61/12600, 169/100800,  -1/4200,  1/57600]
[-1/11520,  1/1120, -169/40320,  61/10080,         0, -61/10080,  169/40320,  -1/1120,  1/11520]
[-1/31360,  1/2205,     -1/280,      1/35, -205/4032,      1/35,     -1/280,   1/2205, -1/31360]
[  1/2240,  -1/210,       1/40,     -1/10,         0,      1/10,      -1/40,    1/210,  -1/2240]
[       0,       0,          0,         0,         1,         0,          0,        0,        0]


9

[-387420489/512, 387420489/256, -43046721/32, 11160261/16, -3720087/16, 413343/8, -15309/2, 729, -81/2, 1]
[ -40353607/512,  51883209/256,  -7411887/32,  2470629/16, -1058841/16, 151263/8,  -7203/2, 441, -63/2, 1]
[  -1953125/512,   3515625/256,   -703125/32,   328125/16,  -196875/16,  39375/8,  -2625/2, 225, -45/2, 1]
[    -19683/512,     59049/256,    -19683/32,    15309/16,   -15309/16,   5103/8,   -567/2,  81, -27/2, 1]
[        -1/512,         9/256,        -9/32,       21/16,      -63/16,     63/8,    -21/2,   9,  -9/2, 1]
[         1/512,         9/256,         9/32,       21/16,       63/16,     63/8,     21/2,   9,   9/2, 1]
[     19683/512,     59049/256,     19683/32,    15309/16,    15309/16,   5103/8,    567/2,  81,  27/2, 1]
[   1953125/512,   3515625/256,    703125/32,   328125/16,   196875/16,  39375/8,   2625/2, 225,  45/2, 1]
[  40353607/512,  51883209/256,   7411887/32,  2470629/16,  1058841/16, 151263/8,   7203/2, 441,  63/2, 1]
[ 387420489/512, 387420489/256,  43046721/32, 11160261/16,  3720087/16, 413343/8,  15309/2, 729,  81/2, 1]

[     -1/362880,      1/40320,     -1/10080,         1/4320,       -1/2880,       1/2880,       -1/4320,      1/10080,     -1/40320,        1/362880]
[      1/725760,    -1/103680,      1/36288,       -1/25920,       1/51840,      1/51840,      -1/25920,      1/36288,    -1/103680,        1/725760]
[      1/622080,  -29/1451520,      1/10368,      -13/51840,     41/103680,   -41/103680,      13/51840,     -1/10368,   29/1451520,       -1/622080]
[     -1/322560,    29/967680,     -5/48384,       13/80640,    -41/483840,   -41/483840,      13/80640,     -5/48384,    29/967680,       -1/322560]
[  -47/17418240,  221/5806080, -377/1451520,   1229/1451520, -4307/2903040, 4307/2903040, -1229/1451520,  377/1451520, -221/5806080,     47/17418240]
[    47/3870720, -221/1658880,   377/580608,   -1229/967680,  4307/5806080, 4307/5806080,  -1229/967680,   377/580608, -221/1658880,      47/3870720]
[3229/487710720, -589/6021120,   227/301056, -26611/5806080,   4561/430080, -4561/430080, 26611/5806080,  -227/301056,  589/6021120, -3229/487710720]
[-3229/46448640,   589/737280, -1135/258048,  26611/1658880,  -4561/368640, -4561/368640, 26611/1658880, -1135/258048,   589/737280,  -3229/46448640]
[   -35/2654208,    45/229376,    -63/40960,      245/24576,   -2205/16384,   2205/16384,    -245/24576,     63/40960,   -45/229376,      35/2654208]
[      35/65536,   -405/65536,    567/16384,    -2205/16384,   19845/32768,  19845/32768,   -2205/16384,    567/16384,   -405/65536,        35/65536]   D=2**16


'''

















































































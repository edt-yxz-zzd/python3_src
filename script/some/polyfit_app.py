
'''
(1+z)**x = sum C(x,i) z**i {int i>=0}
partial sum:
poly(m, z, x) = sum C(x, i) z**i {i=0..m} for [integer m >=0]
    = sum c(m,z,j) x**j {j=0..m}


C(x, i) = fall(x,i)/i! = sum x**j (-1)**(i-j) Stirling[i,j] {1\j} / i!
sum C(x, i) z**i {i=0..m} = sum sum x**j (-1)**(i-j) Stirling[i,j] {1\j} / i! z**i {i=0..m}
    = sum sum (-1)**(i-j) Stirling[i,j] / i! z**i {i=0..m} x**j {1\j}
    = sum sum (-1)**(i-j) Stirling[i,j] / i! z**i {i=j..m} x**j {j=0..m}
    = sum sum (-1)**(i-j) Stirling[i,j] / i! z**(i-j) {i=j..m} z**j x**j {j=0..m}
    = sum sum Stirling[i+j,j] / (i+j)! (-z)**i {i=0..m-j} z**j x**j {j=0..m}
    = sum sum Stirling[i+j,j] m!/(i+j)! (-z)**i {i=0..m-j} /m! z**j x**j {j=0..m}

c(m,z,j) = sum Stirling[i+j,j] m!/(i+j)! (-z)**i {i=0..m-j} /m! z**j
g(m,z,j) = c(m,z,m-j) = sum Stirling[i+m-j,m-j] m!/(i+m-j)! (-z)**i {i=0..j} /m! z**(m-j)
    = sum Stirling[j-i+m-j,m-j] m!/(j-i+m-j)! (-z)**(j-i) {j-i=0..j} /m! z**(m-j)
    = sum Stirling[m-i,m-j] m!/(m-i)! (-z)**(j-i) {i=0..j} /m! z**(m-j)
let g(m,z,j) = sum P(j,i;m) (-z)**(j-i) {i=0..j} /m! z**(m-j)
P(j,i;m) is a polynomial of m, 0 <= i <= j <= m
P(j,i;m) = Stirling[m-i,m-j] m!/(m-i)!
Stirling_polynomial(n, x) = Stirling[x,x-n]/fall(x, n+1)
    = Stirling[x,x-n]/x/(x-1)/.../(x-n)
degree(Stirling_polynomial(n, x), x) = n-1
    n >= 1
    Stirling_polynomial(n, i) = Stirling[i,i-n]/fall(i, n+1) for i = (n+1)..(2n)
Stirling[x,x-n] = Stirling_polynomial(n, x)*fall(x, n+1)
     = Stirling_polynomial(x-(x-n), x)*fall(x, x-(x-n)+1)

Stirling[m-i,m-j] = Stirling[m-i,(m-i)-(j-i)]
    = Stirling_polynomial(j-i, m-i)*fall(m-i, j-i+1)
    = Stirling_polynomial(j-i, m-i)*(m-i)!/(m-j-1)!

P(j,i;m) = Stirling[m-i,m-j] m!/(m-i)!
    = Stirling_polynomial(j-i, m-i)*(m-i)!/(m-j-1)! m!/(m-i)!
    = Stirling_polynomial(j-i, m-i) fall(m,j+1)


let c(m,z,j) = z**j fall(m,m-j) sum p(i,m)/2**i/i! (-z)**i {i=0..m-j}
    = sum p(i,m)/2**i/i! (-z)**i {i=0..m-j} m!/j! z**j
    = sum p(i,m)/2**i/i! m! m!/j! (-z)**i {i=0..m-j} /m! z**j
p(i,m)/2**i/i! m! m!/j! = Stirling[i+j,j] m!/(i+j)!



guess p(i,x)/2**i/i! = Stirling_polynomial(i+1, x) = Stirling[x, x-(i+1)]/fall(x, i+2)
    poly(m, z, x) = sum C(x, i) z**i {i=0..m}
        = sum sum Stirling_polynomial(i+1, m) fall(m,m-j) (-z)**i {i=0..m-j} z**j x**j {j=0..m}
        = sum sum Stirling[m, m-(i+1)]/fall(m, i+2) fall(m,m-j) (-z)**i {i=0..m-j} z**j x**j {j=0..m}
        = sum sum Stirling[m, m-(i+1)] fall(m-(i+2),m-j-(i+2)) (-z)**i {i=0..m-j} z**j x**j {j=0..m}

------------------------
'''



'''
prove:
poly(x) = sum C(x, i) {i=0..m} for [integer m >=0]
= 1/m! * sum (-1)**k * fall(2k, k) * C(m, 2k) * rise(x+1-k, m-k) {1\k, k>=0}
= sum (-1)**k * fall(2k, k) /k!/(m-k)! * rise(x+1-k, m-k) {k=0..m//2}
= sum (-1)**k * C(2k, k) * C(x+1-k+(m-k)-1, m-k) {k=0..m//2}
= sum (-1)**k * C(2k, k) * C(x+m-2k, m-k) {k=0..m//2}
'''







from numpy import polyfit
#from sympy.matrices import *
from sympy.functions.combinatorial.factorials import factorial
from sympy.ntheory import factorint
from sympy import factor, Sum, floor, LC
from sympy.mpmath import polyval
from sympy.abc import x,y,a,b,c,m,n,k, t,z
from polyfit import one, C, make_poly, Vandermonde_matrix, poly_xys2coeffs, \
     factor_poly_by_coeffs as factor_poly_by_cs, ints_polyfit
from powers import rise, fall
from Stirling_numbers import Stirling_circle

left = Sum(C(x, k), (k, 0, m))
right = Sum((-1)**k * C(2*k, k) * C(x+m-2*k, m-k), (k, 0, floor(m/2)))
##r = (left-right).doit() # fail : stack overflow
##print(r)



'''
polyfit

numpy.polynomial.polynomial.polyvander
Vandermonde matrix

poly(x) = sum C(x, i) {i=0..m} for [integer m >=0]
[integer n][0<=n<=m] ==>>
    poly(n) = sum C(n, i) {i=0..m} = poly(n) = sum C(n, i) {i=0..n}
    = (1+1)**n = 2**n

poly(x) = 2**x for x in [0:m+1)
degree(poly(x)) = m

L = len(xs) = m+1
Vandermonde_matrix(xs) = [[x**i for i in reversed(range(m+1))] for x in xs]
V*cs = ys
cs = inv(V)*ys


mpmath.polyval(ctx, coeffs, x, derivative=False)

'''


def poly_coef_by_polyfit(m):
    x = [i for i in range(m+1)]
    y = [2**i for i in range(m+1)]

    r = polyfit(x, y, m)
    return r


def poly_coef_by_Vandermonde(m, t):
    xs = [i for i in range(m+1)]
    ys = [t**i for i in range(m+1)]
    return poly_xys2coeffs(xs, ys)


def calc_factorialM_cs_ls(M, t):
    ls = []
    for m in range(M):
        cs = poly_coef_by_Vandermonde(m, t)*factorial(m)
        cs = list(map(factor, cs))
        print(cs)
        ls.append(cs)
    return ls

#print(calc_factorialM_cs_ls(20, 2))
'''
print(calc_factorialM_cs_ls(20, 2))
m = deg
+rise(x+1, m)
-fall(m,2)*rise(x+1-1, m-1) [m>=1]
+fall(m,2)*rise(x+1-2, m-2) [m==4]
+fall(m,3)*rise(x+1-2, m-2) [m==5]
//-fall(m-1,2)*rise(x-1, m-3)

[1]
[1, 1]
[1, 1, 2] = (x-1)(x-2)+4x = (x+1)(x+2)-2x = rise(x+1, 2) - rise(1,2)rise(x,1)
    = rise(x+1, 2) - fall(2,2)rise(x,1)
[1, 0, 5, 6] = (x+1)(x**2-x+6) // x**2-x+6 = (x-2)(x-3)+4x = (x+2)(x+3)-6x
    // org = (x+1)(x+2)(x+3)-(x+1)6x = rise(x+1,3) - 3!rise(x, 2)
    = rise(x+1,3) - rise(2,2)rise(x, 2)
    = rise(x+1,3) - fall(3,2)rise(x+1-1, 3-1)
[1, -2, 11, 14, 24] = sum s[i] {i=1..2} + 12x(x-1) // tail = fall(m,2)rise(x+1-2, m-2)
[1, -5, 25, 5, 94, 120] = rise(x+1,5) - fall(5,2)rise(x,5-1) + fall(5,3)rise(x-1,5-2) - (12*x**2 - 12*x) // tail = 12x(x-1) = fall(4,2)rise(x-1,2) // org = rise(x+1,5) - fall(5,2)rise(x+1-1,5-1) + fall(5,3)rise(x+1-2,5-2) - fall(4,2)rise(x-1,2)
[1, -9, 55, -75, 304, 444, 720]
[1, -14, 112, -350, 1099, 364, 3828, 5040]
[1, -20, 210, -1064, 3969, -4340, 15980, 25584, 40320]
[1, -27, 366, -2646, 12873, -31563, 79064, 34236, 270576, 362880]
[1, -35, 600, -5790, 36813, -140595, 408050, -382060, 1368936, 2342880, 3628800]
[1, -44, 935, -11550, 94083, -497112, 1870385, -3920950, 8550916, 4429656, 29400480, 39916800]
[1, -54, 1397, -21450, 218823, -1508562, 7374191, -23551110, 58206676, -48306984, 173699712, 312888960, 479001600]
[1, -65, 2015, -37609, 470613, -4081935, 25378925, -110205667, 351042406, -657328100, 1303568760, 771653376, 4546558080, 6227020800]
[1, -77, 2821, -62881, 947947, -10081071, 77889383, -435638203, 1793239448, -5043110072, 11111159696, -8346754416, 30605906304, 57424792320, 87178291200]
[1, -90, 3850, -101010, 1806532, -23093070, 217195550, -1513113030, 7874749883, -29764775040, 84074954600, -144321864960, 266955481584, 175622947200, 948550176000, 1307674368000]
[1, -104, 5140, -156800, 3283462, -49653968, 558606620, -4732499200, 30421321073, -146807212552, 533435706440, -1361614072000, 2747845864464, -1894529909376, 7149130156800, 13869128448000, 20922789888000]
[1, -119, 6732, -236300, 5728422, -101133578, 1340913964, -13560847300, 105500691153, -629738825287, 2878800864576, -9793160049400, 25218570009424, -40364369180016, 70785236377728, 50800930272000, 256697973504000, 355687428096000]
[1, -135, 8670, -347004, 9643182, -196539210, 3032818360, -36066242628, 333829643433, -2409092861175, 13536546442770, -58410050621832, 192735768345184, -455365645674480, 856755330487200, -547468189825536, 2137822335475200, 4264876094976000, 6402373705728000]
[1, -152, 11001, -498066, 15730746, -366568824, 6512692282, -89937154892, 976314776541, -8367990183696, 56644976370333, -300727299134418, 1243334078735176, -3889547993504528, 9298765013106384, -14042902728462624, 23610353987137536, 18241636315507200, 87435019510272000, 121645100408832000]

'''

def prime_powers(n):
    d = factorint(n)
    ls = list(d.items())
    ls.sort()
    return ls

factorialM_cs_ls = [[1], [1, 1], [1, 1, 2], [1, 0, 5, 6], [1, -2, 11, 14, 24], [1, -5, 25, 5, 94, 120], [1, -9, 55, -75, 304, 444, 720], [1, -14, 112, -350, 1099, 364, 3828, 5040], [1, -20, 210, -1064, 3969, -4340, 15980, 25584, 40320], [1, -27, 366, -2646, 12873, -31563, 79064, 34236, 270576, 362880], [1, -35, 600, -5790, 36813, -140595, 408050, -382060, 1368936, 2342880, 3628800], [1, -44, 935, -11550, 94083, -497112, 1870385, -3920950, 8550916, 4429656, 29400480, 39916800], [1, -54, 1397, -21450, 218823, -1508562, 7374191, -23551110, 58206676, -48306984, 173699712, 312888960, 479001600], [1, -65, 2015, -37609, 470613, -4081935, 25378925, -110205667, 351042406, -657328100, 1303568760, 771653376, 4546558080, 6227020800], [1, -77, 2821, -62881, 947947, -10081071, 77889383, -435638203, 1793239448, -5043110072, 11111159696, -8346754416, 30605906304, 57424792320, 87178291200], [1, -90, 3850, -101010, 1806532, -23093070, 217195550, -1513113030, 7874749883, -29764775040, 84074954600, -144321864960, 266955481584, 175622947200, 948550176000, 1307674368000], [1, -104, 5140, -156800, 3283462, -49653968, 558606620, -4732499200, 30421321073, -146807212552, 533435706440, -1361614072000, 2747845864464, -1894529909376, 7149130156800, 13869128448000, 20922789888000], [1, -119, 6732, -236300, 5728422, -101133578, 1340913964, -13560847300, 105500691153, -629738825287, 2878800864576, -9793160049400, 25218570009424, -40364369180016, 70785236377728, 50800930272000, 256697973504000, 355687428096000], [1, -135, 8670, -347004, 9643182, -196539210, 3032818360, -36066242628, 333829643433, -2409092861175, 13536546442770, -58410050621832, 192735768345184, -455365645674480, 856755330487200, -547468189825536, 2137822335475200, 4264876094976000, 6402373705728000], [1, -152, 11001, -498066, 15730746, -366568824, 6512692282, -89937154892, 976314776541, -8367990183696, 56644976370333, -300727299134418, 1243334078735176, -3889547993504528, 9298765013106384, -14042902728462624, 23610353987137536, 18241636315507200, 87435019510272000, 121645100408832000]]

def factor_cs_ls(cs_ls):
    for cs in cs_ls:
        print([prime_powers(c) for c in cs])


'''
factor_cs_ls(factorialM_cs_ls)
[[]]
[[], []]
[[], [], [(2, 1)]]
[[], [(0, 1)], [(5, 1)], [(2, 1), (3, 1)]]
[[], [(-1, 1), (2, 1)], [(11, 1)], [(2, 1), (7, 1)], [(2, 3), (3, 1)]]
[[], [(-1, 1), (5, 1)], [(5, 2)], [(5, 1)], [(2, 1), (47, 1)], [(2, 3), (3, 1), (5, 1)]]
[[], [(-1, 1), (3, 2)], [(5, 1), (11, 1)], [(-1, 1), (3, 1), (5, 2)], [(2, 4), (19, 1)], [(2, 2), (3, 1), (37, 1)], [(2, 4), (3, 2), (5, 1)]]
[[], [(-1, 1), (2, 1), (7, 1)], [(2, 4), (7, 1)], [(-1, 1), (2, 1), (5, 2), (7, 1)], [(7, 1), (157, 1)], [(2, 2), (7, 1), (13, 1)], [(2, 2), (3, 1), (11, 1), (29, 1)], [(2, 4), (3, 2), (5, 1), (7, 1)]]
[[], [(-1, 1), (2, 2), (5, 1)], [(2, 1), (3, 1), (5, 1), (7, 1)], [(-1, 1), (2, 3), (7, 1), (19, 1)], [(3, 4), (7, 2)], [(-1, 1), (2, 2), (5, 1), (7, 1), (31, 1)], [(2, 2), (5, 1), (17, 1), (47, 1)], [(2, 4), (3, 1), (13, 1), (41, 1)], [(2, 7), (3, 2), (5, 1), (7, 1)]]
[[], [(-1, 1), (3, 3)], [(2, 1), (3, 1), (61, 1)], [(-1, 1), (2, 1), (3, 3), (7, 2)], [(3, 1), (7, 1), (613, 1)], [(-1, 1), (3, 3), (7, 1), (167, 1)], [(2, 3), (9883, 1)], [(2, 2), (3, 3), (317, 1)], [(2, 4), (3, 2), (1879, 1)], [(2, 7), (3, 4), (5, 1), (7, 1)]]
[[], [(-1, 1), (5, 1), (7, 1)], [(2, 3), (3, 1), (5, 2)], [(-1, 1), (2, 1), (3, 1), (5, 1), (193, 1)], [(3, 1), (7, 1), (1753, 1)], [(-1, 1), (3, 1), (5, 1), (7, 1), (13, 1), (103, 1)], [(2, 1), (5, 2), (8161, 1)], [(-1, 1), (2, 2), (5, 1), (7, 1), (2729, 1)], [(2, 3), (3, 2), (19013, 1)], [(2, 5), (3, 2), (5, 1), (1627, 1)], [(2, 8), (3, 4), (5, 2), (7, 1)]]
[[], [(-1, 1), (2, 2), (11, 1)], [(5, 1), (11, 1), (17, 1)], [(-1, 1), (2, 1), (3, 1), (5, 2), (7, 1), (11, 1)], [(3, 1), (11, 1), (2851, 1)], [(-1, 1), (2, 3), (3, 1), (7, 1), (11, 1), (269, 1)], [(5, 1), (11, 1), (31, 1), (1097, 1)], [(-1, 1), (2, 1), (5, 2), (11, 1), (7129, 1)], [(2, 2), (11, 1), (31, 1), (6269, 1)], [(2, 3), (3, 2), (7, 1), (11, 1), (17, 1), (47, 1)], [(2, 5), (3, 2), (5, 1), (17, 1), (1201, 1)], [(2, 8), (3, 4), (5, 2), (7, 1), (11, 1)]]
[[], [(-1, 1), (2, 1), (3, 3)], [(11, 1), (127, 1)], [(-1, 1), (2, 1), (3, 1), (5, 2), (11, 1), (13, 1)], [(3, 1), (11, 1), (19, 1), (349, 1)], [(-1, 1), (2, 1), (3, 2), (11, 1), (19, 1), (401, 1)], [(11, 1), (23, 1), (29147, 1)], [(-1, 1), (2, 1), (3, 2), (5, 1), (11, 1), (23789, 1)], [(2, 2), (11, 1), (1087, 1), (1217, 1)], [(-1, 1), (2, 3), (3, 1), (11, 1), (182981, 1)], [(2, 7), (3, 2), (131, 1), (1151, 1)], [(2, 7), (3, 3), (5, 1), (19, 1), (953, 1)], [(2, 10), (3, 5), (5, 2), (7, 1), (11, 1)]]
[[], [(-1, 1), (5, 1), (13, 1)], [(5, 1), (13, 1), (31, 1)], [(-1, 1), (11, 1), (13, 1), (263, 1)], [(3, 1), (11, 1), (13, 1), (1097, 1)], [(-1, 1), (3, 1), (5, 1), (11, 2), (13, 1), (173, 1)], [(5, 2), (11, 1), (13, 1), (31, 1), (229, 1)], [(-1, 1), (11, 1), (13, 1), (770669, 1)], [(2, 1), (11, 1), (13, 2), (263, 1), (359, 1)], [(-1, 1), (2, 2), (5, 2), (11, 1), (13, 1), (43, 1), (1069, 1)], [(2, 3), (3, 1), (5, 1), (13, 1), (41, 1), (89, 1), (229, 1)], [(2, 8), (3, 2), (13, 1), (25763, 1)], [(2, 7), (3, 3), (5, 1), (263111, 1)], [(2, 10), (3, 5), (5, 2), (7, 1), (11, 1), (13, 1)]]
[[], [(-1, 1), (7, 1), (11, 1)], [(7, 1), (13, 1), (31, 1)], [(-1, 1), (7, 1), (13, 1), (691, 1)], [(7, 1), (11, 1), (13, 1), (947, 1)], [(-1, 1), (3, 3), (7, 1), (11, 1), (13, 1), (373, 1)], [(11, 1), (13, 1), (43, 1), (53, 1), (239, 1)], [(-1, 1), (7, 1), (11, 1), (13, 1), (29, 1), (43, 1), (349, 1)], [(2, 3), (7, 1), (11, 1), (13, 1), (61, 1), (3671, 1)], [(-1, 1), (2, 3), (7, 1), (11, 1), (13, 2), (193, 1), (251, 1)], [(2, 4), (7, 1), (13, 1), (1019, 1), (7489, 1)], [(-1, 1), (2, 4), (3, 1), (7, 1), (11, 1), (13, 1), (19, 1), (41, 1), (223, 1)], [(2, 7), (3, 2), (26567627, 1)], [(2, 8), (3, 3), (5, 1), (7, 1), (17, 1), (13963, 1)], [(2, 11), (3, 5), (5, 2), (7, 2), (11, 1), (13, 1)]]
[[], [(-1, 1), (2, 1), (3, 2), (5, 1)], [(2, 1), (5, 2), (7, 1), (11, 1)], [(-1, 1), (2, 1), (3, 1), (5, 1), (7, 1), (13, 1), (37, 1)], [(2, 2), (7, 2), (13, 1), (709, 1)], [(-1, 1), (2, 1), (3, 1), (5, 1), (7, 1), (11, 1), (13, 1), (769, 1)], [(2, 1), (5, 2), (11, 1), (13, 1), (37, 1), (821, 1)], [(-1, 1), (2, 1), (3, 2), (5, 1), (11, 1), (13, 1), (89, 1), (1321, 1)], [(7, 1), (11, 1), (13, 1), (59, 1), (133337, 1)], [(-1, 1), (2, 7), (3, 1), (5, 1), (7, 1), (11, 1), (13, 1), (17, 1), (911, 1)], [(2, 3), (5, 2), (7, 2), (13, 1), (137, 1), (4817, 1)], [(-1, 1), (2, 8), (3, 1), (5, 1), (7, 1), (13, 1), (413009, 1)], [(2, 4), (3, 2), (11, 1), (647, 1), (260483, 1)], [(2, 7), (3, 3), (5, 2), (17, 1), (119569, 1)], [(2, 8), (3, 4), (5, 3), (7, 1), (23, 1), (2273, 1)], [(2, 11), (3, 6), (5, 3), (7, 2), (11, 1), (13, 1)]]
[[], [(-1, 1), (2, 3), (13, 1)], [(2, 2), (5, 1), (257, 1)], [(-1, 1), (2, 7), (5, 2), (7, 2)], [(2, 1), (7, 1), (13, 1), (18041, 1)], [(-1, 1), (2, 4), (7, 1), (13, 1), (67, 1), (509, 1)], [(2, 2), (5, 1), (11, 1), (13, 1), (173, 1), (1129, 1)], [(-1, 1), (2, 8), (5, 2), (11, 1), (13, 1), (5171, 1)], [(11, 1), (13, 2), (16364347, 1)], [(-1, 1), (2, 3), (7, 1), (11, 1), (13, 1), (18332569, 1)], [(2, 3), (5, 1), (7, 1), (13, 1), (59, 1), (2483869, 1)], [(-1, 1), (2, 6), (5, 3), (7, 1), (13, 2), (143873, 1)], [(2, 4), (3, 1), (57246788843, 1)], [(-1, 1), (2, 7), (3, 2), (13, 1), (47, 1), (73, 1), (36871, 1)], [(2, 8), (3, 3), (5, 2), (41372281, 1)], [(2, 11), (3, 4), (5, 3), (7, 1), (95549, 1)], [(2, 15), (3, 6), (5, 3), (7, 2), (11, 1), (13, 1)]]
[[], [(-1, 1), (7, 1), (17, 1)], [(2, 2), (3, 2), (11, 1), (17, 1)], [(-1, 1), (2, 2), (5, 2), (17, 1), (139, 1)], [(2, 1), (3, 1), (7, 1), (17, 1), (71, 1), (113, 1)], [(-1, 1), (2, 1), (7, 1), (13, 1), (17, 1), (32687, 1)], [(2, 2), (13, 1), (17, 1), (1516871, 1)], [(-1, 1), (2, 2), (5, 2), (7, 1), (11, 1), (13, 2), (17, 1), (613, 1)], [(3, 2), (11, 1), (13, 1), (17, 1), (4822007, 1)], [(-1, 1), (11, 1), (13, 1), (17, 1), (37, 1), (7001221, 1)], [(2, 6), (3, 1), (7, 1), (13, 1), (17, 1), (9692149, 1)], [(-1, 1), (2, 3), (5, 2), (7, 1), (13, 2), (17, 1), (409, 1), (5953, 1)], [(2, 4), (11, 1), (17, 1), (389, 1), (21667523, 1)], [(-1, 1), (2, 4), (3, 1), (7, 1), (17, 1), (31139, 1), (226937, 1)], [(2, 7), (3, 2), (17, 1), (2963, 1), (1219859, 1)], [(2, 8), (3, 3), (5, 3), (17, 1), (1753, 1), (1973, 1)], [(2, 11), (3, 4), (5, 3), (7, 1), (1768477, 1)], [(2, 15), (3, 6), (5, 3), (7, 2), (11, 1), (13, 1), (17, 1)]]
[[], [(-1, 1), (3, 3), (5, 1)], [(2, 1), (3, 1), (5, 1), (17, 2)], [(-1, 1), (2, 2), (3, 6), (7, 1), (17, 1)], [(2, 1), (3, 1), (17, 1), (94541, 1)], [(-1, 1), (2, 1), (3, 4), (5, 1), (7, 1), (17, 1), (2039, 1)], [(2, 3), (5, 1), (11, 1), (13, 1), (17, 1), (31189, 1)], [(-1, 1), (2, 2), (3, 3), (13, 1), (17, 1), (877, 1), (1723, 1)], [(3, 1), (11, 2), (13, 1), (17, 1), (4161271, 1)], [(-1, 1), (3, 4), (5, 2), (7, 1), (11, 1), (13, 1), (17, 1), (69911, 1)], [(2, 1), (3, 1), (5, 1), (13, 1), (17, 1), (2041711379, 1)], [(-1, 1), (2, 3), (3, 4), (7, 1), (13, 1), (17, 1), (6173, 1), (9439, 1)], [(2, 5), (17, 1), (23, 1), (15404073557, 1)], [(-1, 1), (2, 4), (3, 3), (5, 1), (17, 1), (103, 1), (227, 1), (530389, 1)], [(2, 5), (3, 2), (5, 2), (17, 1), (6999635053, 1)], [(-1, 1), (2, 9), (3, 4), (7, 1), (17, 1), (110932027, 1)], [(2, 9), (3, 4), (5, 2), (11, 1), (919, 1), (203971, 1)], [(2, 12), (3, 6), (5, 3), (7, 1), (1632341, 1)], [(2, 16), (3, 8), (5, 3), (7, 2), (11, 1), (13, 1), (17, 1)]]
[[], [(-1, 1), (2, 3), (19, 1)], [(3, 1), (19, 1), (193, 1)], [(-1, 1), (2, 1), (3, 1), (17, 1), (19, 1), (257, 1)], [(2, 1), (3, 1), (17, 1), (19, 1), (8117, 1)], [(-1, 1), (2, 3), (3, 1), (17, 1), (19, 1), (47287, 1)], [(2, 1), (17, 1), (19, 1), (23, 1), (438329, 1)], [(-1, 1), (2, 2), (13, 1), (17, 2), (19, 1), (37, 1), (8513, 1)], [(3, 1), (13, 1), (17, 1), (19, 1), (77503753, 1)], [(-1, 1), (2, 4), (3, 1), (11, 1), (13, 1), (17, 1), (19, 1), (31, 1), (109, 1), (1117, 1)], [(3, 1), (13, 1), (17, 1), (19, 1), (463, 1), (9712103, 1)], [(-1, 1), (2, 1), (3, 1), (13, 1), (17, 1), (19, 1), (23, 1), (2143, 1), (242173, 1)], [(2, 3), (17, 1), (19, 1), (379, 1), (1269568441, 1)], [(-1, 1), (2, 4), (17, 1), (19, 1), (117619, 1), (6398809, 1)], [(2, 4), (3, 2), (17, 1), (19, 1), (199921848407, 1)], [(-1, 1), (2, 5), (3, 2), (17, 2), (19, 1), (58337, 1), (152219, 1)], [(2, 12), (3, 7), (19, 1), (1009, 1), (137483, 1)], [(2, 9), (3, 4), (5, 2), (19, 1), (926008991, 1)], [(2, 12), (3, 6), (5, 3), (7, 1), (29, 1), (71, 1), (16253, 1)], [(2, 16), (3, 8), (5, 3), (7, 2), (11, 1), (13, 1), (17, 1), (19, 1)]]
'''




def factor_poly_ls(cs_ls):
    for cs in cs_ls:
        print(factor_poly_by_cs(cs))
#factor_poly_ls(factorialM_cs_ls)

def rise_sub_poly_cs(cs, x=x):
    deg = len(cs)-1
    f = make_poly(cs, x)
    '''
m = deg
+rise(x+1, m)
    = +1 C(m, 0)*rise(x+1-0, m-0)
-fall(m,2)*rise(x+1-1, m-1) [m>=1]
    = -2 C(m,2)*rise(x+1-1, m-1)

m >= 4
12 * 5 * 3 * 7/3 * 2 * 9/5 ...
    = 12 * 5/1 * 6/2 * 7/3 * 8/4 * 9/5 ... = 12 fall(4+k, k)/k!
    = 12 fall(m, m-4)/(m-4)! = 12 C(m, 4)
+12 C(m,4)*rise(x+1-2, m-2) [m>=4]
        //+fall(m,2)*rise(x+1-2, m-2) [m==4]
        //+fall(m,3)*rise(x+1-2, m-2) [m==5]

m >= 6
-120 * 7 * 4 * 3 * 5/2 ...
    = -120 * 7/1 * 8/2 * 9/3 * 10/4 ...
    = -120 * C(m, 6)
-120*rise(x+1-3, m-3)

m >= 8
1680 * 9 * 5...
    = 1680 * 9/1 * 10/2 ...
    = 1680 * C(m, 8)
+1680 C(m, 8)*rise(x+1-4, m-4)

m >= 10
-30240

0  1   2    3      4      5
+1 -2 +12  -120  1680    -30240
1  2  3*4 4*5*6 5*6*7*8  6*7*8*9*10
a(n) = rise(n+1, n) for n >= 0
    = fall(2n, n) for n >= 0


poly(x) = sum (-1)**k * fall(2k, k) * C(m, 2k) * rise(x+1-k, m-k) {1\k, k>=0}
    = sum ... {k=0..m//2}
'''
    r1 = rise(x+1, deg)
    #rise(x+1,5) - fall(5,2)rise(x+1-1,5-1) + fall(5,3)rise(x+1-2,5-2) - fall(4,2)rise(x-1,2)
    r2 = -fall(deg,2)*rise(x+1-1, deg-1) if deg>=1 else 0
    #r3 = fall(deg,2)*rise(x+1-2, deg-2) if deg==4 else 0
    #r4 = fall(deg,3)*rise(x+1-2, deg-2) if deg>=5 else 0
    
    r3 = 12*C(deg,4)*rise(x+1-2, deg-2) if deg>=4 else 0
    r4 = -120*C(deg,6)*rise(x+1-3, deg-3) if deg>=6 else 0
    r5 = 1680*C(deg,8)*rise(x+1-4, deg-4) if deg>=8 else 0
    #print(deg, r4)

    ans = (r1+r2+r3+r4+r5-f).expand()
    m = deg
    fit = sum((-1)**k * fall(2*k, k) * C(m, 2*k) * rise(x+1-k, m-k) for k in range(m//2+1))
    ans = (fit-f).expand()
##    for p in [f,r,ans]:
##        print(p)
##    print('-------------')
    return ans


def rise_sub_poly_cs_ls(cs_ls):
    for cs in cs_ls:
        print(rise_sub_poly_cs(cs))

#rise_sub_poly_cs_ls(factorialM_cs_ls)

#print(calc_factorialM_cs_ls(20, t=1+z))
'''
poly(m, x) = sum C(x, i) z**i {i=0..m} for [integer m >=0]
= sum x**j sum sign(?)K(m,m-j,i)z**i {i=0..m} {j=0..m}
= sum x**(m-col) sum sign(?)K(m,col,exp)z**exp {exp=0..m} {col=0..m}
= sum x**(m-col) z**(m-col) sum sign(?)K(m,col,exp)z**(exp-(m-col)) {exp=m-col..m} {col=0..m}
= sum (zx)**(m-col) sum (-1)**i K(m,col,m-col+i)z**i {i=0..col} {col=0..m}
= sum (zx)**(m-col) sum fall(m,col)/II (-2n) {n=1..i} (m**i+O(m**(i-1))) z**i {i=0..col} {col=0..m}
= sum (zx)**(m-col) sum fall(m,col)/(-2)**i/i! (m**i+O(m**(i-1))) z**i {i=0..col} {col=0..m}
commonK(m, col, m-col+i) = fall(m,col)/(-2)**i/i!
tailPoly(m | col, i) = tailPoly(m, col, i) = sign(?)K(m,col, m-col+i)/commonK(m, col, m-col+i)
degree(tailPoly(m | col, i) about m) = i



print(calc_factorialM_cs_ls(20, t=1+z))

K(row, col, exp) = K(rowth poly, columnth coeff#of x**(m-column), exp#coeff of z**exp)
0 <= col <= m
m-col <= exp <= m ==>> 0 <= m-exp <= col <= m
exp = m-k = m-(col-i)



K(m, col, exp < m-col) = 0
K(m, col, m-col) = fall(m,col)
K(m, col, m-col+1) = fall(m,col+1)/2
K(m, col, m-col+2) = fall(m,col+1)(3exp-1)/24 = fall(m,col+1)(exp-1/3)/2/4
K(m, col, m-col+3) = fall(m,col+1)fall(m+3-col,2)/48 = .../2/4/6

K(m, col, m-col+i) = fall(m,col+1)(m**(i-1)+O(m**(i-2)))/II (2n) {n=1..i} for i in [1:col+1)

K(m, col, m) = ? * C(m, col+1)
K(m, col, exp > m) = 0

sign(m, col, exp) = (-1)**(col+m-exp) = (-1)**(col+col-i) = (-1)**i

0! C(m,0)z**m
    -C(m,2)z**m + 1! C(m,1)z**(m-1)
        K(m,2,m)z**m - 3 C(m,3)z**(m-1) + 2! C(m,2)z**(m-2);
        K(m,2,m) = (8+3*i)*3*(i+3)*(i+1)*(i+2)/72 [i==m-3]
        = (3*m-1)3m(m-2)(m-1)/72 = C(3m,2)C(m-1,2)/18
        = fall(m,3)*(3m-1)/24
            -K(m,3,m)z**m + K(m,3,m-1)z**(m-1) - K(m,3,m-2)z**(m-2) + K(m,3,m-3)z**(m-3);
            K(m,3,m) = m(m-1) m(m-1)(m-2)(m-3)/48 = fall(m,2)fall(m,4)/48
            K(m,3,m-1)=(3*m-4) m(m-1)(m-2)(m-3)/24 = (3*m-4)fall(m,4)/24
            K(m,3,m-2)=m(m-1)(m-2)(m-3)/2 = 12 C(m,4) = 4! C(m,4) /2 = fall(m,4)/2
            K(m,3,m-3)=m(m-1)(m-2) = fall(m,3) = 3! C(m,3)
                K(m,4,m)z**m - K(m,4,m-1)z**(m-1) + K(m,4,m-2)z**(m-2) - K(m,4,m-3)z**(m-3) + K(m,4,m-4)z**(m-4);
                K(m,4,m) = C(m,5)*(15*m**3 - 30*m**2 + 5*m + 2)/48
                    = fall(m,5)*(m**3+...)15/48/5! = fall(m,5)*(m**3+...)/48/2/4
                15*m**3 - 30*m**2 + 5*m + 2 = 15mm(m-2) + 5(m-2) + 12 = 5(3mm+1)(m-2)+12
                K(m,4,m-1) = fall(m,5)*(m-2)*(m-1)/48 = fall(m-1,2)fall(m,5)/48
                K(m,4,m-2) = fall(m,5)(3(m-2)-1) /24
                K(m,4,m-3) = fall(m,5)/2
                K(m,4,m-4) = fall(m,4)




[1],
[z, 1],
[z**2, -z*(z - 2), 2],
[z**3, -3*z**2*(z - 1), z*(2*z**2 - 3*z + 6), 6],
[z**4, -2*z**3*(3*z - 2), z**2*(11*z**2 - 12*z + 12), -2*z*(3*z**3 - 4*z**2 + 6*z - 12), 24],
[z**5, -5*z**4*(2*z - 1), 5*z**3*(7*z**2 - 6*z + 4), -5*z**2*(10*z**3 - 11*z**2 + 12*z - 12), 2*z*(12*z**4 - 15*z**3 + 20*z**2 - 30*z + 60), 120],
[z**6, -3*z**5*(5*z - 2), 5*z**4*(17*z**2 - 12*z + 6), -15*z**3*(15*z**3 - 14*z**2 + 12*z - 8), 2*z**2*(137*z**4 - 150*z**3 + 165*z**2 - 180*z + 180), -12*z*(10*z**5 - 12*z**4 + 15*z**3 - 20*z**2 + 30*z - 60), 720],
[z**7, -7*z**6*(3*z - 1), 7*z**5*(25*z**2 - 15*z + 6), -35*z**4*(21*z**3 - 17*z**2 + 12*z - 6), 7*z**3*(232*z**4 - 225*z**3 + 210*z**2 - 180*z + 120), -14*z**2*(126*z**5 - 137*z**4 + 150*z**3 - 165*z**2 + 180*z - 180), 12*z*(60*z**6 - 70*z**5 + 84*z**4 - 105*z**3 + 140*z**2 - 210*z + 420), 5040],
[z**8, -4*z**7*(7*z - 2), 14*z**6*(23*z**2 - 12*z + 4), -56*z**5*(35*z**3 - 25*z**2 + 15*z - 6), 7*z**4*(967*z**4 - 840*z**3 + 680*z**2 - 480*z + 240), -28*z**3*(469*z**5 - 464*z**4 + 450*z**3 - 420*z**2 + 360*z - 240), 4*z**2*(3267*z**6 - 3528*z**5 + 3836*z**4 - 4200*z**3 + 4620*z**2 - 5040*z + 5040), -48*z*(105*z**7 - 120*z**6 + 140*z**5 - 168*z**4 + 210*z**3 - 280*z**2 + 420*z - 840), 40320],
[z**9, -9*z**8*(4*z - 1), 6*z**7*(91*z**2 - 42*z + 12), -126*z**6*(36*z**3 - 23*z**2 + 12*z - 4), 21*z**5*(1069*z**4 - 840*z**3 + 600*z**2 - 360*z + 144), -63*z**4*(1068*z**5 - 967*z**4 + 840*z**3 - 680*z**2 + 480*z - 240), 4*z**3*(29531*z**6 - 29547*z**5 + 29232*z**4 - 28350*z**3 + 26460*z**2 - 22680*z + 15120), -36*z**2*(3044*z**7 - 3267*z**6 + 3528*z**5 - 3836*z**4 + 4200*z**3 - 4620*z**2 + 5040*z - 5040), 144*z*(280*z**8 - 315*z**7 + 360*z**6 - 420*z**5 + 504*z**4 - 630*z**3 + 840*z**2 - 1260*z + 2520), 362880],
[z**10, -5*z**9*(9*z - 2), 30*z**8*(29*z**2 - 12*z + 3), -30*z**7*(315*z**3 - 182*z**2 + 84*z - 24), 21*z**6*(3013*z**4 - 2160*z**3 + 1380*z**2 - 720*z + 240), -105*z**5*(2565*z**5 - 2138*z**4 + 1680*z**3 - 1200*z**2 + 720*z - 288), 10*z**4*(72368*z**6 - 67284*z**5 + 60921*z**4 - 52920*z**3 + 42840*z**2 - 30240*z + 15120), -20*z**3*(58635*z**7 - 59062*z**6 + 59094*z**5 - 58464*z**4 + 56700*z**3 - 52920*z**2 + 45360*z - 30240), 72*z**2*(14258*z**8 - 15220*z**7 + 16335*z**6 - 17640*z**5 + 19180*z**4 - 21000*z**3 + 23100*z**2 - 25200*z + 25200), -1440*z*(252*z**9 - 280*z**8 + 315*z**7 - 360*z**6 + 420*z**5 - 504*z**4 + 630*z**3 - 840*z**2 + 1260*z - 2520), 3628800],
[z**11, -11*z**10*(5*z - 1), 55*z**9*(24*z**2 - 9*z + 2), -330*z**8*(55*z**3 - 29*z**2 + 12*z - 3), 33*z**7*(4781*z**4 - 3150*z**3 + 1820*z**2 - 840*z + 240), -231*z**6*(3905*z**5 - 3013*z**4 + 2160*z**3 - 1380*z**2 + 720*z - 240), 55*z**5*(62126*z**6 - 53865*z**5 + 44898*z**4 - 35280*z**3 + 25200*z**2 - 15120*z + 6048), -110*z**4*(76450*z**7 - 72368*z**6 + 67284*z**5 - 60921*z**4 + 52920*z**3 - 42840*z**2 + 30240*z - 15120), 44*z**3*(289854*z**8 - 293175*z**7 + 295310*z**6 - 295470*z**5 + 292320*z**4 - 283500*z**3 + 264600*z**2 - 226800*z + 151200), -792*z**2*(13420*z**9 - 14258*z**8 + 15220*z**7 - 16335*z**6 + 17640*z**5 - 19180*z**4 + 21000*z**3 - 23100*z**2 + 25200*z - 25200), 1440*z*(2520*z**10 - 2772*z**9 + 3080*z**8 - 3465*z**7 + 3960*z**6 - 4620*z**5 + 5544*z**4 - 6930*z**3 + 9240*z**2 - 13860*z + 27720), 39916800],
[z**12, -6*z**11*(11*z - 2), 11*z**10*(175*z**2 - 60*z + 12), -330*z**9*(99*z**3 - 48*z**2 + 18*z - 4), 33*z**8*(10831*z**4 - 6600*z**3 + 3480*z**2 - 1440*z + 360), -198*z**7*(13321*z**5 - 9562*z**4 + 6300*z**3 - 3640*z**2 + 1680*z - 480), 11*z**6*(1212685*z**6 - 984060*z**5 + 759276*z**4 - 544320*z**3 + 347760*z**2 - 181440*z + 60480), -330*z**5*(139381*z**7 - 124252*z**6 + 107730*z**5 - 89796*z**4 + 70560*z**3 - 50400*z**2 + 30240*z - 12096), 44*z**4*(2392229*z**8 - 2293500*z**7 + 2171040*z**6 - 2018520*z**5 + 1827630*z**4 - 1587600*z**3 + 1285200*z**2 - 907200*z + 453600), -264*z**3*(571659*z**9 - 579708*z**8 + 586350*z**7 - 590620*z**6 + 590940*z**5 - 584640*z**4 + 567000*z**3 - 529200*z**2 + 453600*z - 302400), 288*z**2*(418555*z**10 - 442860*z**9 + 470514*z**8 - 502260*z**7 + 539055*z**6 - 582120*z**5 + 632940*z**4 - 693000*z**3 + 762300*z**2 - 831600*z + 831600), -17280*z*(2310*z**11 - 2520*z**10 + 2772*z**9 - 3080*z**8 + 3465*z**7 - 3960*z**6 + 4620*z**5 - 5544*z**4 + 6930*z**3 - 9240*z**2 + 13860*z - 27720), 479001600],
[z**13, -13*z**12*(6*z - 1), 13*z**11*(209*z**2 - 66*z + 12), -143*z**10*(390*z**3 - 175*z**2 + 60*z - 12), 429*z**9*(1747*z**4 - 990*z**3 + 480*z**2 - 180*z + 40), -429*z**8*(16146*z**5 - 10831*z**4 + 6600*z**3 - 3480*z**2 + 1440*z - 360), 143*z**7*(314617*z**6 - 239778*z**5 + 172116*z**4 - 113400*z**3 + 65520*z**2 - 30240*z + 8640), -143*z**6*(1441050*z**7 - 1212685*z**6 + 984060*z**5 - 759276*z**4 + 544320*z**3 - 347760*z**2 + 181440*z - 60480), 286*z**5*(2297926*z**8 - 2090715*z**7 + 1863780*z**6 - 1615950*z**5 + 1346940*z**4 - 1058400*z**3 + 756000*z**2 - 453600*z + 181440), -572*z**4*(2472054*z**9 - 2392229*z**8 + 2293500*z**7 - 2171040*z**6 + 2018520*z**5 - 1827630*z**4 + 1587600*z**3 - 1285200*z**2 + 907200*z - 453600), 312*z**3*(6190896*z**10 - 6288249*z**9 + 6376788*z**8 - 6449850*z**7 + 6496820*z**6 - 6500340*z**5 + 6431040*z**4 - 6237000*z**3 + 5821200*z**2 - 4989600*z + 3326400), -3744*z**2*(397020*z**11 - 418555*z**10 + 442860*z**9 - 470514*z**8 + 502260*z**7 - 539055*z**6 + 582120*z**5 - 632940*z**4 + 693000*z**3 - 762300*z**2 + 831600*z - 831600), 17280*z*(27720*z**12 - 30030*z**11 + 32760*z**10 - 36036*z**9 + 40040*z**8 - 45045*z**7 + 51480*z**6 - 60060*z**5 + 72072*z**4 - 90090*z**3 + 120120*z**2 - 180180*z + 360360), 6227020800],
[z**14, -7*z**13*(13*z - 2), 91*z**12*(41*z**2 - 12*z + 2), -91*z**11*(1001*z**3 - 418*z**2 + 132*z - 24), 1001*z**10*(1473*z**4 - 780*z**3 + 350*z**2 - 120*z + 24), -3003*z**9*(5551*z**5 - 3494*z**4 + 1980*z**3 - 960*z**2 + 360*z - 80), 143*z**8*(944311*z**6 - 678132*z**5 + 454902*z**4 - 277200*z**3 + 146160*z**2 - 60480*z + 15120), -1001*z**7*(790153*z**7 - 629234*z**6 + 479556*z**5 - 344232*z**4 + 226800*z**3 - 131040*z**2 + 60480*z - 17280), 2002*z**6*(1666393*z**8 - 1441050*z**7 + 1212685*z**6 - 984060*z**5 + 759276*z**4 - 544320*z**3 + 347760*z**2 - 181440*z + 60480), -4004*z**5*(2486939*z**9 - 2297926*z**8 + 2090715*z**7 - 1863780*z**6 + 1615950*z**5 - 1346940*z**4 + 1058400*z**3 - 756000*z**2 + 453600*z - 181440), 728*z**4*(27903507*z**10 - 27192594*z**9 + 26314519*z**8 - 25228500*z**7 + 23881440*z**6 - 22203720*z**5 + 20103930*z**4 - 17463600*z**3 + 14137200*z**2 - 9979200*z + 4989600), -4368*z**3*(6088992*z**11 - 6190896*z**10 + 6288249*z**9 - 6376788*z**8 + 6449850*z**7 - 6496820*z**6 + 6500340*z**5 - 6431040*z**4 + 6237000*z**3 - 5821200*z**2 + 4989600*z - 3326400), 576*z**2*(34379790*z**12 - 36128820*z**11 + 38088505*z**10 - 40300260*z**9 + 42816774*z**8 - 45705660*z**7 + 49054005*z**6 - 52972920*z**5 + 57597540*z**4 - 63063000*z**3 + 69369300*z**2 - 75675600*z + 75675600), -241920*z*(25740*z**13 - 27720*z**12 + 30030*z**11 - 32760*z**10 + 36036*z**9 - 40040*z**8 + 45045*z**7 - 51480*z**6 + 60060*z**5 - 72072*z**4 + 90090*z**3 - 120120*z**2 + 180180*z - 360360), 87178291200],
[z**15, -15*z**14*(7*z - 1), 35*z**13*(143*z**2 - 39*z + 6), -1365*z**12*(105*z**3 - 41*z**2 + 12*z - 2), 91*z**11*(30217*z**4 - 15015*z**3 + 6270*z**2 - 1980*z + 360), -15015*z**10*(2485*z**5 - 1473*z**4 + 780*z**3 - 350*z**2 + 120*z - 24), 715*z**9*(515261*z**6 - 349713*z**5 + 220122*z**4 - 124740*z**3 + 60480*z**2 - 22680*z + 5040), -2145*z**8*(1250095*z**7 - 944311*z**6 + 678132*z**5 - 454902*z**4 + 277200*z**3 - 146160*z**2 + 60480*z - 15120), 1001*z**7*(14394928*z**8 - 11852295*z**7 + 9438510*z**6 - 7193340*z**5 + 5163480*z**4 - 3402000*z**3 + 1965600*z**2 - 907200*z + 259200), -30030*z**6*(1886892*z**9 - 1666393*z**8 + 1441050*z**7 - 1212685*z**6 + 984060*z**5 - 759276*z**4 + 544320*z**3 - 347760*z**2 + 181440*z - 60480), 1820*z**5*(87759124*z**10 - 82068987*z**9 + 75831558*z**8 - 68993595*z**7 + 61504740*z**6 - 53326350*z**5 + 44449020*z**4 - 34927200*z**3 + 24948000*z**2 - 14968800*z + 5987520), -10920*z**4*(28478870*z**11 - 27903507*z**10 + 27192594*z**9 - 26314519*z**8 + 25228500*z**7 - 23881440*z**6 + 22203720*z**5 - 20103930*z**4 + 17463600*z**3 - 14137200*z**2 + 9979200*z - 4989600), 144*z**3*(2723311096*z**12 - 2770491360*z**11 + 2816857680*z**10 - 2861153295*z**9 + 2901438540*z**8 - 2934681750*z**7 + 2956053100*z**6 - 2957654700*z**5 + 2926123200*z**4 - 2837835000*z**3 + 2648646000*z**2 - 2270268000*z + 1513512000), -8640*z**2*(32808524*z**13 - 34379790*z**12 + 36128820*z**11 - 38088505*z**10 + 40300260*z**9 - 42816774*z**8 + 45705660*z**7 - 49054005*z**6 + 52972920*z**5 - 57597540*z**4 + 63063000*z**3 - 69369300*z**2 + 75675600*z - 75675600), 3628800*z*(24024*z**14 - 25740*z**13 + 27720*z**12 - 30030*z**11 + 32760*z**10 - 36036*z**9 + 40040*z**8 - 45045*z**7 + 51480*z**6 - 60060*z**5 + 72072*z**4 - 90090*z**3 + 120120*z**2 - 180180*z + 360360), 1307674368000],
[z**16, -8*z**15*(15*z - 2), 20*z**14*(329*z**2 - 84*z + 12), -560*z**13*(390*z**3 - 143*z**2 + 39*z - 6), 182*z**12*(26921*z**4 - 12600*z**3 + 4920*z**2 - 1440*z + 240), -1456*z**11*(53955*z**5 - 30217*z**4 + 15015*z**3 - 6270*z**2 + 1980*z - 360), 2860*z**10*(324509*z**6 - 208740*z**5 + 123732*z**4 - 65520*z**3 + 29400*z**2 - 10080*z + 2016), -11440*z**9*(717450*z**7 - 515261*z**6 + 349713*z**5 - 220122*z**4 + 124740*z**3 - 60480*z**2 + 22680*z - 5040), 143*z**8*(382035871*z**8 - 300022800*z**7 + 226634640*z**6 - 162751680*z**5 + 109176480*z**4 - 66528000*z**3 + 35078400*z**2 - 14515200*z + 3628800), -8008*z**7*(34066335*z**9 - 28789856*z**8 + 23704590*z**7 - 18877020*z**6 + 14386680*z**5 - 10326960*z**4 + 6804000*z**3 - 3931200*z**2 + 1814400*z - 518400), 3640*z**6*(277382447*z**10 - 249069744*z**9 + 219963876*z**8 - 190218600*z**7 + 160074420*z**6 - 129895920*z**5 + 100224432*z**4 - 71850240*z**3 + 45904320*z**2 - 23950080*z + 7983360), -29120*z**5*(92953755*z**11 - 87759124*z**10 + 82068987*z**9 - 75831558*z**8 + 68993595*z**7 - 61504740*z**6 + 53326350*z**5 - 44449020*z**4 + 34927200*z**3 - 24948000*z**2 + 14968800*z - 5987520), 48*z**4*(105354077163*z**12 - 103663086800*z**11 + 101568765480*z**10 - 98981042160*z**9 + 95784849160*z**8 - 91831740000*z**7 + 86928441600*z**6 - 80821540800*z**5 + 73178305200*z**4 - 63567504000*z**3 + 51459408000*z**2 - 36324288000*z + 18162144000), -1152*z**3*(5352272235*z**13 - 5446622192*z**12 + 5540982720*z**11 - 5633715360*z**10 + 5722306590*z**9 - 5802877080*z**8 + 5869363500*z**7 - 5912106200*z**6 + 5915309400*z**5 - 5852246400*z**4 + 5675670000*z**3 - 5297292000*z**2 + 4540536000*z - 3027024000), 34560*z**2*(125554485*z**14 - 131234096*z**13 + 137519160*z**12 - 144515280*z**11 + 152354020*z**10 - 161201040*z**9 + 171267096*z**8 - 182822640*z**7 + 196216020*z**6 - 211891680*z**5 + 230390160*z**4 - 252252000*z**3 + 277477200*z**2 - 302702400*z + 302702400), -29030400*z*(45045*z**15 - 48048*z**14 + 51480*z**13 - 55440*z**12 + 60060*z**11 - 65520*z**10 + 72072*z**9 - 80080*z**8 + 90090*z**7 - 102960*z**6 + 120120*z**5 - 144144*z**4 + 180180*z**3 - 240240*z**2 + 360360*z - 720720), 20922789888000],
[z**17, -17*z**16*(8*z - 1), 68*z**15*(125*z**2 - 30*z + 4), -340*z**14*(952*z**3 - 329*z**2 + 84*z - 12), 238*z**13*(35269*z**4 - 15600*z**3 + 5720*z**2 - 1560*z + 240), -3094*z**12*(50728*z**5 - 26921*z**4 + 12600*z**3 - 4920*z**2 + 1440*z - 240), 884*z**11*(2471755*z**6 - 1510740*z**5 + 846076*z**4 - 420420*z**3 + 175560*z**2 - 55440*z + 10080), -48620*z**10*(474232*z**7 - 324509*z**6 + 208740*z**5 - 123732*z**4 + 65520*z**3 - 29400*z**2 + 10080*z - 2016), 2431*z**9*(76492463*z**8 - 57396000*z**7 + 41220880*z**6 - 27977040*z**5 + 17609760*z**4 - 9979200*z**3 + 4838400*z**2 - 1814400*z + 403200), -2431*z**8*(471781688*z**9 - 382035871*z**8 + 300022800*z**7 - 226634640*z**6 + 162751680*z**5 - 109176480*z**4 + 66528000*z**3 - 35078400*z**2 + 14515200*z - 3628800), 12376*z**7*(434269835*z**10 - 374729685*z**9 + 316688416*z**8 - 260750490*z**7 + 207647220*z**6 - 158253480*z**5 + 113596560*z**4 - 74844000*z**3 + 43243200*z**2 - 19958400*z + 5702400), -61880*z**6*(304808776*z**11 - 277382447*z**10 + 249069744*z**9 - 219963876*z**8 + 190218600*z**7 - 160074420*z**6 + 129895920*z**5 - 100224432*z**4 + 71850240*z**3 - 45904320*z**2 + 23950080*z - 7983360), 272*z**5*(177816210417*z**12 - 169175834100*z**11 + 159721605680*z**10 - 149365556340*z**9 + 138013435560*z**8 - 125568342900*z**7 + 111938626800*z**6 - 97053957000*z**5 + 80897216400*z**4 - 63567504000*z**3 + 45405360000*z**2 - 27243216000*z + 10897286400), -816*z**4*(106712927544*z**13 - 105354077163*z**12 + 103663086800*z**11 - 101568765480*z**10 + 98981042160*z**9 - 95784849160*z**8 + 91831740000*z**7 - 86928441600*z**6 + 80821540800*z**5 - 73178305200*z**4 + 63567504000*z**3 - 51459408000*z**2 + 36324288000*z - 18162144000), 19584*z**3*(5258999430*z**14 - 5352272235*z**13 + 5446622192*z**12 - 5540982720*z**11 + 5633715360*z**10 - 5722306590*z**9 + 5802877080*z**8 - 5869363500*z**7 + 5912106200*z**6 - 5915309400*z**5 + 5852246400*z**4 - 5675670000*z**3 + 5297292000*z**2 - 4540536000*z + 3027024000), -587520*z**2*(120394680*z**15 - 125554485*z**14 + 131234096*z**13 - 137519160*z**12 + 144515280*z**11 - 152354020*z**10 + 161201040*z**9 - 171267096*z**8 + 182822640*z**7 - 196216020*z**6 + 211891680*z**5 - 230390160*z**4 + 252252000*z**3 - 277477200*z**2 + 302702400*z - 302702400), 29030400*z*(720720*z**16 - 765765*z**15 + 816816*z**14 - 875160*z**13 + 942480*z**12 - 1021020*z**11 + 1113840*z**10 - 1225224*z**9 + 1361360*z**8 - 1531530*z**7 + 1750320*z**6 - 2042040*z**5 + 2450448*z**4 - 3063060*z**3 + 4084080*z**2 - 6126120*z + 12252240), 355687428096000],
[z**18, -9*z**17*(17*z - 2), 102*z**16*(106*z**2 - 24*z + 3), -612*z**15*(765*z**3 - 250*z**2 + 60*z - 8), 102*z**14*(136241*z**4 - 57120*z**3 + 19740*z**2 - 5040*z + 720), -2142*z**13*(139893*z**5 - 70538*z**4 + 31200*z**3 - 11440*z**2 + 3120*z - 480), 884*z**12*(5490071*z**6 - 3195864*z**5 + 1696023*z**4 - 793800*z**3 + 309960*z**2 - 90720*z + 15120), -7956*z**11*(7566955*z**7 - 4943510*z**6 + 3021480*z**5 - 1692152*z**4 + 840840*z**3 - 351120*z**2 + 110880*z - 20160), 7293*z**10*(79243781*z**8 - 56907840*z**7 + 38941080*z**6 - 25048800*z**5 + 14847840*z**4 - 7862400*z**3 + 3528000*z**2 - 1209600*z + 241920), -21879*z**9*(196905951*z**9 - 152984926*z**8 + 114792000*z**7 - 82441760*z**6 + 55954080*z**5 - 35219520*z**4 + 19958400*z**3 - 9676800*z**2 + 3628800*z - 806400), 1326*z**8*(18757047736*z**10 - 15568795704*z**9 + 12607183743*z**8 - 9900752400*z**7 + 7478943120*z**6 - 5370805440*z**5 + 3602823840*z**4 - 2195424000*z**3 + 1157587200*z**2 - 479001600*z + 119750400), -111384*z**7*(989625675*z**11 - 868539670*z**10 + 749459370*z**9 - 633376832*z**8 + 521500980*z**7 - 415294440*z**6 + 316506960*z**5 - 227193120*z**4 + 149688000*z**3 - 86486400*z**2 + 39916800*z - 11404800), 272*z**6*(1356664151597*z**12 - 1248191937720*z**11 + 1135881120465*z**10 - 1019940601680*z**9 + 900752072220*z**8 - 778945167000*z**7 + 655504749900*z**6 - 531923792400*z**5 + 410419049040*z**4 - 294226732800*z**3 + 187978190400*z**2 - 98075577600*z + 32691859200), -2448*z**5*(371446039969*z**13 - 355632420834*z**12 + 338351668200*z**11 - 319443211360*z**10 + 298731112680*z**9 - 276026871120*z**8 + 251136685800*z**7 - 223877253600*z**6 + 194107914000*z**5 - 161794432800*z**4 + 127135008000*z**3 - 90810720000*z**2 + 54486432000*z - 21794572800), 4896*z**4*(323389292428*z**14 - 320138782632*z**13 + 316062231489*z**12 - 310989260400*z**11 + 304706296440*z**10 - 296943126480*z**9 + 287354547480*z**8 - 275495220000*z**7 + 260785324800*z**6 - 242464622400*z**5 + 219534915600*z**4 - 190702512000*z**3 + 154378224000*z**2 - 108972864000*z + 54486432000), -352512*z**3*(5167490595*z**15 - 5258999430*z**14 + 5352272235*z**13 - 5446622192*z**12 + 5540982720*z**11 - 5633715360*z**10 + 5722306590*z**9 - 5802877080*z**8 + 5869363500*z**7 - 5912106200*z**6 + 5915309400*z**5 - 5852246400*z**4 + 5675670000*z**3 - 5297292000*z**2 + 4540536000*z - 3027024000), 207360*z**2*(5899911220*z**16 - 6140128680*z**15 + 6403278735*z**14 - 6692938896*z**13 + 7013477160*z**12 - 7370279280*z**11 + 7770055020*z**10 - 8221253040*z**9 + 8734621896*z**8 - 9323954640*z**7 + 10007017020*z**6 - 10806475680*z**5 + 11749898160*z**4 - 12864852000*z**3 + 14151337200*z**2 - 15437822400*z + 15437822400), -522547200*z*(680680*z**17 - 720720*z**16 + 765765*z**15 - 816816*z**14 + 875160*z**13 - 942480*z**12 + 1021020*z**11 - 1113840*z**10 + 1225224*z**9 - 1361360*z**8 + 1531530*z**7 - 1750320*z**6 + 2042040*z**5 - 2450448*z**4 + 3063060*z**3 - 4084080*z**2 + 6126120*z - 12252240), 6402373705728000],
[z**19, -19*z**18*(9*z - 1), 57*z**17*(238*z**2 - 51*z + 6), -1938*z**16*(342*z**3 - 106*z**2 + 24*z - 3), 1938*z**15*(11519*z**4 - 4590*z**3 + 1500*z**2 - 360*z + 48), -1938*z**14*(283689*z**5 - 136241*z**4 + 57120*z**3 - 19740*z**2 + 5040*z - 720), 646*z**13*(15862132*z**6 - 8813259*z**5 + 4443894*z**4 - 1965600*z**3 + 720720*z**2 - 196560*z + 30240), -16796*z**12*(8785467*z**7 - 5490071*z**6 + 3195864*z**5 - 1696023*z**4 + 793800*z**3 - 309960*z**2 + 90720*z - 15120), 12597*z**11*(131902309*z**8 - 90803460*z**7 + 59322120*z**6 - 36257760*z**5 + 20305824*z**4 - 10090080*z**3 + 4213440*z**2 - 1330560*z + 241920), -138567*z**10*(106163469*z**9 - 79243781*z**8 + 56907840*z**7 - 38941080*z**6 + 25048800*z**5 - 14847840*z**4 + 7862400*z**3 - 3528000*z**2 + 1209600*z - 241920), 12597*z**9*(8130327914*z**10 - 6497896383*z**9 + 5048502558*z**8 - 3788136000*z**7 + 2720578080*z**6 - 1846484640*z**5 + 1162244160*z**4 - 658627200*z**3 + 319334400*z**2 - 119750400*z + 26611200), -25194*z**8*(22145021892*z**11 - 18757047736*z**10 + 15568795704*z**9 - 12607183743*z**8 + 9900752400*z**7 - 7478943120*z**6 + 5370805440*z**5 - 3602823840*z**4 + 2195424000*z**3 - 1157587200*z**2 + 479001600*z - 119750400), 2584*z**7*(910652105476*z**12 - 810503427825*z**11 + 711333989730*z**10 - 613807224030*z**9 + 518735625408*z**8 - 427109302620*z**7 + 340126146360*z**6 - 259219200240*z**5 + 186071165280*z**4 - 122594472000*z**3 + 70832361600*z**2 - 32691859200*z + 9340531200), -5168*z**6*(1461208899393*z**13 - 1356664151597*z**12 + 1248191937720*z**11 - 1135881120465*z**10 + 1019940601680*z**9 - 900752072220*z**8 + 778945167000*z**7 - 655504749900*z**6 + 531923792400*z**5 - 410419049040*z**4 + 294226732800*z**3 - 187978190400*z**2 + 98075577600*z - 32691859200), 46512*z**5*(385937226542*z**14 - 371446039969*z**13 + 355632420834*z**12 - 338351668200*z**11 + 319443211360*z**10 - 298731112680*z**9 + 276026871120*z**8 - 251136685800*z**7 + 223877253600*z**6 - 194107914000*z**5 + 161794432800*z**4 - 127135008000*z**3 + 90810720000*z**2 - 54486432000*z + 21794572800), -93024*z**4*(325950872976*z**15 - 323389292428*z**14 + 320138782632*z**13 - 316062231489*z**12 + 310989260400*z**11 - 304706296440*z**10 + 296943126480*z**9 - 287354547480*z**8 + 275495220000*z**7 - 260785324800*z**6 + 242464622400*z**5 - 219534915600*z**4 + 190702512000*z**3 - 154378224000*z**2 + 108972864000*z - 54486432000), 393984*z**3*(86329012330*z**16 - 87847340115*z**15 + 89402990310*z**14 - 90988627995*z**13 + 92592577264*z**12 - 94196706240*z**11 + 95773161120*z**10 - 97279212030*z**9 + 98648910360*z**8 - 99779179500*z**7 + 100505805400*z**6 - 100560259800*z**5 + 99488188800*z**4 - 96486390000*z**3 + 90053964000*z**2 - 77189112000*z + 51459408000), -3939840*z**2*(5679669240*z**17 - 5899911220*z**16 + 6140128680*z**15 - 6403278735*z**14 + 6692938896*z**13 - 7013477160*z**12 + 7370279280*z**11 - 7770055020*z**10 + 8221253040*z**9 - 8734621896*z**8 + 9323954640*z**7 - 10007017020*z**6 + 10806475680*z**5 - 11749898160*z**4 + 12864852000*z**3 - 14151337200*z**2 + 15437822400*z - 15437822400), 522547200*z*(12252240*z**18 - 12932920*z**17 + 13693680*z**16 - 14549535*z**15 + 15519504*z**14 - 16628040*z**13 + 17907120*z**12 - 19399380*z**11 + 21162960*z**10 - 23279256*z**9 + 25865840*z**8 - 29099070*z**7 + 33256080*z**6 - 38798760*z**5 + 46558512*z**4 - 58198140*z**3 + 77597520*z**2 - 116396280*z + 232792560), 121645100408832000],



'''
    
t_cs_ls = [
    
    [1],
    [z, 1],
    [z**2, -z*(z - 2), 2],
    [z**3, -3*z**2*(z - 1), z*(2*z**2 - 3*z + 6), 6],
    [z**4, -2*z**3*(3*z - 2), z**2*(11*z**2 - 12*z + 12), -2*z*(3*z**3 - 4*z**2 + 6*z - 12), 24],
    [z**5, -5*z**4*(2*z - 1), 5*z**3*(7*z**2 - 6*z + 4), -5*z**2*(10*z**3 - 11*z**2 + 12*z - 12), 2*z*(12*z**4 - 15*z**3 + 20*z**2 - 30*z + 60), 120],
    [z**6, -3*z**5*(5*z - 2), 5*z**4*(17*z**2 - 12*z + 6), -15*z**3*(15*z**3 - 14*z**2 + 12*z - 8), 2*z**2*(137*z**4 - 150*z**3 + 165*z**2 - 180*z + 180), -12*z*(10*z**5 - 12*z**4 + 15*z**3 - 20*z**2 + 30*z - 60), 720],
    [z**7, -7*z**6*(3*z - 1), 7*z**5*(25*z**2 - 15*z + 6), -35*z**4*(21*z**3 - 17*z**2 + 12*z - 6), 7*z**3*(232*z**4 - 225*z**3 + 210*z**2 - 180*z + 120), -14*z**2*(126*z**5 - 137*z**4 + 150*z**3 - 165*z**2 + 180*z - 180), 12*z*(60*z**6 - 70*z**5 + 84*z**4 - 105*z**3 + 140*z**2 - 210*z + 420), 5040],
    [z**8, -4*z**7*(7*z - 2), 14*z**6*(23*z**2 - 12*z + 4), -56*z**5*(35*z**3 - 25*z**2 + 15*z - 6), 7*z**4*(967*z**4 - 840*z**3 + 680*z**2 - 480*z + 240), -28*z**3*(469*z**5 - 464*z**4 + 450*z**3 - 420*z**2 + 360*z - 240), 4*z**2*(3267*z**6 - 3528*z**5 + 3836*z**4 - 4200*z**3 + 4620*z**2 - 5040*z + 5040), -48*z*(105*z**7 - 120*z**6 + 140*z**5 - 168*z**4 + 210*z**3 - 280*z**2 + 420*z - 840), 40320],
    [z**9, -9*z**8*(4*z - 1), 6*z**7*(91*z**2 - 42*z + 12), -126*z**6*(36*z**3 - 23*z**2 + 12*z - 4), 21*z**5*(1069*z**4 - 840*z**3 + 600*z**2 - 360*z + 144), -63*z**4*(1068*z**5 - 967*z**4 + 840*z**3 - 680*z**2 + 480*z - 240), 4*z**3*(29531*z**6 - 29547*z**5 + 29232*z**4 - 28350*z**3 + 26460*z**2 - 22680*z + 15120), -36*z**2*(3044*z**7 - 3267*z**6 + 3528*z**5 - 3836*z**4 + 4200*z**3 - 4620*z**2 + 5040*z - 5040), 144*z*(280*z**8 - 315*z**7 + 360*z**6 - 420*z**5 + 504*z**4 - 630*z**3 + 840*z**2 - 1260*z + 2520), 362880],
    [z**10, -5*z**9*(9*z - 2), 30*z**8*(29*z**2 - 12*z + 3), -30*z**7*(315*z**3 - 182*z**2 + 84*z - 24), 21*z**6*(3013*z**4 - 2160*z**3 + 1380*z**2 - 720*z + 240), -105*z**5*(2565*z**5 - 2138*z**4 + 1680*z**3 - 1200*z**2 + 720*z - 288), 10*z**4*(72368*z**6 - 67284*z**5 + 60921*z**4 - 52920*z**3 + 42840*z**2 - 30240*z + 15120), -20*z**3*(58635*z**7 - 59062*z**6 + 59094*z**5 - 58464*z**4 + 56700*z**3 - 52920*z**2 + 45360*z - 30240), 72*z**2*(14258*z**8 - 15220*z**7 + 16335*z**6 - 17640*z**5 + 19180*z**4 - 21000*z**3 + 23100*z**2 - 25200*z + 25200), -1440*z*(252*z**9 - 280*z**8 + 315*z**7 - 360*z**6 + 420*z**5 - 504*z**4 + 630*z**3 - 840*z**2 + 1260*z - 2520), 3628800],
    [z**11, -11*z**10*(5*z - 1), 55*z**9*(24*z**2 - 9*z + 2), -330*z**8*(55*z**3 - 29*z**2 + 12*z - 3), 33*z**7*(4781*z**4 - 3150*z**3 + 1820*z**2 - 840*z + 240), -231*z**6*(3905*z**5 - 3013*z**4 + 2160*z**3 - 1380*z**2 + 720*z - 240), 55*z**5*(62126*z**6 - 53865*z**5 + 44898*z**4 - 35280*z**3 + 25200*z**2 - 15120*z + 6048), -110*z**4*(76450*z**7 - 72368*z**6 + 67284*z**5 - 60921*z**4 + 52920*z**3 - 42840*z**2 + 30240*z - 15120), 44*z**3*(289854*z**8 - 293175*z**7 + 295310*z**6 - 295470*z**5 + 292320*z**4 - 283500*z**3 + 264600*z**2 - 226800*z + 151200), -792*z**2*(13420*z**9 - 14258*z**8 + 15220*z**7 - 16335*z**6 + 17640*z**5 - 19180*z**4 + 21000*z**3 - 23100*z**2 + 25200*z - 25200), 1440*z*(2520*z**10 - 2772*z**9 + 3080*z**8 - 3465*z**7 + 3960*z**6 - 4620*z**5 + 5544*z**4 - 6930*z**3 + 9240*z**2 - 13860*z + 27720), 39916800],
    [z**12, -6*z**11*(11*z - 2), 11*z**10*(175*z**2 - 60*z + 12), -330*z**9*(99*z**3 - 48*z**2 + 18*z - 4), 33*z**8*(10831*z**4 - 6600*z**3 + 3480*z**2 - 1440*z + 360), -198*z**7*(13321*z**5 - 9562*z**4 + 6300*z**3 - 3640*z**2 + 1680*z - 480), 11*z**6*(1212685*z**6 - 984060*z**5 + 759276*z**4 - 544320*z**3 + 347760*z**2 - 181440*z + 60480), -330*z**5*(139381*z**7 - 124252*z**6 + 107730*z**5 - 89796*z**4 + 70560*z**3 - 50400*z**2 + 30240*z - 12096), 44*z**4*(2392229*z**8 - 2293500*z**7 + 2171040*z**6 - 2018520*z**5 + 1827630*z**4 - 1587600*z**3 + 1285200*z**2 - 907200*z + 453600), -264*z**3*(571659*z**9 - 579708*z**8 + 586350*z**7 - 590620*z**6 + 590940*z**5 - 584640*z**4 + 567000*z**3 - 529200*z**2 + 453600*z - 302400), 288*z**2*(418555*z**10 - 442860*z**9 + 470514*z**8 - 502260*z**7 + 539055*z**6 - 582120*z**5 + 632940*z**4 - 693000*z**3 + 762300*z**2 - 831600*z + 831600), -17280*z*(2310*z**11 - 2520*z**10 + 2772*z**9 - 3080*z**8 + 3465*z**7 - 3960*z**6 + 4620*z**5 - 5544*z**4 + 6930*z**3 - 9240*z**2 + 13860*z - 27720), 479001600],
    [z**13, -13*z**12*(6*z - 1), 13*z**11*(209*z**2 - 66*z + 12), -143*z**10*(390*z**3 - 175*z**2 + 60*z - 12), 429*z**9*(1747*z**4 - 990*z**3 + 480*z**2 - 180*z + 40), -429*z**8*(16146*z**5 - 10831*z**4 + 6600*z**3 - 3480*z**2 + 1440*z - 360), 143*z**7*(314617*z**6 - 239778*z**5 + 172116*z**4 - 113400*z**3 + 65520*z**2 - 30240*z + 8640), -143*z**6*(1441050*z**7 - 1212685*z**6 + 984060*z**5 - 759276*z**4 + 544320*z**3 - 347760*z**2 + 181440*z - 60480), 286*z**5*(2297926*z**8 - 2090715*z**7 + 1863780*z**6 - 1615950*z**5 + 1346940*z**4 - 1058400*z**3 + 756000*z**2 - 453600*z + 181440), -572*z**4*(2472054*z**9 - 2392229*z**8 + 2293500*z**7 - 2171040*z**6 + 2018520*z**5 - 1827630*z**4 + 1587600*z**3 - 1285200*z**2 + 907200*z - 453600), 312*z**3*(6190896*z**10 - 6288249*z**9 + 6376788*z**8 - 6449850*z**7 + 6496820*z**6 - 6500340*z**5 + 6431040*z**4 - 6237000*z**3 + 5821200*z**2 - 4989600*z + 3326400), -3744*z**2*(397020*z**11 - 418555*z**10 + 442860*z**9 - 470514*z**8 + 502260*z**7 - 539055*z**6 + 582120*z**5 - 632940*z**4 + 693000*z**3 - 762300*z**2 + 831600*z - 831600), 17280*z*(27720*z**12 - 30030*z**11 + 32760*z**10 - 36036*z**9 + 40040*z**8 - 45045*z**7 + 51480*z**6 - 60060*z**5 + 72072*z**4 - 90090*z**3 + 120120*z**2 - 180180*z + 360360), 6227020800],
    [z**14, -7*z**13*(13*z - 2), 91*z**12*(41*z**2 - 12*z + 2), -91*z**11*(1001*z**3 - 418*z**2 + 132*z - 24), 1001*z**10*(1473*z**4 - 780*z**3 + 350*z**2 - 120*z + 24), -3003*z**9*(5551*z**5 - 3494*z**4 + 1980*z**3 - 960*z**2 + 360*z - 80), 143*z**8*(944311*z**6 - 678132*z**5 + 454902*z**4 - 277200*z**3 + 146160*z**2 - 60480*z + 15120), -1001*z**7*(790153*z**7 - 629234*z**6 + 479556*z**5 - 344232*z**4 + 226800*z**3 - 131040*z**2 + 60480*z - 17280), 2002*z**6*(1666393*z**8 - 1441050*z**7 + 1212685*z**6 - 984060*z**5 + 759276*z**4 - 544320*z**3 + 347760*z**2 - 181440*z + 60480), -4004*z**5*(2486939*z**9 - 2297926*z**8 + 2090715*z**7 - 1863780*z**6 + 1615950*z**5 - 1346940*z**4 + 1058400*z**3 - 756000*z**2 + 453600*z - 181440), 728*z**4*(27903507*z**10 - 27192594*z**9 + 26314519*z**8 - 25228500*z**7 + 23881440*z**6 - 22203720*z**5 + 20103930*z**4 - 17463600*z**3 + 14137200*z**2 - 9979200*z + 4989600), -4368*z**3*(6088992*z**11 - 6190896*z**10 + 6288249*z**9 - 6376788*z**8 + 6449850*z**7 - 6496820*z**6 + 6500340*z**5 - 6431040*z**4 + 6237000*z**3 - 5821200*z**2 + 4989600*z - 3326400), 576*z**2*(34379790*z**12 - 36128820*z**11 + 38088505*z**10 - 40300260*z**9 + 42816774*z**8 - 45705660*z**7 + 49054005*z**6 - 52972920*z**5 + 57597540*z**4 - 63063000*z**3 + 69369300*z**2 - 75675600*z + 75675600), -241920*z*(25740*z**13 - 27720*z**12 + 30030*z**11 - 32760*z**10 + 36036*z**9 - 40040*z**8 + 45045*z**7 - 51480*z**6 + 60060*z**5 - 72072*z**4 + 90090*z**3 - 120120*z**2 + 180180*z - 360360), 87178291200],
    [z**15, -15*z**14*(7*z - 1), 35*z**13*(143*z**2 - 39*z + 6), -1365*z**12*(105*z**3 - 41*z**2 + 12*z - 2), 91*z**11*(30217*z**4 - 15015*z**3 + 6270*z**2 - 1980*z + 360), -15015*z**10*(2485*z**5 - 1473*z**4 + 780*z**3 - 350*z**2 + 120*z - 24), 715*z**9*(515261*z**6 - 349713*z**5 + 220122*z**4 - 124740*z**3 + 60480*z**2 - 22680*z + 5040), -2145*z**8*(1250095*z**7 - 944311*z**6 + 678132*z**5 - 454902*z**4 + 277200*z**3 - 146160*z**2 + 60480*z - 15120), 1001*z**7*(14394928*z**8 - 11852295*z**7 + 9438510*z**6 - 7193340*z**5 + 5163480*z**4 - 3402000*z**3 + 1965600*z**2 - 907200*z + 259200), -30030*z**6*(1886892*z**9 - 1666393*z**8 + 1441050*z**7 - 1212685*z**6 + 984060*z**5 - 759276*z**4 + 544320*z**3 - 347760*z**2 + 181440*z - 60480), 1820*z**5*(87759124*z**10 - 82068987*z**9 + 75831558*z**8 - 68993595*z**7 + 61504740*z**6 - 53326350*z**5 + 44449020*z**4 - 34927200*z**3 + 24948000*z**2 - 14968800*z + 5987520), -10920*z**4*(28478870*z**11 - 27903507*z**10 + 27192594*z**9 - 26314519*z**8 + 25228500*z**7 - 23881440*z**6 + 22203720*z**5 - 20103930*z**4 + 17463600*z**3 - 14137200*z**2 + 9979200*z - 4989600), 144*z**3*(2723311096*z**12 - 2770491360*z**11 + 2816857680*z**10 - 2861153295*z**9 + 2901438540*z**8 - 2934681750*z**7 + 2956053100*z**6 - 2957654700*z**5 + 2926123200*z**4 - 2837835000*z**3 + 2648646000*z**2 - 2270268000*z + 1513512000), -8640*z**2*(32808524*z**13 - 34379790*z**12 + 36128820*z**11 - 38088505*z**10 + 40300260*z**9 - 42816774*z**8 + 45705660*z**7 - 49054005*z**6 + 52972920*z**5 - 57597540*z**4 + 63063000*z**3 - 69369300*z**2 + 75675600*z - 75675600), 3628800*z*(24024*z**14 - 25740*z**13 + 27720*z**12 - 30030*z**11 + 32760*z**10 - 36036*z**9 + 40040*z**8 - 45045*z**7 + 51480*z**6 - 60060*z**5 + 72072*z**4 - 90090*z**3 + 120120*z**2 - 180180*z + 360360), 1307674368000],
    [z**16, -8*z**15*(15*z - 2), 20*z**14*(329*z**2 - 84*z + 12), -560*z**13*(390*z**3 - 143*z**2 + 39*z - 6), 182*z**12*(26921*z**4 - 12600*z**3 + 4920*z**2 - 1440*z + 240), -1456*z**11*(53955*z**5 - 30217*z**4 + 15015*z**3 - 6270*z**2 + 1980*z - 360), 2860*z**10*(324509*z**6 - 208740*z**5 + 123732*z**4 - 65520*z**3 + 29400*z**2 - 10080*z + 2016), -11440*z**9*(717450*z**7 - 515261*z**6 + 349713*z**5 - 220122*z**4 + 124740*z**3 - 60480*z**2 + 22680*z - 5040), 143*z**8*(382035871*z**8 - 300022800*z**7 + 226634640*z**6 - 162751680*z**5 + 109176480*z**4 - 66528000*z**3 + 35078400*z**2 - 14515200*z + 3628800), -8008*z**7*(34066335*z**9 - 28789856*z**8 + 23704590*z**7 - 18877020*z**6 + 14386680*z**5 - 10326960*z**4 + 6804000*z**3 - 3931200*z**2 + 1814400*z - 518400), 3640*z**6*(277382447*z**10 - 249069744*z**9 + 219963876*z**8 - 190218600*z**7 + 160074420*z**6 - 129895920*z**5 + 100224432*z**4 - 71850240*z**3 + 45904320*z**2 - 23950080*z + 7983360), -29120*z**5*(92953755*z**11 - 87759124*z**10 + 82068987*z**9 - 75831558*z**8 + 68993595*z**7 - 61504740*z**6 + 53326350*z**5 - 44449020*z**4 + 34927200*z**3 - 24948000*z**2 + 14968800*z - 5987520), 48*z**4*(105354077163*z**12 - 103663086800*z**11 + 101568765480*z**10 - 98981042160*z**9 + 95784849160*z**8 - 91831740000*z**7 + 86928441600*z**6 - 80821540800*z**5 + 73178305200*z**4 - 63567504000*z**3 + 51459408000*z**2 - 36324288000*z + 18162144000), -1152*z**3*(5352272235*z**13 - 5446622192*z**12 + 5540982720*z**11 - 5633715360*z**10 + 5722306590*z**9 - 5802877080*z**8 + 5869363500*z**7 - 5912106200*z**6 + 5915309400*z**5 - 5852246400*z**4 + 5675670000*z**3 - 5297292000*z**2 + 4540536000*z - 3027024000), 34560*z**2*(125554485*z**14 - 131234096*z**13 + 137519160*z**12 - 144515280*z**11 + 152354020*z**10 - 161201040*z**9 + 171267096*z**8 - 182822640*z**7 + 196216020*z**6 - 211891680*z**5 + 230390160*z**4 - 252252000*z**3 + 277477200*z**2 - 302702400*z + 302702400), -29030400*z*(45045*z**15 - 48048*z**14 + 51480*z**13 - 55440*z**12 + 60060*z**11 - 65520*z**10 + 72072*z**9 - 80080*z**8 + 90090*z**7 - 102960*z**6 + 120120*z**5 - 144144*z**4 + 180180*z**3 - 240240*z**2 + 360360*z - 720720), 20922789888000],
    [z**17, -17*z**16*(8*z - 1), 68*z**15*(125*z**2 - 30*z + 4), -340*z**14*(952*z**3 - 329*z**2 + 84*z - 12), 238*z**13*(35269*z**4 - 15600*z**3 + 5720*z**2 - 1560*z + 240), -3094*z**12*(50728*z**5 - 26921*z**4 + 12600*z**3 - 4920*z**2 + 1440*z - 240), 884*z**11*(2471755*z**6 - 1510740*z**5 + 846076*z**4 - 420420*z**3 + 175560*z**2 - 55440*z + 10080), -48620*z**10*(474232*z**7 - 324509*z**6 + 208740*z**5 - 123732*z**4 + 65520*z**3 - 29400*z**2 + 10080*z - 2016), 2431*z**9*(76492463*z**8 - 57396000*z**7 + 41220880*z**6 - 27977040*z**5 + 17609760*z**4 - 9979200*z**3 + 4838400*z**2 - 1814400*z + 403200), -2431*z**8*(471781688*z**9 - 382035871*z**8 + 300022800*z**7 - 226634640*z**6 + 162751680*z**5 - 109176480*z**4 + 66528000*z**3 - 35078400*z**2 + 14515200*z - 3628800), 12376*z**7*(434269835*z**10 - 374729685*z**9 + 316688416*z**8 - 260750490*z**7 + 207647220*z**6 - 158253480*z**5 + 113596560*z**4 - 74844000*z**3 + 43243200*z**2 - 19958400*z + 5702400), -61880*z**6*(304808776*z**11 - 277382447*z**10 + 249069744*z**9 - 219963876*z**8 + 190218600*z**7 - 160074420*z**6 + 129895920*z**5 - 100224432*z**4 + 71850240*z**3 - 45904320*z**2 + 23950080*z - 7983360), 272*z**5*(177816210417*z**12 - 169175834100*z**11 + 159721605680*z**10 - 149365556340*z**9 + 138013435560*z**8 - 125568342900*z**7 + 111938626800*z**6 - 97053957000*z**5 + 80897216400*z**4 - 63567504000*z**3 + 45405360000*z**2 - 27243216000*z + 10897286400), -816*z**4*(106712927544*z**13 - 105354077163*z**12 + 103663086800*z**11 - 101568765480*z**10 + 98981042160*z**9 - 95784849160*z**8 + 91831740000*z**7 - 86928441600*z**6 + 80821540800*z**5 - 73178305200*z**4 + 63567504000*z**3 - 51459408000*z**2 + 36324288000*z - 18162144000), 19584*z**3*(5258999430*z**14 - 5352272235*z**13 + 5446622192*z**12 - 5540982720*z**11 + 5633715360*z**10 - 5722306590*z**9 + 5802877080*z**8 - 5869363500*z**7 + 5912106200*z**6 - 5915309400*z**5 + 5852246400*z**4 - 5675670000*z**3 + 5297292000*z**2 - 4540536000*z + 3027024000), -587520*z**2*(120394680*z**15 - 125554485*z**14 + 131234096*z**13 - 137519160*z**12 + 144515280*z**11 - 152354020*z**10 + 161201040*z**9 - 171267096*z**8 + 182822640*z**7 - 196216020*z**6 + 211891680*z**5 - 230390160*z**4 + 252252000*z**3 - 277477200*z**2 + 302702400*z - 302702400), 29030400*z*(720720*z**16 - 765765*z**15 + 816816*z**14 - 875160*z**13 + 942480*z**12 - 1021020*z**11 + 1113840*z**10 - 1225224*z**9 + 1361360*z**8 - 1531530*z**7 + 1750320*z**6 - 2042040*z**5 + 2450448*z**4 - 3063060*z**3 + 4084080*z**2 - 6126120*z + 12252240), 355687428096000],
    [z**18, -9*z**17*(17*z - 2), 102*z**16*(106*z**2 - 24*z + 3), -612*z**15*(765*z**3 - 250*z**2 + 60*z - 8), 102*z**14*(136241*z**4 - 57120*z**3 + 19740*z**2 - 5040*z + 720), -2142*z**13*(139893*z**5 - 70538*z**4 + 31200*z**3 - 11440*z**2 + 3120*z - 480), 884*z**12*(5490071*z**6 - 3195864*z**5 + 1696023*z**4 - 793800*z**3 + 309960*z**2 - 90720*z + 15120), -7956*z**11*(7566955*z**7 - 4943510*z**6 + 3021480*z**5 - 1692152*z**4 + 840840*z**3 - 351120*z**2 + 110880*z - 20160), 7293*z**10*(79243781*z**8 - 56907840*z**7 + 38941080*z**6 - 25048800*z**5 + 14847840*z**4 - 7862400*z**3 + 3528000*z**2 - 1209600*z + 241920), -21879*z**9*(196905951*z**9 - 152984926*z**8 + 114792000*z**7 - 82441760*z**6 + 55954080*z**5 - 35219520*z**4 + 19958400*z**3 - 9676800*z**2 + 3628800*z - 806400), 1326*z**8*(18757047736*z**10 - 15568795704*z**9 + 12607183743*z**8 - 9900752400*z**7 + 7478943120*z**6 - 5370805440*z**5 + 3602823840*z**4 - 2195424000*z**3 + 1157587200*z**2 - 479001600*z + 119750400), -111384*z**7*(989625675*z**11 - 868539670*z**10 + 749459370*z**9 - 633376832*z**8 + 521500980*z**7 - 415294440*z**6 + 316506960*z**5 - 227193120*z**4 + 149688000*z**3 - 86486400*z**2 + 39916800*z - 11404800), 272*z**6*(1356664151597*z**12 - 1248191937720*z**11 + 1135881120465*z**10 - 1019940601680*z**9 + 900752072220*z**8 - 778945167000*z**7 + 655504749900*z**6 - 531923792400*z**5 + 410419049040*z**4 - 294226732800*z**3 + 187978190400*z**2 - 98075577600*z + 32691859200), -2448*z**5*(371446039969*z**13 - 355632420834*z**12 + 338351668200*z**11 - 319443211360*z**10 + 298731112680*z**9 - 276026871120*z**8 + 251136685800*z**7 - 223877253600*z**6 + 194107914000*z**5 - 161794432800*z**4 + 127135008000*z**3 - 90810720000*z**2 + 54486432000*z - 21794572800), 4896*z**4*(323389292428*z**14 - 320138782632*z**13 + 316062231489*z**12 - 310989260400*z**11 + 304706296440*z**10 - 296943126480*z**9 + 287354547480*z**8 - 275495220000*z**7 + 260785324800*z**6 - 242464622400*z**5 + 219534915600*z**4 - 190702512000*z**3 + 154378224000*z**2 - 108972864000*z + 54486432000), -352512*z**3*(5167490595*z**15 - 5258999430*z**14 + 5352272235*z**13 - 5446622192*z**12 + 5540982720*z**11 - 5633715360*z**10 + 5722306590*z**9 - 5802877080*z**8 + 5869363500*z**7 - 5912106200*z**6 + 5915309400*z**5 - 5852246400*z**4 + 5675670000*z**3 - 5297292000*z**2 + 4540536000*z - 3027024000), 207360*z**2*(5899911220*z**16 - 6140128680*z**15 + 6403278735*z**14 - 6692938896*z**13 + 7013477160*z**12 - 7370279280*z**11 + 7770055020*z**10 - 8221253040*z**9 + 8734621896*z**8 - 9323954640*z**7 + 10007017020*z**6 - 10806475680*z**5 + 11749898160*z**4 - 12864852000*z**3 + 14151337200*z**2 - 15437822400*z + 15437822400), -522547200*z*(680680*z**17 - 720720*z**16 + 765765*z**15 - 816816*z**14 + 875160*z**13 - 942480*z**12 + 1021020*z**11 - 1113840*z**10 + 1225224*z**9 - 1361360*z**8 + 1531530*z**7 - 1750320*z**6 + 2042040*z**5 - 2450448*z**4 + 3063060*z**3 - 4084080*z**2 + 6126120*z - 12252240), 6402373705728000],
    [z**19, -19*z**18*(9*z - 1), 57*z**17*(238*z**2 - 51*z + 6), -1938*z**16*(342*z**3 - 106*z**2 + 24*z - 3), 1938*z**15*(11519*z**4 - 4590*z**3 + 1500*z**2 - 360*z + 48), -1938*z**14*(283689*z**5 - 136241*z**4 + 57120*z**3 - 19740*z**2 + 5040*z - 720), 646*z**13*(15862132*z**6 - 8813259*z**5 + 4443894*z**4 - 1965600*z**3 + 720720*z**2 - 196560*z + 30240), -16796*z**12*(8785467*z**7 - 5490071*z**6 + 3195864*z**5 - 1696023*z**4 + 793800*z**3 - 309960*z**2 + 90720*z - 15120), 12597*z**11*(131902309*z**8 - 90803460*z**7 + 59322120*z**6 - 36257760*z**5 + 20305824*z**4 - 10090080*z**3 + 4213440*z**2 - 1330560*z + 241920), -138567*z**10*(106163469*z**9 - 79243781*z**8 + 56907840*z**7 - 38941080*z**6 + 25048800*z**5 - 14847840*z**4 + 7862400*z**3 - 3528000*z**2 + 1209600*z - 241920), 12597*z**9*(8130327914*z**10 - 6497896383*z**9 + 5048502558*z**8 - 3788136000*z**7 + 2720578080*z**6 - 1846484640*z**5 + 1162244160*z**4 - 658627200*z**3 + 319334400*z**2 - 119750400*z + 26611200), -25194*z**8*(22145021892*z**11 - 18757047736*z**10 + 15568795704*z**9 - 12607183743*z**8 + 9900752400*z**7 - 7478943120*z**6 + 5370805440*z**5 - 3602823840*z**4 + 2195424000*z**3 - 1157587200*z**2 + 479001600*z - 119750400), 2584*z**7*(910652105476*z**12 - 810503427825*z**11 + 711333989730*z**10 - 613807224030*z**9 + 518735625408*z**8 - 427109302620*z**7 + 340126146360*z**6 - 259219200240*z**5 + 186071165280*z**4 - 122594472000*z**3 + 70832361600*z**2 - 32691859200*z + 9340531200), -5168*z**6*(1461208899393*z**13 - 1356664151597*z**12 + 1248191937720*z**11 - 1135881120465*z**10 + 1019940601680*z**9 - 900752072220*z**8 + 778945167000*z**7 - 655504749900*z**6 + 531923792400*z**5 - 410419049040*z**4 + 294226732800*z**3 - 187978190400*z**2 + 98075577600*z - 32691859200), 46512*z**5*(385937226542*z**14 - 371446039969*z**13 + 355632420834*z**12 - 338351668200*z**11 + 319443211360*z**10 - 298731112680*z**9 + 276026871120*z**8 - 251136685800*z**7 + 223877253600*z**6 - 194107914000*z**5 + 161794432800*z**4 - 127135008000*z**3 + 90810720000*z**2 - 54486432000*z + 21794572800), -93024*z**4*(325950872976*z**15 - 323389292428*z**14 + 320138782632*z**13 - 316062231489*z**12 + 310989260400*z**11 - 304706296440*z**10 + 296943126480*z**9 - 287354547480*z**8 + 275495220000*z**7 - 260785324800*z**6 + 242464622400*z**5 - 219534915600*z**4 + 190702512000*z**3 - 154378224000*z**2 + 108972864000*z - 54486432000), 393984*z**3*(86329012330*z**16 - 87847340115*z**15 + 89402990310*z**14 - 90988627995*z**13 + 92592577264*z**12 - 94196706240*z**11 + 95773161120*z**10 - 97279212030*z**9 + 98648910360*z**8 - 99779179500*z**7 + 100505805400*z**6 - 100560259800*z**5 + 99488188800*z**4 - 96486390000*z**3 + 90053964000*z**2 - 77189112000*z + 51459408000), -3939840*z**2*(5679669240*z**17 - 5899911220*z**16 + 6140128680*z**15 - 6403278735*z**14 + 6692938896*z**13 - 7013477160*z**12 + 7370279280*z**11 - 7770055020*z**10 + 8221253040*z**9 - 8734621896*z**8 + 9323954640*z**7 - 10007017020*z**6 + 10806475680*z**5 - 11749898160*z**4 + 12864852000*z**3 - 14151337200*z**2 + 15437822400*z - 15437822400), 522547200*z*(12252240*z**18 - 12932920*z**17 + 13693680*z**16 - 14549535*z**15 + 15519504*z**14 - 16628040*z**13 + 17907120*z**12 - 19399380*z**11 + 21162960*z**10 - 23279256*z**9 + 25865840*z**8 - 29099070*z**7 + 33256080*z**6 - 38798760*z**5 + 46558512*z**4 - 58198140*z**3 + 77597520*z**2 - 116396280*z + 232792560), 121645100408832000],

]

def extract_cs(tcs_ls, x, start_m, k):
    # exp = ~m-k
    # start_m : the start row; _m = ~m >= start_m
    # col : contant!!!!!!!!!!!!!!!!!
    col = start_m-1
    i = col - k
    
    fs = [c[col].expand() for c in tcs_ls[start_m:]]
    #print(fs)
    lc = [f.coeff(x, _m-k) for _m, f in enumerate(fs, start_m)]
    return lc
##cs = extract_cs(t_cs_ls, z, 5, 4)
##print(cs)
##raise


def commonK(M, start_m, k):
    col = start_m-1
    i = col - k
    r = [one*fall(_m,col)/(-2)**i/factorial(i) for _m in range(start_m, M)]
    return r

def tailPoly(tcs_ls, x, col, i):
    #tailPoly(m, col, i) = sign(?)K(m,col, m-col+i)/commonK(m, col, m-col+i)
    start_m = col+1
    k = col-i
    M = len(tcs_ls)
    assert k < start_m
    
    cs = extract_cs(tcs_ls, x, start_m, k)
    ck = commonK(M, start_m, k)
    tail = [a/b for a,b in zip(cs, ck)]
    assert len(cs) == len(ck) == len(tail) == M-start_m

    deg = i
    L = deg + 1
    if len(tail) < L:
        print(col, i, M)
        print(len(tail), L)
        raise ValueError('too few data to polyfit')

    # M-start_m >= i+1
    # M >= col+i+2
    # col <= M - i - 2 , i = 0..col

    
    xs = list(range(start_m, M))
    ys = tail
    
    r = poly_xys2coeffs(xs[:L], ys[:L])
    r = list(r)
##    print(cs, ck, tail)
##    print(r)
    if not all(make_poly(r,one*x) == y for x,y in zip(xs, ys)):
        print('col={}, i={}, coeffs={}'.format(col,i,r))
        for x,y in zip(xs, ys):
            y2 = make_poly(r,one*x)
            if y2 != y:
                print(x,y)
                print(y, y2, y/y2)
        assert all(make_poly(r,one*x) == y for x,y in zip(xs, ys))
    
    
    
    return r

def show_tailPoly_impl1(M):
    col_i_pairs = []
    for col in range(M):
        # 0<=i<=col and i<=M-col-2
        max_i = min(col, M-col-2)
        for i in range(max_i+1):
            col_i_pairs.append((col, i))
    return col_i_pairs
def show_tailPoly_impl2(tcs_ls, x, M, col, i):
    assert M == len(tcs_ls)
    assert i <= col
    assert i <= M-col-2
    assert col <= M-i-2
    cs = tailPoly(tcs_ls, x, col, i)
    global m
    f = make_poly(cs, m)
    print('col={}, i={}, cs={}, factor(f)={}'.format(col, i, cs, factor(f)))
    
def show_tailPoly_colfirst(tcs_ls, x):
    M = len(tcs_ls)
    col_i_pairs = show_tailPoly_impl1(M)
    for col,i in col_i_pairs:
        show_tailPoly_impl2(tcs_ls, x, M, col, i)
def show_tailPoly_ifirst(tcs_ls, x):
    M = len(tcs_ls)
    col_i_pairs = show_tailPoly_impl1(M)
    col_i_pairs.sort(key=lambda pair:tuple(reversed(pair)))
    for col,i in col_i_pairs:
        show_tailPoly_impl2(tcs_ls, x, M, col, i)


def factor_tcoefs(tcs):
    r = list(map(factor, tcs))
    return r
def factor_tcoefs_ls(tcs_ls):
    r = list(map(factor_tcoefs, tcs_ls))
    list(map(print, r))
    return r

#print(factor_tcoefs_ls(t_cs_ls))

def verify_guess(tcs_ls, x):
    '''
K(m, col, exp) = K(m, col, m-k) = K(m, col, m-col+i)
0 <= k=col-i <= col <= m
0 <= i <= col <= m
'''
    M = len(tcs_ls)
    
    col_i_2_K = [
        # col = 0
        [lambda m, col, i:fall(m,col),],
        
        # col = 1
        [lambda m, col, i:fall(m,col),    # i=0
         lambda m, col, i:fall(m,col+1)/2 # i=1
         ],

        # col = 2
        [lambda m, col, i:fall(m,col),
         lambda m, col, i:fall(m,col+1)/2,
         lambda m, col, i:fall(m,col+1)*(3*(m-col+i)-1)/3/factorial(i)/2**i
         ],
        
        # col = 3
        [lambda m, col, i:fall(m,col),
         lambda m, col, i:fall(m,col+1)/2,
         lambda m, col, i:fall(m,col+1)*(3*(m-col+i)-1)/24,
         lambda m, col, i:fall(m,col+1)*fall(m+3-col,2)/48
         ],
        
        # col = 4
        [lambda m, col, i:fall(m,col),
         lambda m, col, i:fall(m,col+1)/2,
         lambda m, col, i:fall(m,col+1)*(3*(m-col+i)-1)/24,
         lambda m, col, i:fall(m,col+1)*fall(m+3-col,2)/48,
         lambda m, col, i:C(m,5)*(15*m**3 - 30*m**2 + 5*m + 2)/48
         ],
        ]

    for col in range(len(col_i_2_K)):
        for i in range(col+1):
            min_m = col
            m = min_m+1
            k = col - i
            cs = extract_cs(tcs_ls, x, m, k)
            f = col_i_2_K[col][i]
            rs = [f(_m, col, i)*(-1)**i for _m in range(m, M)]
            if cs != rs:
                print('col = {}, i = {}, k = {}'.format(col, i, k))
                print('cs=', cs)
                print('rs=', rs)
                assert cs == rs
            if 0 and (col, i) == (2,2):
                print(cs)
                print(rs)



            
#verify_guess(t_cs_ls, z)

#print(ints_polyfit([2, -48, -248, -688, -1458, -2648, -4348, -6648, -9638], 4))


'''
show_tailPoly_ifirst(t_cs_ls, z)

col=0, i=0, cs=[1], factor(f)=1
col=1, i=0, cs=[1], factor(f)=1
col=2, i=0, cs=[1], factor(f)=1
col=3, i=0, cs=[1], factor(f)=1
col=4, i=0, cs=[1], factor(f)=1
col=5, i=0, cs=[1], factor(f)=1
col=6, i=0, cs=[1], factor(f)=1
col=7, i=0, cs=[1], factor(f)=1
col=8, i=0, cs=[1], factor(f)=1
col=9, i=0, cs=[1], factor(f)=1
col=10, i=0, cs=[1], factor(f)=1
col=11, i=0, cs=[1], factor(f)=1
col=12, i=0, cs=[1], factor(f)=1
col=13, i=0, cs=[1], factor(f)=1
col=14, i=0, cs=[1], factor(f)=1
col=15, i=0, cs=[1], factor(f)=1
col=16, i=0, cs=[1], factor(f)=1
col=17, i=0, cs=[1], factor(f)=1
col=18, i=0, cs=[1], factor(f)=1
col=1, i=1, cs=[1, -1], factor(f)=m - 1 ==>> i=1: f(m)=m-col
col=2, i=1, cs=[1, -2], factor(f)=m - 2
col=3, i=1, cs=[1, -3], factor(f)=m - 3
col=4, i=1, cs=[1, -4], factor(f)=m - 4
col=5, i=1, cs=[1, -5], factor(f)=m - 5
col=6, i=1, cs=[1, -6], factor(f)=m - 6
col=7, i=1, cs=[1, -7], factor(f)=m - 7
col=8, i=1, cs=[1, -8], factor(f)=m - 8
col=9, i=1, cs=[1, -9], factor(f)=m - 9
col=10, i=1, cs=[1, -10], factor(f)=m - 10
col=11, i=1, cs=[1, -11], factor(f)=m - 11
col=12, i=1, cs=[1, -12], factor(f)=m - 12
col=13, i=1, cs=[1, -13], factor(f)=m - 13
col=14, i=1, cs=[1, -14], factor(f)=m - 14
col=15, i=1, cs=[1, -15], factor(f)=m - 15
col=16, i=1, cs=[1, -16], factor(f)=m - 16
col=17, i=1, cs=[1, -17], factor(f)=m - 17

==>> i=2: f(m)=(m-col)*(m-col+2-1/3)
col=2, i=2, cs=[1, -7/3, 2/3], factor(f)=(m - 2)*(3*m - 1)/3
col=3, i=2, cs=[1, -13/3, 4], factor(f)=(m - 3)*(3*m - 4)/3
col=4, i=2, cs=[1, -19/3, 28/3], factor(f)=(m - 4)*(3*m - 7)/3
col=5, i=2, cs=[1, -25/3, 50/3], factor(f)=(m - 5)*(3*m - 10)/3
col=6, i=2, cs=[1, -31/3, 26], factor(f)=(m - 6)*(3*m - 13)/3
col=7, i=2, cs=[1, -37/3, 112/3], factor(f)=(m - 7)*(3*m - 16)/3
col=8, i=2, cs=[1, -43/3, 152/3], factor(f)=(m - 8)*(3*m - 19)/3
col=9, i=2, cs=[1, -49/3, 66], factor(f)=(m - 9)*(3*m - 22)/3
col=10, i=2, cs=[1, -55/3, 250/3], factor(f)=(m - 10)*(3*m - 25)/3
col=11, i=2, cs=[1, -61/3, 308/3], factor(f)=(m - 11)*(3*m - 28)/3
col=12, i=2, cs=[1, -67/3, 124], factor(f)=(m - 12)*(3*m - 31)/3
col=13, i=2, cs=[1, -73/3, 442/3], factor(f)=(m - 13)*(3*m - 34)/3
col=14, i=2, cs=[1, -79/3, 518/3], factor(f)=(m - 14)*(3*m - 37)/3
col=15, i=2, cs=[1, -85/3, 200], factor(f)=(m - 15)*(3*m - 40)/3
col=16, i=2, cs=[1, -91/3, 688/3], factor(f)=(m - 16)*(3*m - 43)/3

==>> i=3: f(m)=(m-col)*(m-col+2)*(m-col+3)
col=3, i=3, cs=[1, -4, 3, 0], factor(f)=m*(m - 3)*(m - 1)
col=4, i=3, cs=[1, -7, 14, -8], factor(f)=(m - 4)*(m - 2)*(m - 1)
col=5, i=3, cs=[1, -10, 31, -30], factor(f)=(m - 5)*(m - 3)*(m - 2)
col=6, i=3, cs=[1, -13, 54, -72], factor(f)=(m - 6)*(m - 4)*(m - 3)
col=7, i=3, cs=[1, -16, 83, -140], factor(f)=(m - 7)*(m - 5)*(m - 4)
col=8, i=3, cs=[1, -19, 118, -240], factor(f)=(m - 8)*(m - 6)*(m - 5)
col=9, i=3, cs=[1, -22, 159, -378], factor(f)=(m - 9)*(m - 7)*(m - 6)
col=10, i=3, cs=[1, -25, 206, -560], factor(f)=(m - 10)*(m - 8)*(m - 7)
col=11, i=3, cs=[1, -28, 259, -792], factor(f)=(m - 11)*(m - 9)*(m - 8)
col=12, i=3, cs=[1, -31, 318, -1080], factor(f)=(m - 12)*(m - 10)*(m - 9)
col=13, i=3, cs=[1, -34, 383, -1430], factor(f)=(m - 13)*(m - 11)*(m - 10)
col=14, i=3, cs=[1, -37, 454, -1848], factor(f)=(m - 14)*(m - 12)*(m - 11)
col=15, i=3, cs=[1, -40, 531, -2340], factor(f)=(m - 15)*(m - 13)*(m - 12)



==>> i=4: f(m)=(m-col)*poly(m,[1, -2-3(col-4), 1/3+3(col-4)**2+4(col-4), 2/15+poly(col-4,[-15, -30, -5, 2])])
= (m-col)*poly(m,[1, -3col+10, 3col**2-20col+32+1/3, -col**3+10col**2-(32+1/3)col+33+7/15])
[45, -300, 485] == ints_polyfit([5, 110, 305, 590, 965, 1430, 1985, 2630, 3365, 4190], 4)
[-15, 150, -485, 502] == ints_polyfit([2, -48, -248, -688, -1458, -2648, -4348, -6648, -9638], 4)

col=4, i=4, cs=[1, -6, 25/3, -6/5, -8/15], factor(f)=(m - 4)*(15*m**3 - 30*m**2 + 5*m + 2)/15
col=5, i=4, cs=[1, -10, 97/3, -598/15, 16], factor(f)=(m - 5)*(15*m**3 - 75*m**2 + 110*m - 48)/15
col=6, i=4, cs=[1, -14, 205/3, -2078/15, 496/5], factor(f)=(m - 6)*(15*m**3 - 120*m**2 + 305*m - 248)/15
col=7, i=4, cs=[1, -18, 349/3, -1606/5, 4816/15], factor(f)=(m - 7)*(15*m**3 - 165*m**2 + 590*m - 688)/15
col=8, i=4, cs=[1, -22, 529/3, -9178/15, 3888/5], factor(f)=(m - 8)*(15*m**3 - 210*m**2 + 965*m - 1458)/15
col=9, i=4, cs=[1, -26, 745/3, -15518/15, 7944/5], factor(f)=(m - 9)*(15*m**3 - 255*m**2 + 1430*m - 2648)/15
col=10, i=4, cs=[1, -30, 997/3, -8066/5, 8696/3], factor(f)=(m - 10)*(15*m**3 - 300*m**2 + 1985*m - 4348)/15
col=11, i=4, cs=[1, -34, 1285/3, -35578/15, 24376/5], factor(f)=(m - 11)*(15*m**3 - 345*m**2 + 2630*m - 6648)/15
col=12, i=4, cs=[1, -38, 1609/3, -50018/15, 38552/5], factor(f)=(m - 12)*(15*m**3 - 390*m**2 + 3365*m - 9638)/15
col=13, i=4, cs=[1, -42, 1969/3, -22626/5, 174304/15], factor(f)=(m - 13)*(15*m**3 - 435*m**2 + 4190*m - 13408)/15
col=14, i=4, cs=[1, -46, 2365/3, -89518/15, 84224/5], factor(f)=(m - 14)*(15*m**3 - 480*m**2 + 5105*m - 18048)/15


==>> i=5: f(m)=(m-col)*(m-col+4)*(m-col+5)*poly(m,[1, -7/3-2(col-5), col**2-(7+2/3)col+12+2/3])
= (m-col)*(m-col+4)*(m-col+5)*poly(m,[1, -2col+7+2/3, col**2-(7+2/3)col+12+2/3]) 
[3, -23, 38] == ints_polyfit([-2, 8, 24, 46, 74, 108], 5)

col=5, i=5, cs=[1, -25/3, 55/3, -23/3, -10/3, 0], factor(f)=m*(m - 5)*(m - 1)*(3*m**2 - 7*m - 2)/3
col=6, i=5, cs=[1, -40/3, 185/3, -368/3, 316/3, -32], factor(f)=(m - 6)*(m - 2)*(m - 1)*(3*m**2 - 13*m + 8)/3
col=7, i=5, cs=[1, -55/3, 125, -1193/3, 594, -336], factor(f)=(m - 7)*(m - 3)*(m - 2)*(3*m**2 - 19*m + 24)/3
col=8, i=5, cs=[1, -70/3, 625/3, -2678/3, 5528/3, -1472], factor(f)=(m - 8)*(m - 4)*(m - 3)*(3*m**2 - 25*m + 46)/3
col=9, i=5, cs=[1, -85/3, 935/3, -5003/3, 13054/3, -4440], factor(f)=(m - 9)*(m - 5)*(m - 4)*(3*m**2 - 31*m + 74)/3
col=10, i=5, cs=[1, -100/3, 435, -8348/3, 8740, -10800], factor(f)=(m - 10)*(m - 6)*(m - 5)*(3*m**2 - 37*m + 108)/3
col=11, i=5, cs=[1, -115/3, 1735/3, -12893/3, 47246/3, -22792], factor(f)=(m - 11)*(m - 7)*(m - 6)*(3*m**2 - 43*m + 148)/3
col=12, i=5, cs=[1, -130/3, 2225/3, -18818/3, 78712/3, -43456], factor(f)=(m - 12)*(m - 8)*(m - 7)*(3*m**2 - 49*m + 194)/3
col=13, i=5, cs=[1, -145/3, 925, -26303/3, 41186, -76752], factor(f)=(m - 13)*(m - 9)*(m - 8)*(3*m**2 - 55*m + 246)/3



col=6, i=6, cs=[1, -11, 35, -257/9, -28/3, 236/63, 32/21], factor(f)=(m - 6)*(63*m**5 - 315*m**4 + 315*m**3 + 91*m**2 - 42*m - 16)/63
col=7, i=6, cs=[1, -17, 105, -2687/9, 1234/3, -16648/63, 64], factor(f)=(m - 7)*(63*m**5 - 630*m**4 + 2205*m**3 - 3374*m**2 + 2296*m - 576)/63
col=8, i=6, cs=[1, -23, 205, -8177/9, 2122, -157096/63, 8128/7], factor(f)=(m - 8)*(63*m**5 - 945*m**4 + 5355*m**3 - 14399*m**2 + 18494*m - 9144)/63
col=9, i=6, cs=[1, -29, 335, -17807/9, 18968/3, -655468/63, 48400/7], factor(f)=(m - 9)*(63*m**5 - 1260*m**4 + 9765*m**3 - 36764*m**2 + 67452*m - 48400)/63
col=10, i=6, cs=[1, -35, 495, -32657/9, 43720/3, -1920004/63, 545680/21], factor(f)=(m - 10)*(63*m**5 - 1575*m**4 + 15435*m**3 - 74249*m**2 + 175630*m - 163704)/63
col=11, i=6, cs=[1, -41, 685, -53807/9, 28794, -4578184/63, 1579072/21], factor(f)=(m - 11)*(63*m**5 - 1890*m**4 + 22365*m**3 - 130634*m**2 + 377048*m - 430656)/63
col=12, i=6, cs=[1, -47, 905, -82337/9, 153794/3, -9522088/63, 3850624/21], factor(f)=(m - 12)*(63*m**5 - 2205*m**4 + 30555*m**3 - 209699*m**2 + 713286*m - 962656)/63



col=7, i=7, cs=[1, -14, 182/3, -728/9, -91/9, 278/9, 112/9, 0], factor(f)=m*(m - 7)*(m - 1)*(9*m**4 - 54*m**3 + 51*m**2 + 58*m + 16)/9
col=8, i=7, cs=[1, -21, 497/3, -5663/9, 11116/9, -11356/9, 5744/9, -128], factor(f)=(m - 8)*(m - 2)*(m - 1)*(9*m**4 - 90*m**3 + 267*m**2 - 242*m + 72)/9
col=9, i=7, cs=[1, -28, 938/3, -16268/9, 17591/3, -96616/9, 31036/3, -4080], factor(f)=(m - 9)*(m - 3)*(m - 2)*(9*m**4 - 126*m**3 + 591*m**2 - 1082*m + 680)/9
col=10, i=7, cs=[1, -35, 1505/3, -34433/9, 151340/9, -384652/9, 525376/9, -99520/3], factor(f)=(m - 10)*(m - 4)*(m - 3)*(9*m**4 - 162*m**3 + 1023*m**2 - 2678*m + 2488)/9
col=11, i=7, cs=[1, -42, 2198/3, -62048/9, 340837/9, -1095334/9, 1910960/9, -466400/3], factor(f)=(m - 11)*(m - 5)*(m - 4)*(9*m**4 - 198*m**3 + 1563*m**2 - 5246*m + 6360)/9



col=8, i=8, cs=[1, -52/3, 98, -1736/9, 875/27, 3644/27, 4724/135, -3088/135, -128/15], factor(f)=(m - 8)*(135*m**7 - 1260*m**6 + 3150*m**5 - 840*m**4 - 2345*m**3 - 540*m**2 + 404*m + 144)/135
col=9, i=8, cs=[1, -76/3, 742/3, -10808/9, 84875/27, -40916/9, 488084/135, -67472/45, 256], factor(f)=(m - 9)*(135*m**7 - 2205*m**6 + 13545*m**5 - 40215*m**4 + 62440*m**3 - 51780*m**2 + 22064*m - 3840)/135
col=10, i=8, cs=[1, -100/3, 1358/3, -29456/9, 372995/27, -945500/27, 7073204/135, -5753264/135, 130816/9], factor(f)=(m - 10)*(135*m**7 - 3150*m**6 + 29610*m**5 - 145740*m**4 + 407575*m**3 - 651750*m**2 + 555704*m - 196224)/135


col=9, i=9, cs=[1, -21, 150, -6118/15, 3367/15, 1217/3, -496/15, -1164/5, -432/5, 0], factor(f)=m*(m - 9)*(m - 1)*(15*m**6 - 165*m**5 + 465*m**4 + 17*m**3 - 648*m**2 - 548*m - 144)/15
>>> 

'''



##fill_Stirling_circle_table(Stirling_circle_table, 10)
##print(Stirling_circle_table)

def _xj_coeff(m, j, z):

    #sum Stirling[i+j,j] m!/(i+j)! (-z)**i {i=0..m-j} z**j
    s = sum((-z)**i*Stirling_circle(i+j,j)/factorial(i+j) for i in range(m-j+1))
    s *= factorial(m)
    s = s.factor()
    return s

print(_xj_coeff(6, 1, z))



        
    


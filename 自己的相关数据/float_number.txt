
e ../../python3_src/自己的相关数据/float_number.txt
>>> hex(1/3)
Traceback (most recent call last):
  ...
TypeError: 'float' object cannot be interpreted as an integer
>>> (1/3).hex()
'0x1.5555555555555p-2'
>>> float('0x1.5555555555555p-2')
Traceback (most recent call last):
  ...
ValueError: could not convert string to float: '0x1.5555555555555p-2'
>>> float.fromhex('0x1.5555555555555p-2')
0.3333333333333333
>>> 0x1.5555555555555p-2
  ...
    0x1.5555555555555p-2
                    ^
SyntaxError: invalid decimal literal
>>> (1/3*3).hex() #????
'0x1.0000000000000p+0'
>>> ((1/3)*3).is_integer() #????
True
>>> (float.fromhex('0x1.5555555555555p-2')*3).is_integer() #????
True
>>> 1.0 * (1<<((1<<10)-1))
8.98846567431158e+307
>>> 1.0 * (1<<((1<<10)-0))
Traceback (most recent call last):
  ...
OverflowError: int too large to convert to float
>>> 1.0 / (1<<((1<<10)-1))
1.1125369292536007e-308
>>> 1.0 / (1<<((1<<10)-0))
Traceback (most recent call last):
  ...
OverflowError: int too large to convert to float
>>> float.fromhex('0x3.FFFFFFFFFFFFFp-2')
1.0
>>> float.fromhex('0x3.FFFFFFFFFFFFEp-2')
0.9999999999999999
>>> 0.9999999999999999 .hex()
>>> (1/3).as_integer_ratio()
(6004799503160661, 18014398509481984)
>>> (1/3).is_integer()
False
>>> hex(18014398509481984)
'0x40000000000000'
>>> hex(6004799503160661)
'0x15555555555555'
>>> 18014398509481984==2**54
True
>>> 18014398509481984*5**54
1000000000000000000000000000000000000000000000000000000
>>> 6004799503160661*5**54
333333333333333314829616256247390992939472198486328125
>>>
>>>
64bit-double
1bit隐含的首一+53bit尾数==54bit精度
1bit方向+9bit绝对值==10bit位移
  ??? [(2**-1024) < abs(double) < (2**1024)]
还剩下1bit?整体正负符号? 不太对，53bit尾数 似乎 就包含了 整体正负符号



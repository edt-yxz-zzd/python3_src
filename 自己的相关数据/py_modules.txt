
##___LIST___##
std module
  file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/py-modindex.html
builtins Type/func
  dir(__builtins__)
  py -c 'print("\n".join(sorted(dir(__builtins__))))'
keyword
  keyword.kwlist
  py -c 'print("\n".join(sorted(__import__("keyword").kwlist)))'
spec attr
  file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/reference/datamodel.html#specialnames
  file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/genindex-_.html
my freq import stmt
my freq words




##___LIST___##
#module/func
os
io
  StringIO :: TextIOBase
  BytesIO :: BufferedIOBase
  FileIO :: RawIOBase
    BufferedReader/BufferedWriter/BufferedRandom/BufferedRWPair
    TextIOWrapper
tempfile
  #automatic cleanup
    TemporaryDirectory
    TemporaryFile
      NamedTemporaryFile # file.name
      SpooledTemporaryFile # in-memory if possible
  #manual cleanup
    mkstemp() / mkdtemp()
pathlib
  PurePath/Path
  '.' cwd()/resolve() #os.path.abspath()
  '~' expanduser()/home()
  exists()/stat()
  is_dir()/is_file()/is_symlink()
  glob()/iterdir()
  read_text/write_text/read_bytes/write_bytes

  parts/parent/name/stem/suffix/suffixes
    p === p.parent/p.name
    p.name === p.stem+p.suffix
  as_posix()/as_uri()
  match()/relative_to()
  with_name()/with_suffix() #replace name/suffix


re
  compile/escape
  search/match/fullmatch/finditer/split
  sub
unicodedata
  name() #chr/ord/hex
codecs
  utf8,gbk,gb2312,gb18030,utf_16_le
  UnicodeError
json
  load/dump: json <-> file
  loads/dumps: json <-> str
  ####
  dict.key MUST BE str
  print(json.dumps({'4': 5, '6': 7}, sort_keys=True, indent=4, ensure_ascii=False))

functools
  ##py -c 'print("\n".join(sorted(__import__("functools").__all__)))'
  py -c 'print("\n".join(sorted(dir(__import__("functools")))))'
  cached_property
  cmp_to_key
  lru_cache
  partial
  partialmethod
  reduce
  singledispatch
  singledispatchmethod
  total_ordering
  update_wrapper
  wraps
itertools
  count()
  cycle()
  repeat()

  product()
  permutations()
  combinations()
  combinations_with_replacement()

  accumulate()
  chain()
  chain.from_iterable()
  compress()
  dropwhile()
  filterfalse()
  groupby()
  islice()
  starmap()
  takewhile()
  tee()
  zip_longest()

collections.abc
abc
pprint
argparse
typing
subprocess
importlib
  import_module()
ast
  literal_eval
namedtuple
fractions
  Fraction, gcd


##___LIST___##
#words
  DONE
  TODO

#stmt
r""" #"""
__all__ = ''' '''.split()
from pprint import pprint
from seed.tiny import print_err
from itertools import chain
from functools import partial
from .abc import ABC, abstractmethod, override, not_implemented, ABCMeta
raise logic-error
if __name__ == "__main__":
    main()
if __name__ == "__main__":
    import doctest
    doctest.testmod()
    #doctest: +ELLIPSIS
    #doctest: +NORMALIZE_WHITESPACE
    #doctest: +IGNORE_EXCEPTION_DETAIL
    #Traceback (most recent call last):





##___LIST___##
#exceptions
file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/library/exceptions.html#exception-hierarchy
Python » Documentation » The Python Standard Library »
Built-in Exceptions
Exception hierarchy¶

The class hierarchy for built-in exceptions is:

BaseException
 +-- SystemExit
 +-- KeyboardInterrupt
 +-- GeneratorExit
 +-- Exception
      +-- StopIteration
      +-- StopAsyncIteration
      +-- ArithmeticError
      |    +-- FloatingPointError
      |    +-- OverflowError
      |    +-- ZeroDivisionError
      +-- AssertionError
      +-- AttributeError
      +-- BufferError
      +-- EOFError
      +-- ImportError
      |    +-- ModuleNotFoundError
      +-- LookupError
      |    +-- IndexError
      |    +-- KeyError
      +-- MemoryError
      +-- NameError
      |    +-- UnboundLocalError
      +-- OSError
      |    +-- BlockingIOError
      |    +-- ChildProcessError
      |    +-- ConnectionError
      |    |    +-- BrokenPipeError
      |    |    +-- ConnectionAbortedError
      |    |    +-- ConnectionRefusedError
      |    |    +-- ConnectionResetError
      |    +-- FileExistsError
      |    +-- FileNotFoundError
      |    +-- InterruptedError
      |    +-- IsADirectoryError
      |    +-- NotADirectoryError
      |    +-- PermissionError
      |    +-- ProcessLookupError
      |    +-- TimeoutError
      +-- ReferenceError
      +-- RuntimeError
      |    +-- NotImplementedError
      |    +-- RecursionError
      +-- SyntaxError
      |    +-- IndentationError
      |         +-- TabError
      +-- SystemError
      +-- TypeError
      +-- ValueError
      |    +-- UnicodeError
      |         +-- UnicodeDecodeError
      |         +-- UnicodeEncodeError
      |         +-- UnicodeTranslateError
      +-- Warning
           +-- DeprecationWarning
           +-- PendingDeprecationWarning
           +-- RuntimeWarning
           +-- SyntaxWarning
           +-- UserWarning
           +-- FutureWarning
           +-- ImportWarning
           +-- UnicodeWarning
           +-- BytesWarning
           +-- ResourceWarning






##___LIST___##
#special methods
file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/genindex-_.html
  #_#__abs__()
  #_#__add__()
  #_#__aenter__()
  #_#__aexit__()
  #_#__aiter__()
  #_#__all__
  #_#__and__()
  #_#__anext__()
  #_#__annotations__
  #_#__await__()
  #_#__bases__
  #_#__bool__()
  #_#__breakpointhook__
  #_#__bytes__()
  #_#__cached__
  #_#__call__()
  #_#__callback__
  #_#__cause__
  #_#__ceil__()
  #_#__class__
  #_#__class_getitem__()
  #_#__classcell__
  #_#__closure__
  #_#__code__
  #_#__complex__()
  #_#__concat__()
  #_#__contains__()
  #_#__context__
  #_#__copy__()
  #_#__debug__
  #_#__deepcopy__()
  #_#__defaults__
  #_#__del__()
  #_#__delattr__()
  #_#__delete__()
  #_#__delitem__()
  #_#__dict__
  #_#__dir__
  #_#__dir__()
  #_#__displayhook__
  #_#__divmod__()
  #_#__doc__
  #_#__enter__()
  #_#__eq__()
  #_#__excepthook__
  #_#__exit__()
  #_#__file__
  #_#__float__()
  #_#__floor__()
  #_#__floordiv__()
  #_#__format__
  #_#__format__()
  #_#__fspath__()
  #_#__func__
  #_#__future__
  #_#__future__
  #_#__ge__()
  #_#__get__()
  #_#__getattr__
  #_#__getattr__()
  #_#__getattribute__()
  #_#__getitem__()
  #_#__getnewargs__()
  #_#__getnewargs_ex__()
  #_#__getstate__()
  #_#__globals__
  #_#__gt__()
  #_#__hash__()
  #_#__iadd__()
  #_#__iand__()
  #_#__iconcat__()
  #_#__ifloordiv__()
  #_#__ilshift__()
  #_#__imatmul__()
  #_#__imod__()
  #_#__import__
  #_#__import__()
  #_#__imul__()
  #_#__index__()
  #_#__init__()
  #_#__init_subclass__()
  #_#__instancecheck__()
  #_#__int__()
  #_#__interactivehook__
  #_#__inv__()
  #_#__invert__()
  #_#__ior__()
  #_#__ipow__()
  #_#__irshift__()
  #_#__isub__()
  #_#__iter__()
  #_#__itruediv__()
  #_#__ixor__()
  #_#__kwdefaults__
  #_#__le__()
  #_#__len__()
  #_#__length_hint__()
  #_#__loader__
  #_#__lshift__()
  #_#__lt__()
  #_#__main__
  #_#__main__
  #_#__matmul__()
  #_#__missing__()
  #_#__mod__()
  #_#__module__
  #_#__mro__
  #_#__mul__()
  #_#__name__
  #_#__ne__()
  #_#__neg__()
  #_#__new__()
  #_#__next__()
  #_#__not__()
  #_#__or__()
  #_#__package__
  #_#__path__
  #_#__pos__()
  #_#__pow__()
  #_#__prepare__
  #_#__qualname__
  #_#__radd__()
  #_#__rand__()
  #_#__rdivmod__()
  #_#__reduce__()
  #_#__reduce_ex__()
  #_#__repr__()
  #_#__reversed__()
  #_#__rfloordiv__()
  #_#__rlshift__()
  #_#__rmatmul__()
  #_#__rmod__()
  #_#__rmul__()
  #_#__ror__()
  #_#__round__()
  #_#__rpow__()
  #_#__rrshift__()
  #_#__rshift__()
  #_#__rsub__()
  #_#__rtruediv__()
  #_#__rxor__()
  #_#__self__
  #_#__set__()
  #_#__set_name__()
  #_#__setattr__()
  #_#__setitem__()
  #_#__setstate__()
  #_#__slots__
  #_#__spec__
  #_#__stderr__
  #_#__stdin__
  #_#__stdout__
  #_#__str__()
  #_#__sub__()
  #_#__subclasscheck__()
  #_#__subclasses__()
  #_#__subclasshook__()
  #_#__suppress_context__
  #_#__traceback__
  #_#__truediv__()
  #_#__trunc__()
  #_#__unraisablehook__
  #_#__xor__()
  #_#_anonymous_
  #_#_b_base_
  #_#_b_needsfree_
  #_#_fields_
  #_#_length_
  #_#_pack_
  #_#_type_




##___LIST___##
#keywords
py -c 'print("\n".join(sorted(__import__("keyword").kwlist)))'
  #:#False
  #:#None
  #:#True
  #:#and
  #:#as
  #:#assert
  #:#async
  #:#await
  #:#break
  #:#class
  #:#continue
  #:#def
  #:#del
  #:#elif
  #:#else
  #:#except
  #:#finally
  #:#for
  #:#from
  #:#global
  #:#if
  #:#import
  #:#in
  #:#is
  #:#lambda
  #:#nonlocal
  #:#not
  #:#or
  #:#pass
  #:#raise
  #:#return
  #:#try
  #:#while
  #:#with
  #:#yield


##___LIST___##
#builtins
py -c 'print("\n".join(sorted(dir(__builtins__))))'
  #@#ArithmeticError
  #@#AssertionError
  #@#AttributeError
  #@#BaseException
  #@#BlockingIOError
  #@#BrokenPipeError
  #@#BufferError
  #@#BytesWarning
  #@#ChildProcessError
  #@#ConnectionAbortedError
  #@#ConnectionError
  #@#ConnectionRefusedError
  #@#ConnectionResetError
  #@#DeprecationWarning
  #@#EOFError
  #@#Ellipsis
  #@#EnvironmentError
  #@#Exception
  #@#False
  #@#FileExistsError
  #@#FileNotFoundError
  #@#FloatingPointError
  #@#FutureWarning
  #@#GeneratorExit
  #@#IOError
  #@#ImportError
  #@#ImportWarning
  #@#IndentationError
  #@#IndexError
  #@#InterruptedError
  #@#IsADirectoryError
  #@#KeyError
  #@#KeyboardInterrupt
  #@#LookupError
  #@#MemoryError
  #@#ModuleNotFoundError
  #@#NameError
  #@#None
  #@#NotADirectoryError
  #@#NotImplemented
  #@#NotImplementedError
  #@#OSError
  #@#OverflowError
  #@#PendingDeprecationWarning
  #@#PermissionError
  #@#ProcessLookupError
  #@#RecursionError
  #@#ReferenceError
  #@#ResourceWarning
  #@#RuntimeError
  #@#RuntimeWarning
  #@#StopAsyncIteration
  #@#StopIteration
  #@#SyntaxError
  #@#SyntaxWarning
  #@#SystemError
  #@#SystemExit
  #@#TabError
  #@#TimeoutError
  #@#True
  #@#TypeError
  #@#UnboundLocalError
  #@#UnicodeDecodeError
  #@#UnicodeEncodeError
  #@#UnicodeError
  #@#UnicodeTranslateError
  #@#UnicodeWarning
  #@#UserWarning
  #@#ValueError
  #@#Warning
  #@#ZeroDivisionError
  #@#__build_class__
  #@#__debug__
  #@#__doc__
  #@#__import__
  #@#__loader__
  #@#__name__
  #@#__package__
  #@#__spec__
  #@#abs
  #@#all
  #@#any
  #@#ascii
  #@#bin
  #@#bool
  #@#breakpoint
  #@#bytearray
  #@#bytes
  #@#callable
  #@#chr
  #@#classmethod
  #@#compile
  #@#complex
  #@#copyright
  #@#credits
  #@#delattr
  #@#dict
  #@#dir
  #@#divmod
  #@#enumerate
  #@#eval
  #@#exec
  #@#exit
  #@#filter
  #@#float
  #@#format
  #@#frozenset
  #@#getattr
  #@#globals
  #@#hasattr
  #@#hash
  #@#help
  #@#hex
  #@#id
  #@#input
  #@#int
  #@#isinstance
  #@#issubclass
  #@#iter
  #@#len
  #@#license
  #@#list
  #@#locals
  #@#map
  #@#max
  #@#memoryview
  #@#min
  #@#next
  #@#object
  #@#oct
  #@#open
  #@#ord
  #@#pow
  #@#print
  #@#property
  #@#quit
  #@#range
  #@#repr
  #@#reversed
  #@#round
  #@#set
  #@#setattr
  #@#slice
  #@#sorted
  #@#staticmethod
  #@#str
  #@#sum
  #@#super
  #@#tuple
  #@#type
  #@#vars
  #@#zip











##___LIST___##
#package/module
file:///storage/emulated/0/0my_files/unzip/py_doc/python-3.8.1-docs-html/py-modindex.html
  #***#_
      #**#=__future__:::Future statement definitions
      #**#=__main__:::The environment where the top-level script is run.
      #**#=_dummy_thread:::Drop-in replacement for the _thread module.
      #**#=_thread:::Low-level threading API.

  #***#a
      #**#=abc:::Abstract base classes according to :pep:`3119`.
      #**#=aifc:::Read and write audio files in AIFF or AIFC format.
      #**#=argparse:::Command-line option and argument parsing library.
      #**#=array:::Space efficient arrays of uniformly typed numeric values.
      #**#=ast:::Abstract Syntax Tree classes and manipulation.
      #**#=asynchat:::Support for asynchronous command/response protocols.
      #**#=asyncio:::Asynchronous I/O.
      #**#=asyncore:::A base class for developing asynchronous socket handling services.
      #**#=atexit:::Register and execute cleanup functions.
      #**#=audioop:::Manipulate raw audio data.

  #***#b
      #**#=base64:::RFC 3548: Base16, Base32, Base64 Data Encodings; Base85 and Ascii85
      #**#=bdb:::Debugger framework.
      #**#=binascii:::Tools for converting between binary and various ASCII-encoded binary representations.
      #**#=binhex:::Encode and decode files in binhex4 format.
      #**#=bisect:::Array bisection algorithms for binary searching.
      #**#=builtins:::The module that provides the built-in namespace.
      #**#=bz2:::Interfaces for bzip2 compression and decompression.

  #***#c
      #**#=calendar:::Functions for working with calendars, including some emulation of the Unix cal program.
      #**#=cgi:::Helpers for running Python scripts via the Common Gateway Interface.
      #**#=cgitb:::Configurable traceback handler for CGI scripts.
      #**#=chunk:::Module to read IFF chunks.
      #**#=cmath:::Mathematical functions for complex numbers.
      #**#=cmd:::Build line-oriented command interpreters.
      #**#=code:::Facilities to implement read-eval-print loops.
      #**#=codecs:::Encode and decode data and streams.
      #**#=codeop:::Compile (possibly incomplete) Python code.
      #**#+collections:::Container datatypes
          #*#-collections.abc:::Abstract base classes for containers
      #**#=colorsys:::Conversion functions between RGB and other color systems.
      #**#=compileall:::Tools for byte-compiling all Python source files in a directory tree.
      #**#+concurrent:::
          #*#-concurrent.futures:::Execute computations concurrently using threads or processes.
      #**#=configparser:::Configuration file parser.
      #**#=contextlib:::Utilities for with-statement contexts.
      #**#=contextvars:::Context Variables
      #**#=copy:::Shallow and deep copy operations.
      #**#=copyreg:::Register pickle support functions.
      #**#=cProfile:::
      #**#=crypt@@@(Unix):::The crypt() function used to check Unix passwords.
      #**#=csv:::Write and read tabular data to and from delimited files.
      #**#=ctypes:::A foreign function library for Python.
      #**#+curses@@@(Unix):::An interface to the curses library, providing portable terminal handling.
          #*#-curses.ascii:::Constants and set-membership functions for ASCII characters.
          #*#-curses.panel:::A panel stack extension that adds depth to curses windows.
          #*#-curses.textpad:::Emacs-like input editing in a curses window.

  #***#d
      #**#=dataclasses:::Generate special methods on user-defined classes.
      #**#=datetime:::Basic date and time types.
      #**#+dbm:::Interfaces to various Unix "database" formats.
          #*#-dbm.dumb:::Portable implementation of the simple DBM interface.
          #*#-dbm.gnu@@@(Unix):::GNU's reinterpretation of dbm.
          #*#-dbm.ndbm@@@(Unix):::The standard "database" interface, based on ndbm.
      #**#=decimal:::Implementation of the General Decimal Arithmetic Specification.
      #**#=difflib:::Helpers for computing differences between objects.
      #**#=dis:::Disassembler for Python bytecode.
      #**#+distutils:::Support for building and installing Python modules into an existing Python installation.
          #*#-distutils.archive_util:::Utility functions for creating archive files (tarballs, zip files, ...)
          #*#-distutils.bcppcompiler:::
          #*#-distutils.ccompiler:::Abstract CCompiler class
          #*#-distutils.cmd:::Provides the abstract base class :class:`~distutils.cmd.Command`. This class is subclassed by the modules in the distutils.command subpackage.
          #*#-distutils.command:::Contains one module for each standard Distutils command.
          #*#-distutils.command.bdist:::Build a binary installer for a package
          #*#-distutils.command.bdist_dumb:::Build a "dumb" installer - a simple archive of files
          #*#-distutils.command.bdist_msi:::Build a binary distribution as a Windows MSI file
          #*#-distutils.command.bdist_packager:::Abstract base class for packagers
          #*#-distutils.command.bdist_rpm:::Build a binary distribution as a Redhat RPM and SRPM
          #*#-distutils.command.bdist_wininst:::Build a Windows installer
          #*#-distutils.command.build:::Build all files of a package
          #*#-distutils.command.build_clib:::Build any C libraries in a package
          #*#-distutils.command.build_ext:::Build any extensions in a package
          #*#-distutils.command.build_py:::Build the .py/.pyc files of a package
          #*#-distutils.command.build_scripts:::Build the scripts of a package
          #*#-distutils.command.check:::Check the meta-data of a package
          #*#-distutils.command.clean:::Clean a package build area
          #*#-distutils.command.config:::Perform package configuration
          #*#-distutils.command.install:::Install a package
          #*#-distutils.command.install_data:::Install data files from a package
          #*#-distutils.command.install_headers:::Install C/C++ header files from a package
          #*#-distutils.command.install_lib:::Install library files from a package
          #*#-distutils.command.install_scripts:::Install script files from a package
          #*#-distutils.command.register:::Register a module with the Python Package Index
          #*#-distutils.command.sdist:::Build a source distribution
          #*#-distutils.core:::The core Distutils functionality
          #*#-distutils.cygwinccompiler:::
          #*#-distutils.debug:::Provides the debug flag for distutils
          #*#-distutils.dep_util:::Utility functions for simple dependency checking
          #*#-distutils.dir_util:::Utility functions for operating on directories and directory trees
          #*#-distutils.dist:::Provides the Distribution class, which represents the module distribution being built/installed/distributed
          #*#-distutils.errors:::Provides standard distutils exceptions
          #*#-distutils.extension:::Provides the Extension class, used to describe C/C++ extension modules in setup scripts
          #*#-distutils.fancy_getopt:::Additional getopt functionality
          #*#-distutils.file_util:::Utility functions for operating on single files
          #*#-distutils.filelist:::The FileList class, used for poking about the file system and building lists of files.
          #*#-distutils.log:::A simple logging mechanism, :pep:`282`-style
          #*#-distutils.msvccompiler:::Microsoft Compiler
          #*#-distutils.spawn:::Provides the spawn() function
          #*#-distutils.sysconfig:::Low-level access to configuration information of the Python interpreter.
          #*#-distutils.text_file:::Provides the TextFile class, a simple interface to text files
          #*#-distutils.unixccompiler:::UNIX C Compiler
          #*#-distutils.util:::Miscellaneous other utility functions
          #*#-distutils.version:::Implements classes that represent module version numbers.
      #**#=doctest:::Test pieces of code within docstrings.
      #**#=dummy_threading:::Drop-in replacement for the threading module.

  #***#e
      #**#+email:::Package supporting the parsing, manipulating, and generating email messages.
          #*#-email.charset:::Character Sets
          #*#-email.contentmanager:::Storing and Retrieving Content from MIME Parts
          #*#-email.encoders:::Encoders for email message payloads.
          #*#-email.errors:::The exception classes used by the email package.
          #*#-email.generator:::Generate flat text email messages from a message structure.
          #*#-email.header:::Representing non-ASCII headers
          #*#-email.headerregistry:::Automatic Parsing of headers based on the field name
          #*#-email.iterators:::Iterate over a message object tree.
          #*#-email.message:::The base class representing email messages.
          #*#-email.mime:::Build MIME messages.
          #*#-email.parser:::Parse flat text email messages to produce a message object structure.
          #*#-email.policy:::Controlling the parsing and generating of messages
          #*#-email.utils:::Miscellaneous email package utilities.
      #**#+encodings:::
          #*#-encodings.idna:::Internationalized Domain Names implementation
          #*#-encodings.mbcs:::Windows ANSI codepage
          #*#-encodings.utf_8_sig:::UTF-8 codec with BOM signature
      #**#=ensurepip:::Bootstrapping the "pip" installer into an existing Python installation or virtual environment.
      #**#=enum:::Implementation of an enumeration class.
      #**#=errno:::Standard errno system symbols.

  #***#f
      #**#=faulthandler:::Dump the Python traceback.
      #**#=fcntl@@@(Unix):::The fcntl() and ioctl() system calls.
      #**#=filecmp:::Compare files efficiently.
      #**#=fileinput:::Loop over standard input or a list of files.
      #**#=fnmatch:::Unix shell style filename pattern matching.
      #**#=formatter:::Deprecated: Generic output formatter and device interface.
      #**#=fractions:::Rational numbers.
      #**#=ftplib:::FTP protocol client (requires sockets).
      #**#=functools:::Higher-order functions and operations on callable objects.

  #***#g
      #**#=gc:::Interface to the cycle-detecting garbage collector.
      #**#=getopt:::Portable parser for command line options; support both short and long option names.
      #**#=getpass:::Portable reading of passwords and retrieval of the userid.
      #**#=gettext:::Multilingual internationalization services.
      #**#=glob:::Unix shell style pathname pattern expansion.
      #**#=grp@@@(Unix):::The group database (getgrnam() and friends).
      #**#=gzip:::Interfaces for gzip compression and decompression using file objects.

  #***#h
      #**#=hashlib:::Secure hash and message digest algorithms.
      #**#=heapq:::Heap queue algorithm (a.k.a. priority queue).
      #**#=hmac:::Keyed-Hashing for Message Authentication (HMAC) implementation
      #**#+html:::Helpers for manipulating HTML.
          #*#-html.entities:::Definitions of HTML general entities.
          #*#-html.parser:::A simple parser that can handle HTML and XHTML.
      #**#+http:::HTTP status codes and messages
          #*#-http.client:::HTTP and HTTPS protocol client (requires sockets).
          #*#-http.cookiejar:::Classes for automatic handling of HTTP cookies.
          #*#-http.cookies:::Support for HTTP state management (cookies).
          #*#-http.server:::HTTP server and request handlers.

  #***#i
      #**#=imaplib:::IMAP4 protocol client (requires sockets).
      #**#=imghdr:::Determine the type of image contained in a file or byte stream.
      #**#=imp:::Deprecated: Access the implementation of the import statement.
      #**#+importlib:::The implementation of the import machinery.
          #*#-importlib.abc:::Abstract base classes related to import
          #*#-importlib.machinery:::Importers and path hooks
          #*#-importlib.resources:::Package resource reading, opening, and access
          #*#-importlib.util:::Utility code for importers
      #**#=inspect:::Extract information and source code from live objects.
      #**#=io:::Core tools for working with streams.
      #**#=ipaddress:::IPv4/IPv6 manipulation library.
      #**#=itertools:::Functions creating iterators for efficient looping.

  #***#j
      #**#+json:::Encode and decode the JSON format.
          #*#-json.tool:::A command line to validate and pretty-print JSON.

  #***#k
      #**#=keyword:::Test whether a string is a keyword in Python.

  #***#l
      #**#=lib2to3:::The 2to3 library
      #**#=linecache:::Provides random access to individual lines from text files.
      #**#=locale:::Internationalization services.
      #**#+logging:::Flexible event logging system for applications.
          #*#-logging.config:::Configuration of the logging module.
          #*#-logging.handlers:::Handlers for the logging module.
      #**#=lzma:::A Python wrapper for the liblzma compression library.

  #***#m
      #**#=mailbox:::Manipulate mailboxes in various formats
      #**#=mailcap:::Mailcap file handling.
      #**#=marshal:::Convert Python objects to streams of bytes and back (with different constraints).
      #**#=math:::Mathematical functions (sin() etc.).
      #**#=mimetypes:::Mapping of filename extensions to MIME types.
      #**#=mmap:::Interface to memory-mapped files for Unix and Windows.
      #**#=modulefinder:::Find modules used by a script.
      #**#=msilib@@@(Windows):::Creation of Microsoft Installer files, and CAB files.
      #**#=msvcrt@@@(Windows):::Miscellaneous useful routines from the MS VC++ runtime.
      #**#+multiprocessing:::Process-based parallelism.
          #*#-multiprocessing.connection:::API for dealing with sockets.
          #*#-multiprocessing.dummy:::Dumb wrapper around threading.
          #*#-multiprocessing.managers:::Share data between process with shared objects.
          #*#-multiprocessing.pool:::Create pools of processes.
          #*#-multiprocessing.shared_memory:::Provides shared memory for direct access across processes.
          #*#-multiprocessing.sharedctypes:::Allocate ctypes objects from shared memory.

  #***#n
      #**#=netrc:::Loading of .netrc files.
      #**#=nis@@@(Unix):::Interface to Sun's NIS (Yellow Pages) library.
      #**#=nntplib:::NNTP protocol client (requires sockets).
      #**#=numbers:::Numeric abstract base classes (Complex, Real, Integral, etc.).

  #***#o
      #**#=operator:::Functions corresponding to the standard operators.
      #**#=optparse:::Deprecated: Command-line option parsing library.
      #**#+os:::Miscellaneous operating system interfaces.
          #*#-os.path:::Operations on pathnames.
      #**#=ossaudiodev@@@(Linux, FreeBSD):::Access to OSS-compatible audio devices.

  #***#p
      #**#=parser:::Access parse trees for Python source code.
      #**#=pathlib:::Object-oriented filesystem paths
      #**#=pdb:::The Python debugger for interactive interpreters.
      #**#=pickle:::Convert Python objects to streams of bytes and back.
      #**#=pickletools:::Contains extensive comments about the pickle protocols and pickle-machine opcodes, as well as some useful functions.
      #**#=pipes@@@(Unix):::A Python interface to Unix shell pipelines.
      #**#=pkgutil:::Utilities for the import system.
      #**#=platform:::Retrieves as much platform identifying data as possible.
      #**#=plistlib:::Generate and parse Mac OS X plist files.
      #**#=poplib:::POP3 protocol client (requires sockets).
      #**#=posix@@@(Unix):::The most common POSIX system calls (normally used via module os).
      #**#=pprint:::Data pretty printer.
      #**#=profile:::Python source profiler.
      #**#=pstats:::Statistics object for use with the profiler.
      #**#=pty@@@(Linux):::Pseudo-Terminal Handling for Linux.
      #**#=pwd@@@(Unix):::The password database (getpwnam() and friends).
      #**#=py_compile:::Generate byte-code files from Python source files.
      #**#=pyclbr:::Supports information extraction for a Python class browser.
      #**#=pydoc:::Documentation generator and online help system.

  #***#q
      #**#=queue:::A synchronized queue class.
      #**#=quopri:::Encode and decode files using the MIME quoted-printable encoding.

  #***#r
      #**#=random:::Generate pseudo-random numbers with various common distributions.
      #**#=re:::Regular expression operations.
      #**#=readline@@@(Unix):::GNU readline support for Python.
      #**#=reprlib:::Alternate repr() implementation with size limits.
      #**#=resource@@@(Unix):::An interface to provide resource usage information on the current process.
      #**#=rlcompleter:::Python identifier completion, suitable for the GNU readline library.
      #**#=runpy:::Locate and run Python modules without importing them first.

  #***#s
      #**#=sched:::General purpose event scheduler.
      #**#=secrets:::Generate secure random numbers for managing secrets.
      #**#=select:::Wait for I/O completion on multiple streams.
      #**#=selectors:::High-level I/O multiplexing.
      #**#=shelve:::Python object persistence.
      #**#=shlex:::Simple lexical analysis for Unix shell-like languages.
      #**#=shutil:::High-level file operations, including copying.
      #**#=signal:::Set handlers for asynchronous events.
      #**#=site:::Module responsible for site-specific configuration.
      #**#=smtpd:::A SMTP server implementation in Python.
      #**#=smtplib:::SMTP protocol client (requires sockets).
      #**#=sndhdr:::Determine type of a sound file.
      #**#=socket:::Low-level networking interface.
      #**#=socketserver:::A framework for network servers.
      #**#=spwd@@@(Unix):::The shadow password database (getspnam() and friends).
      #**#=sqlite3:::A DB-API 2.0 implementation using SQLite 3.x.
      #**#=ssl:::TLS/SSL wrapper for socket objects
      #**#=stat:::Utilities for interpreting the results of os.stat(), os.lstat() and os.fstat().
      #**#=statistics:::Mathematical statistics functions
      #**#=string:::Common string operations.
      #**#=stringprep:::String preparation, as per RFC 3453
      #**#=struct:::Interpret bytes as packed binary data.
      #**#=subprocess:::Subprocess management.
      #**#=sunau:::Provide an interface to the Sun AU sound format.
      #**#=symbol:::Constants representing internal nodes of the parse tree.
      #**#=symtable:::Interface to the compiler's internal symbol tables.
      #**#=sys:::Access system-specific parameters and functions.
      #**#=sysconfig:::Python's configuration information
      #**#=syslog@@@(Unix):::An interface to the Unix syslog library routines.

  #***#t
      #**#=tabnanny:::Tool for detecting white space related problems in Python source files in a directory tree.
      #**#=tarfile:::Read and write tar-format archive files.
      #**#=telnetlib:::Telnet client class.
      #**#=tempfile:::Generate temporary files and directories.
      #**#=termios@@@(Unix):::POSIX style tty control.
      #**#+test:::Regression tests package containing the testing suite for Python.
          #*#-test.support:::Support for Python's regression test suite.
          #*#-test.support.script_helper:::Support for Python's script execution tests.
      #**#=textwrap:::Text wrapping and filling
      #**#=threading:::Thread-based parallelism.
      #**#=time:::Time access and conversions.
      #**#=timeit:::Measure the execution time of small code snippets.
      #**#+tkinter:::Interface to Tcl/Tk for graphical user interfaces
          #*#-tkinter.scrolledtext@@@(Tk):::Text widget with a vertical scroll bar.
          #*#-tkinter.tix:::Tk Extension Widgets for Tkinter
          #*#-tkinter.ttk:::Tk themed widget set
      #**#=token:::Constants representing terminal nodes of the parse tree.
      #**#=tokenize:::Lexical scanner for Python source code.
      #**#=trace:::Trace or track Python statement execution.
      #**#=traceback:::Print or retrieve a stack traceback.
      #**#=tracemalloc:::Trace memory allocations.
      #**#=tty@@@(Unix):::Utility functions that perform common terminal control operations.
      #**#=turtle:::An educational framework for simple graphics applications
      #**#=turtledemo:::A viewer for example turtle scripts
      #**#=types:::Names for built-in types.
      #**#=typing:::Support for type hints (see :pep:`484`).

  #***#u
      #**#=unicodedata:::Access the Unicode Database.
      #**#+unittest:::Unit testing framework for Python.
          #*#-unittest.mock:::Mock object library.
      #**#+urllib:::
          #*#-urllib.error:::Exception classes raised by urllib.request.
          #*#-urllib.parse:::Parse URLs into or assemble them from components.
          #*#-urllib.request:::Extensible library for opening URLs.
          #*#-urllib.response:::Response classes used by urllib.
          #*#-urllib.robotparser:::Load a robots.txt file and answer questions about fetchability of other URLs.
      #**#=uu:::Encode and decode files in uuencode format.
      #**#=uuid:::UUID objects (universally unique identifiers) according to RFC 4122

  #***#v
      #**#=venv:::Creation of virtual environments.

  #***#w
      #**#=warnings:::Issue warning messages and control their disposition.
      #**#=wave:::Provide an interface to the WAV sound format.
      #**#=weakref:::Support for weak references and weak dictionaries.
      #**#=webbrowser:::Easy-to-use controller for Web browsers.
      #**#=winreg@@@(Windows):::Routines and objects for manipulating the Windows registry.
      #**#=winsound@@@(Windows):::Access to the sound-playing machinery for Windows.
      #**#+wsgiref:::WSGI Utilities and Reference Implementation.
          #*#-wsgiref.handlers:::WSGI server/gateway base classes.
          #*#-wsgiref.headers:::WSGI response header tools.
          #*#-wsgiref.simple_server:::A simple WSGI HTTP server.
          #*#-wsgiref.util:::WSGI environment utilities.
          #*#-wsgiref.validate:::WSGI conformance checker.

  #***#x
      #**#=xdrlib:::Encoders and decoders for the External Data Representation (XDR).
      #**#+xml:::Package containing XML processing modules
          #*#-xml.dom:::Document Object Model API for Python.
          #*#-xml.dom.minidom:::Minimal Document Object Model (DOM) implementation.
          #*#-xml.dom.pulldom:::Support for building partial DOM trees from SAX events.
          #*#-xml.etree.ElementTree:::Implementation of the ElementTree API.
          #*#-xml.parsers.expat:::An interface to the Expat non-validating XML parser.
          #*#-xml.parsers.expat.errors:::
          #*#-xml.parsers.expat.model:::
          #*#-xml.sax:::Package containing SAX2 base classes and convenience functions.
          #*#-xml.sax.handler:::Base classes for SAX event handlers.
          #*#-xml.sax.saxutils:::Convenience functions and classes for use with SAX.
          #*#-xml.sax.xmlreader:::Interface which SAX-compliant XML parsers must implement.
      #**#+xmlrpc:::
          #*#-xmlrpc.client:::XML-RPC client access.
          #*#-xmlrpc.server:::Basic XML-RPC server implementations.

  #***#z
      #**#=zipapp:::Manage executable Python zip archives
      #**#=zipfile:::Read and write ZIP-format archive files.
      #**#=zipimport:::Support for importing Python modules from ZIP archives.
      #**#=zlib:::Low-level interface to compression and decompression routines compatible with gzip.




##___LIST___##
##___LIST___##
##___LIST___##
##___LIST___##
##___LIST___##

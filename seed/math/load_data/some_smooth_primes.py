r'''[[[
e ../../python3_src/seed/math/load_data/some_smooth_primes.py
see:
    seed.math.discrete_logarithm
    seed.math.iter_sorted_products_of_uints


seed.math.load_data.some_smooth_primes
py -m nn_ns.app.doctest_cmd seed.math.load_data.some_smooth_primes:__doc__ -ff -v

>>> from seed.math.load_data.some_smooth_primes import SmoothPrime__base_2_3_5__lt_3317044064679887385962123 as SmP #.smooth_primes__sorted, .prime_bases, .smooth_prime__cofactorization__pairs____sorted, .maxpp
>>> _find_max_exps_(SmP.prime_bases, SmP.smooth_prime__cofactorization__pairs____sorted) == [*SmP.max_pairs]
True


#]]]'''#'''

__all__ = r'''
    SmoothPrime__base_2_3_5__lt_3317044064679887385962123
    '''.split()#'''

from seed.algo.findout_all_maximal_points import findout_all_maximal_points__partial_cmp__O_NNcmp_, findout_all_maximal_points__L_tuples__O_LNlogNcmp_plus_LNNuintop_
from seed.tiny import snd

from seed.math.semi_factor_pint_via_trial_division import semi_factor_pint_via_trial_division, calc_num_products_of_coprime_factors__ge1_le, calc_num_products_of_coprime_factors__ge_le, iter_unsorted_products_of_coprime_factors__ge_le
if 0:
    def semi_factor_pint_via_trial_division(candidate_factors, pint, /):
        'Iter factor{>=2} -> pint -> (factor2exp/{factor:exp{>=1}}, unfactored_part{>=1})'
from seed.pkg_tools.load_resource import open_under_pkg_, read_under_pkg_
def _read_():
    txt = read_under_pkg_('seed.math._output_', 'seed.math.iter_sorted_products_of_uints..iter_unsorted_primes_lt__prime_eq_one_plus_product_generated_by_strict_sorted_pairwise_coprime_uints_.2-3-5.out.txt', xencoding='u8')
    return (*map(int, txt.split()),)
def _factors_(prime_bases, smooth_primes, /):
    for q in smooth_primes:
        p2e, _1 = semi_factor_pint_via_trial_division(prime_bases, q-1)
        assert _1 == 1
        es = tuple(p2e.get(p,0) for p in prime_bases)
        yield (q, es)


class SmoothPrime__base_2_3_5__lt_3317044064679887385962123:
    prime_bases = (2,3,5)
    maxpp = 3317044064679887385962123
        #seed.math.prime_gens:is_prime__using_A014233_.upperbound = 3317044064679887385962123
    smooth_primes__unsorted = _read_()
    smooth_primes__sorted = (*sorted(smooth_primes__unsorted),)
    smooth_prime__cofactorization__pairs____sorted = (*_factors_(prime_bases, smooth_primes__sorted),)


    ######################
    #each base:max exp has no duplivates:
    (2, (188894659314785808547841, (75, 0, 1)))
    (3, (2552526178459920315627553, (5, 48, 0)))
    (5, (698491930961608886718751, (1, 1, 33)))
    ######################


    ######################
    #generated by _find_max_exps_:
    max_pairs = tuple(
[(9600000000000000000001, (25, 1, 20))
,(9651146816936671875001, (3, 31, 9))
,(11501279977342425366529, (40, 21, 0))
,(14774058577588912128001, (54, 8, 3))
,(15199648742375424000001, (55, 3, 6))
,(16000000000000000000001, (25, 0, 21))
,(18446744073709551616001, (67, 0, 3))
,(22438101464713160294401, (49, 13, 2))
,(23829992140584375000001, (6, 27, 11))
,(24719238281250000000001, (10, 4, 25))
,(27862813900800000000001, (30, 12, 11))
,(31850496000000000000001, (32, 5, 15))
,(32831241283530915840001, (56, 6, 4))
,(35457740586213389107201, (56, 9, 2))
,(36472996377170786403001, (3, 41, 3))
,(38294359833110460235777, (56, 12, 0))
,(38424226636031774976001, (11, 36, 3))
,(40167756299520000000001, (17, 22, 10))
,(43248779296875000000001, (9, 11, 21))
,(47867949791388075294721, (54, 12, 1))
,(48054199218750000000001, (10, 9, 22))
,(48575812438637700710401, (20, 32, 2))
,(54709494565756179604501, (2, 42, 3))
,(56485907296200000000001, (12, 24, 11))
,(59787112500000000000001, (14, 14, 17))
,(68552970751180800000001, (24, 21, 8))
,(69657034752000000000001, (29, 12, 12))
,(82397460937500000000001, (11, 3, 26))
,(85830688476562500000001, (8, 2, 28))
,(88944969064888368000001, (10, 33, 6))
,(89362470527191406250001, (4, 28, 12))
,(90000000000000000000001, (22, 2, 22))
,(97497558401679360000001, (30, 19, 7))
,(99532800000000000000001, (29, 5, 17))
,(100063090197999414000001, (7, 35, 6))
,(102713477163909120000001, (38, 14, 7))
,(105042229566251864840641, (6, 43, 1))
,(110536959860366678949889, (29, 30, 0))
,(113246208000000000000001, (37, 3, 15))
,(115422332637413376000001, (50, 8, 6))
,(118098000000000000000001, (19, 10, 18))
,(134932812329549168640001, (20, 30, 4))
,(135000000000000000000001, (21, 3, 22))
,(143928333151519113216001, (24, 29, 3))
,(146484375000000000000001, (15, 1, 26))
,(147789188003540039062501, (2, 18, 20))
,(155996093442686976000001, (33, 19, 6))
,(159920370168354570240001, (25, 27, 4))
,(160180664062500000000001, (11, 8, 23))
,(161919374795459002368001, (21, 31, 3))
,(162944197654724121093751, (1, 7, 28))
,(166771816996665690000001, (7, 34, 7))
,(168666015411936460800001, (18, 30, 5))
,(171382426877952000000001, (23, 21, 9))
,(177058836338834419089409, (17, 38, 0))
,(179159040000000000000001, (29, 7, 16))
,(180959002817562597656251, (1, 32, 11))
,(186624000000000000000001, (26, 6, 18))
,(188894659314785808547841, (75, 0, 1))
,(205993652343750000000001, (10, 3, 27))
,(214990848000000000000001, (30, 8, 15))
,(221433750000000000000001, (16, 11, 19))
,(227812500000000000000001, (17, 6, 22))
,(233427176813893032979201, (8, 41, 2))
,(233994140164030464000001, (32, 20, 6))
,(242058175735216736305153, (65, 8, 0))
,(245915050470603359846401, (16, 36, 2))
,(252428641478023053312001, (47, 15, 3))
,(257363915118311250000001, (7, 30, 10))
,(281792804290560000000001, (42, 8, 10))
,(284993413919539200000001, (53, 4, 8))
,(289678573608398437500001, (5, 5, 28))
,(289910292480000000000001, (43, 3, 13))
,(297203348275200000000001, (35, 11, 11))
,(299512499409958993920001, (37, 20, 4))
,(301748514175415039062501, (2, 4, 30))
,(311236235751857377305601, (10, 40, 2))
,(314928000000000000000001, (22, 9, 18))
,(323108661091869508239361, (52, 15, 1))
,(324000000000000000000001, (23, 4, 21))
,(327147519355517877092353, (48, 19, 0))
,(332416317995750522880001, (53, 10, 4))
,(334731302496000000000001, (17, 21, 12))
,(335276126861572265625001, (3, 2, 31))
,(341992096703447040000001, (54, 5, 7))
,(370604037770368200000001, (9, 32, 8))
,(385175539364659200000001, (36, 15, 8))
,(389045294689821721632001, (8, 40, 3))
,(390625000000000000000001, (18, 0, 26))
,(394419752309411020800001, (43, 15, 5))
,(405457305908203125000001, (6, 12, 23))
,(415051741658464911360001, (66, 2, 4))
,(415188281250000000000001, (13, 12, 20))
,(424673280000000000000001, (35, 4, 16))
,(425152800000000000000001, (20, 12, 17))
,(436196692474023836123137, (50, 18, 0))
,(436689224139720213135361, (35, 26, 1))
,(443146905982625054796451, (1, 46, 2))
,(456504342950707200000001, (41, 12, 8))
,(464380231680000000000001, (31, 11, 13))
,(469654673817600000000001, (42, 7, 11))
,(475525357240320000000001, (38, 11, 10))
,(479219999055934390272001, (40, 20, 3))
,(480926385989222400000001, (49, 7, 8))
,(499187499016598323200001, (37, 19, 5))
,(503316480000000000000001, (40, 1, 16))
,(504202701918008951235073, (9, 44, 0))
,(504287866115034867302401, (63, 7, 2))
,(507799783342080000000001, (27, 18, 10))
,(510591464441472803143681, (59, 11, 1))
,(510759433740234375000001, (6, 21, 17))
,(521838526464000000000001, (43, 5, 12))
,(532466665617704878080001, (41, 18, 4))
,(534966026895360000000001, (35, 13, 10))
,(540609741210937500000001, (8, 11, 23))
,(547805211540848640000001, (42, 13, 7))
,(550376570880000000000001, (36, 8, 13))
,(578415690713088000000001, (20, 24, 9))
,(582252298852960284180481, (37, 25, 1))
,(583666511707216281600001, (61, 4, 5))
,(590862541310166739728601, (3, 45, 2))
,(592966460432589120000001, (12, 32, 7))
,(607197655482971258880001, (19, 32, 4))
,(611529523200000000000001, (37, 6, 14))
,(630567202148437500000001, (8, 17, 19))
,(637729200000000000000001, (19, 13, 17))
,(643730163574218750000001, (7, 3, 29))
,(645488468627244630147073, (68, 7, 0))
,(649983722677862400000001, (32, 18, 8))
,(665051346015930175781251, (1, 20, 20))
,(667953313873920000000001, (48, 5, 10))
,(673903123672407736320001, (35, 22, 4))
,(675425858836496044500001, (5, 38, 6))
,(684209203720092773437501, (2, 15, 23))
,(687194767360000000000001, (49, 0, 13))
,(698491930961608886718751, (1, 1, 33))
,(698702758623552341016577, (38, 26, 0))
,(703687441776640000000001, (56, 0, 10))
,(711914062500000000000001, (14, 6, 24))
,(714093445324800000000001, (22, 20, 11))
,(718255453697204589843751, (1, 23, 18))
,(747936715490438676480001, (51, 12, 4))
,(750473176484995605000001, (6, 36, 7))
,(753145430616000000000001, (15, 23, 12))
,(756304052877013426852609, (8, 45, 0))
,(756431799172552300953601, (62, 8, 2))
,(774840978000000000000001, (16, 18, 15))
,(783641640960000000000001, (27, 14, 13))
,(802449040343040000000001, (34, 14, 10))
,(819716834902011199488001, (17, 35, 3))
,(826497043200000000000001, (20, 17, 14))
,(861906544436645507812501, (2, 24, 17))
,(949218750000000000000001, (16, 5, 24))
,(992916339191015625000001, (6, 26, 14))
,(1007769600000000000000001, (26, 9, 17))
,(1088391168000000000000001, (26, 12, 15))
,(1115771008320000000000001, (18, 20, 13))
,(1125000000000000000000001, (21, 2, 24))
,(1138495604030571110400001, (16, 33, 5))
,(1147912560000000000000001, (19, 15, 16))
,(1149208725915527343750001, (4, 23, 17))
,(1162261467000000000000001, (15, 19, 15))
,(1207959552000000000000001, (42, 2, 15))
,(1225822640976562500000001, (8, 22, 16))
,(1230187500000000000000001, (17, 9, 21))
,(1231576566696166992187501, (2, 17, 22))
,(1244160000000000000000001, (28, 5, 19))
,(1260719665287587168256001, (62, 7, 3))
,(1267054080963134765625001, (3, 12, 25))
,(1314732507698036736000001, (44, 14, 6))
,(1345210031250000000000001, (13, 16, 18))
,(1351524353027343750000001, (7, 11, 24))
,(1357868313789367675781251, (1, 6, 30))
,(1361577238510594141716481, (62, 10, 1))
,(1381711998254583486873601, (28, 30, 2))
,(1405550128432803840000001, (18, 29, 7))
,(1415577600000000000000001, (36, 3, 17))
,(1440908498851191561600001, (10, 37, 5))
,(1455630747132400710451201, (36, 25, 2))
,(1473826131471555719331841, (32, 29, 1))
,(1479074071160291328000001, (41, 16, 6))
,(1556444031219243417600001, (64, 3, 5))
,(1579460446107205632000001, (30, 23, 6))
,(1594323000000000000000001, (18, 13, 18))
,(1624959306694656000000001, (31, 18, 9))
,(1632586752000000000000001, (25, 13, 15))
,(1669883284684800000000001, (47, 5, 11))
,(1689405441284179687500001, (5, 11, 25))
,(1729382256910270464000001, (65, 1, 6))
,(1793023523964568417075201, (68, 5, 2))
,(1830143396396880000000001, (13, 28, 10))
,(1865311197643687707279361, (26, 33, 1))
,(1867732837463092101120001, (65, 4, 4))
,(1877117156982421875000001, (6, 9, 26))
,(1932735283200000000000001, (45, 2, 14))
,(1959104102400000000000001, (26, 14, 14))
,(1968300000000000000000001, (20, 9, 20))
,(1974325557634007040000001, (28, 23, 7))
,(1979120929996800000000001, (52, 2, 11))
,(2044671995971986731827201, (46, 19, 2))
,(2046980738154938499072001, (31, 27, 3))
,(2079947912569159680000001, (36, 18, 7))
,(2099520000000000000000001, (24, 8, 19))
,(2109375000000000000000001, (18, 3, 25))
,(2113446032179200000000001, (41, 9, 11))
,(2118221523607500000000001, (11, 25, 13))
,(2164168736951500800000001, (48, 9, 8))
,(2179240250625000000000001, (12, 20, 16))
,(2189469451904296875000001, (6, 15, 22))
,(2240900897413373116600321, (12, 42, 1))
,(2241279404955710521344001, (66, 5, 3))
,(2267481600000000000000001, (24, 11, 17))
,(2288818359375000000000001, (12, 1, 29))
,(2360784484517792254525441, (20, 37, 1))
,(2394184845657348632812501, (2, 22, 19))
,(2440191195195840000000001, (15, 27, 10))
,(2453606395166384078192641, (47, 20, 1))
,(2531250000000000000000001, (19, 4, 24))
,(2552526178459920315627553, (5, 48, 0))
,(2555839994964983414784001, (44, 19, 3))
,(2593635297932144810880001, (10, 39, 4))
,(2597002484341800960000001, (49, 10, 7))
,(2602870608208896000000001, (19, 26, 9))
,(2654208000000000000000001, (33, 4, 18))
,(2665339502805909504000001, (26, 26, 6))
,(2729307650873251332096001, (33, 26, 3))
,(2802520898437500000000001, (11, 15, 20))
,(2814274411818733518750001, (4, 37, 8))
,(2821109907456000000000001, (28, 16, 12))
,(2839822216627759349760001, (45, 17, 4))
,(2919292602539062500000001, (8, 14, 22))
,(3123444729850675200000001, (20, 27, 8))
,(3128528594970703125000001, (6, 8, 27))
,(3166593487994880000000001, (55, 2, 10))
,(3167635202407836914062501, (2, 12, 26))
,(3173748645888000000000001, (25, 18, 12))
,(3242044122415181013600001, (8, 39, 5))
,(3242591731706757120000001, (62, 2, 7))
,(3294258113514384000000001, (13, 30, 9))
]
    )
    ######################
    ######################


r'''[[[
def _find_max_exps_(prime_bases, prime__cofactorization__pairs, /):
    max_ess = []
    for q, es in reversed(prime__cofactorization__pairs):
        idc4remove = []
        for i, es_ in enumerate(max_ess):
            if all(map(int.__le__, es_, es)):
                # es is max
                idc4remove.append(i)
            if not idc4remove:
                if all(map(int.__le__, es, es_)):
                    # es is not max
                    break
        else:
            # es is max
            max_ess.append(es)
            if idc4remove:
                ls = []
                for i in reversed(idc4remove):
                    while max_ess:
                        ls.append(max_ess.pop())
                        if len(max_ess) == i:
                            ls.pop()
                            break
                    else:
                        raise 000
                max_ess.extend(reversed(ls))
    max_ess.reverse()
    s = set(max_ess)
    ls = []
    for q, es in prime__cofactorization__pairs:
        if es in s:
            ls.append((q, es))
    return ls
    return max_ess
#]]]'''#'''
def _find_max_exps_(prime_bases, prime__cofactorization__pairs, /):
    #bug:ls = findout_all_maximal_points__L_tuples__O_LNlogNcmp_plus_LNNuintop_(2, prime__cofactorization__pairs, key=snd, keep_order=True)
    ls = findout_all_maximal_points__L_tuples__O_LNlogNcmp_plus_LNNuintop_(len(prime_bases), prime__cofactorization__pairs, key=snd, keep_order=True)
    return ls
    max_ess = [*map(snd, ls)]
    return max_ess
from seed.math.load_data.some_smooth_primes import SmoothPrime__base_2_3_5__lt_3317044064679887385962123 #.smooth_primes__sorted, .prime_bases, .smooth_prime__cofactorization__pairs____sorted, .maxpp

from seed.math.load_data.some_smooth_primes import *


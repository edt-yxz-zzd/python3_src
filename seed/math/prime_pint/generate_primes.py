#__all__:goto
#TODO:goto
r'''[[[
e ../../python3_src/seed/math/prime_pint/generate_primes.py

py -m seed.math.prime_pint.generate_primes
py -m nn_ns.app.debug_cmd   seed.math.prime_pint.generate_primes -x # -off_defs
py -m nn_ns.app.doctest_cmd seed.math.prime_pint.generate_primes:__doc__ -ht # -ff -df

[[
view script/制表冫间歇性素数数量.py
  ===
  [?[x0 :: real] -> @[f,h :: real{>x0} -> real{>0}] -> [[f(x) /~/ h(x)] <-> [lim{f(x)/h(x) | x-->+oo} == 1]]]
  [?[x0 :: real] -> @[f,h :: real{>x0} -> real{>0}] -> [[have_the_same_order_of_magnitude_(f,h)] <-> [?[C4inferior,C4superior :: real{>0}] -> ?[x1 :: real{>x0}] -> @[x :: real{>x1}] -> [C4inferior <= f(x)/h(x) <= C4superior]]]]
  [?[x0 :: real] -> @[f,g :: real -> real] -> @[h :: real{>x0} -> real{>0}] -> [[f(x) == g(x) +O(h(x))] <-> [have_the_same_order_of_magnitude_((\x->h(x)+abs(f(x)-g(x))),h)]]]
    # big_O_notation
  [?[x0 :: real] -> @[f,g :: real -> real] -> @[h :: real{>x0} -> real{>0}] -> [[f(x) == g(x) +o(h(x))] <-> [lim{(f(x)-g(x))/h(x) | x-->+oo} == 0]]]
    # ???small_O_notation
  ===
  [n :<- [1..]]:
    [PRIMES_S1[n] =[def]= PRIMES[n-1]]
  [PRIMES_S1[1] == PRIMES[0] == 2]
  [PRIMES_S1[7022] == PRIMES[7021] == 70919]

  ===
  [[sufficiently large n] => [PRIMES_S1[n] == n*ln(n) + n*(lnln(n)-1) + o(n*lnln(n)/ln(n))]]

  [[n>=1] -> [1/4*n*ln(n) < PRIMES_S1[n] < 36*n*ln(n)]]

  [[n>=1] -> [PRIMES_S1[n] > n*ln(n)]]
  [[n>=2] -> [PRIMES_S1[n] <= 10**11] -> [n*ln(n) + n*(lnln(n)-1) <= PRIMES_S1[n]]]
  [[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) -0.9385???)]] # [third_coeff4inv_num_primesLE(7022) ~= -0.9384449719153126] => 此处应当是-0.9384而非-0.9385
  [PRIMES_S1[7022] == PRIMES[7021] == 70919]

  [[n>=2] -> [n*ln(n) + n*(lnln(n)-1.0072629) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +(head [err | [(j,p,err) :<- [(7021, 70919, -0.9384) ,(2193, 19381, -0.9002) ,(226, 1433, -0.8031) ,(102, 563, -0.7022) ,(48, 227, -0.6180) ,(24, 97, -0.5079) ,(16, 59, -0.4040) ,(11, 37, -0.3118) ,(9, 29, -0.2366) ,(6, 17, -0.1830) ,(1, 3, 1.1734)]][n>=j+1]])]]
  ==>>:
  [[n>=2] -> [n*ln(n) + n*(lnln(n)-416/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +467/398)]]
  <==>
  [[n>=2] -> [n*ln(n) + n*(lnln(n)-1-3/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +1+69/398)]]

py_adhoc_call   seed.math.continued_fraction.continued_fraction5ND   @list.iter_continued_fraction_digits5ND_  =467 =398
[1, 5, 1, 3, 3, 5]
py_adhoc_call   seed.math.continued_fraction.continued_fraction5ND   @list.iter_continued_fraction_digits5ND_  =-8937680917949958227 =9523926479896484331
[-1, 16, 4, 14, 24, 2, 10, 3, 5, 1149, 3, 20, 1, 1, 3, 1, 74, 2, 1, 8, 86, 1, 4, 2]

estimate_upper_bound4Kth_prime__formula1__using_467over398_:goto

_reduce_coeff__36:goto
    [[n>=2] -> [PRIMES_S1[n] < (277/128)*n*ln(n)]]
    [[n>=3] -> [PRIMES_S1[n] < (28/13)*n*ln(n)]]
    [[n>=364] -> [PRIMES_S1[n] < (3/2)*n*ln(n)]]
_reduce_coeff__4:goto
    # [[n>=3] -> [PRIMES_S1[n] > (27/160)*n*ln(n)]]
        #worse than:[[n>=2] -> [PRIMES_S1[n] > (1/4)*n*ln(n)]]
    [[n>=1] -> [PRIMES_S1[n] > (1/4)*n*ln(n)]]
    [[n>=4] -> [PRIMES_S1[n] > (1/2)*n*ln(n)]]
    [[n>=16] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]
        渐近于1，并且比1大
_reduce_coeff__4 =>:
    [[n>=16] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]
    _iter_main_ratios_ =>:
        [[n>=2] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]



_iter_main_ratios_():goto
    _reduce_coeff__36__refine():goto
_iter_third_coeffs_():goto
    _third_coeff_n7022__refine():goto
_main_ratio4inv_num_primesLE_():goto
_third_coeff4inv_num_primesLE_():goto

[n>=2]:
    [main_ratio4inv_num_primesLE(n) =[def]= PRIMES_S1[n]/(n*ln(n))]
    or: [main_ratio4inv_num_primesLE(n,p::=PRIMES_S1[n]) =[def]= p/(n*ln(n))]
        # --> 1
[n>=3]:
    [third_coeff4inv_num_primesLE(n) =[def]= (PRIMES_S1[n]/n -ln(n) -lnln(n))]
    or: [third_coeff4inv_num_primesLE(n,p:=PRIMES_S1[n]) =[def]= (p/n -ln(n) -lnln(n))]
        # --> -1
[n>=3]:
    [fourth_coeff4inv_num_primesLE(n) =[def]= (PRIMES_S1[n]/n -ln(n) -lnln(n) +1)*ln(n)/lnln(n)]
    or: [fourth_coeff4inv_num_primesLE(n,p:=PRIMES_S1[n]) =[def]= (p/n -ln(n) -lnln(n) +1)*ln(n)/lnln(n)]
        # --> 0

!! [[sufficiently large n] => [PRIMES_S1[n] == n*ln(n) + n*(lnln(n)-1) + o(n*lnln(n)/ln(n))]]
[lim{main_ratio4inv_num_primesLE(n) | n-->+oo} == 1]
[lim{third_coeff4inv_num_primesLE(n) | n-->+oo} == -1]

!! [[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) -0.9385???)]] # [third_coeff4inv_num_primesLE(7022) ~= -0.9384449719153126] => 此处应当是-0.9384而非-0.9385
[[n>=7022] -> [third_coeff4inv_num_primesLE(n) <= third_coeff4inv_num_primesLE(7022)]] #p=70919 # ~= -0.9384449719153132 < (-8937680917949958227/9523926479896484331) ~= -0.9384449719153126 < -0.9384449244060475
==>>:
[[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +(-8937680917949958227/9523926479896484331))]]
==>>:
[[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +(-869/926))]]



[[n>=2] -> [main_ratio4inv_num_primesLE(n) < (277/128)]]
[[n>=3] -> [main_ratio4inv_num_primesLE(n) < (28/13)]]
[[n>=364] -> [main_ratio4inv_num_primesLE(n) < (3/2)]]

[[n>=5] -> [main_ratio4inv_num_primesLE(n) <= main_ratio4inv_num_primesLE(5) ~= 1.3669368560311461]] #p=11
[[n>=17] -> [main_ratio4inv_num_primesLE(n) <= main_ratio4inv_num_primesLE(17) ~= 1.2249653710600534]] #p=59
    #{5,17}:both verified by: [n<=7023][p<=70921]
    #cmd: py_adhoc_call { -lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =7022
    0:('last:', (7023, 70921, 1.1401662919719722), 76175)
    1:(7022, 70919, 1.1403148385025141)
        #   => 1:(5, 11, 1.3669368560311461)
    ... ...
    103:(17, 59, 1.2249653710600534)
    ... ...
    107:(5, 11, 1.3669368560311461)
    ... ...
==>>:
[[n>=17] -> [PRIMES_S1[n] < (1.22497)*n*ln(n)]] #p=59
    (17, 59, Fraction(4546354842071460908, 3711414991378215529), 1.2249653710600534)
    (17, 59, Fraction(893, 729), 1.224965706447188)
[[n>=5] -> [PRIMES_S1[n] < (1.366937)*n*ln(n)]] #p=11
    (5, 11, Fraction(21252087752704591874, 15547234430717813615), 1.366936856031146)
    (5, 11, Fraction(149, 109), 1.3669724770642202)
DONE:
    use [[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +(-8937680917949958227/9523926479896484331))]] instead
    ++kw:using_param6n7022
[(n0,p0) :<- 中选耂主系数尾峰点集牜前千万素数] -> [n>=n0] -> [[main_ratio4inv_num_primesLE(n) <= main_ratio4inv_num_primesLE(n0,p0)][PRIMES_S1[n] <= main_ratio4inv_num_primesLE(n0)*n*ln(n)]]]
    where [中选耂主系数尾峰点集牜前千万素数:=[(7238630, 127396421) ,(7238614, 127396187) ,(7150367, 125750881) ,(6988634, 122739389) ,(6673994, 116881327) ,(6414776, 112068497) ,(6215237, 108373277) ,(6070109, 105692341) ,(5887437, 102320291) ,(5757549, 99928681) ,(4184956, 71209783) ,(3084074, 51473027) ,(2328366, 38163397) ,(1705702, 27388583) ,(1257929, 19787693) ,(85130, 1092019) ,(8598, 88793) ,(7022, 70919) ,(1416, 11813) ,(464, 3301) ,(226, 1429) ,(103, 563) ,(69, 347) ,(49, 227) ,(48, 223) ,(25, 97) ,(17, 59) ,(13, 41) ,(12, 37) ,(10, 29) ,(5, 11) ,(3, 5) ,(2, 3)]]


[[(n0,p0) :<- 中选耂第三系数尾峰点集牜前七千二十二个素数] -> [n>=n0] -> [[third_coeff4inv_num_primesLE(n) <= third_coeff4inv_num_primesLE(n0,p0)][PRIMES_S1[n] <= n*(ln(n) +lnln(n) +third_coeff4inv_num_primesLE(n0))]]]
    where [中选耂第三系数尾峰点集牜前七千二十二个素数:=[(7022, 70919) ,(6934, 69991) ,(3463, 32299) ,(2201, 19427) ,(2194, 19381) ,(1415, 11807) ,(1410, 11777) ,(943, 7451) ,(711, 5393) ,(490, 3511) ,(464, 3301) ,(463, 3299) ,(384, 2657) ,(227, 1433) ,(224, 1423) ,(103, 563) ,(49, 227) ,(25, 97) ,(17, 59) ,(12, 37) ,(10, 29) ,(7, 17) ,(5, 11) ,(3, 5) ,(2, 3)]]


]]


[[[
===
>>> from seed.tiny_.print_iterable_with_lineno_ import print_iterable_with_lineno_, print_iterable_, print_iterable_with_linenoT, print_iterableT


>>> sieve_primes_le_(-0.5)
BitList('')
>>> sieve_primes_le_(16)
BitList('00110101000101000')
>>> sieve_primes_le_(17)
BitList('001101010001010001')
>>> sieve_primes_le_(18)
BitList('0011010100010100010')

>>> [(n, sieve_primes_lt_(n+0.5)) for n in range(32)] == [(n, sieve_primes_le_(n)) for n in range(32)]
True
>>> [(n, sieve_primes_le_(n-0.5)) for n in range(32)] == [(n, sieve_primes_lt_(n)) for n in range(32)]
True

>>> print_iterable_(None, [(n, sieve_primes_le_(n)) for n in range(32)])
(0, BitList('0'))
(1, BitList('00'))
(2, BitList('001'))
(3, BitList('0011'))
(4, BitList('00110'))
(5, BitList('001101'))
(6, BitList('0011010'))
(7, BitList('00110101'))
(8, BitList('001101010'))
(9, BitList('0011010100'))
(10, BitList('00110101000'))
(11, BitList('001101010001'))
(12, BitList('0011010100010'))
(13, BitList('00110101000101'))
(14, BitList('001101010001010'))
(15, BitList('0011010100010100'))
(16, BitList('00110101000101000'))
(17, BitList('001101010001010001'))
(18, BitList('0011010100010100010'))
(19, BitList('00110101000101000101'))
(20, BitList('001101010001010001010'))
(21, BitList('0011010100010100010100'))
(22, BitList('00110101000101000101000'))
(23, BitList('001101010001010001010001'))
(24, BitList('0011010100010100010100010'))
(25, BitList('00110101000101000101000100'))
(26, BitList('001101010001010001010001000'))
(27, BitList('0011010100010100010100010000'))
(28, BitList('00110101000101000101000100000'))
(29, BitList('001101010001010001010001000001'))
(30, BitList('0011010100010100010100010000010'))
(31, BitList('00110101000101000101000100000101'))
>>> print_iterable_(None, [(n, sieve_primes_lt_(n)) for n in range(32)])
(0, BitList(''))
(1, BitList('0'))
(2, BitList('00'))
(3, BitList('001'))
(4, BitList('0011'))
(5, BitList('00110'))
(6, BitList('001101'))
(7, BitList('0011010'))
(8, BitList('00110101'))
(9, BitList('001101010'))
(10, BitList('0011010100'))
(11, BitList('00110101000'))
(12, BitList('001101010001'))
(13, BitList('0011010100010'))
(14, BitList('00110101000101'))
(15, BitList('001101010001010'))
(16, BitList('0011010100010100'))
(17, BitList('00110101000101000'))
(18, BitList('001101010001010001'))
(19, BitList('0011010100010100010'))
(20, BitList('00110101000101000101'))
(21, BitList('001101010001010001010'))
(22, BitList('0011010100010100010100'))
(23, BitList('00110101000101000101000'))
(24, BitList('001101010001010001010001'))
(25, BitList('0011010100010100010100010'))
(26, BitList('00110101000101000101000100'))
(27, BitList('001101010001010001010001000'))
(28, BitList('0011010100010100010100010000'))
(29, BitList('00110101000101000101000100000'))
(30, BitList('001101010001010001010001000001'))
(31, BitList('0011010100010100010100010000010'))


>>> list_primes_le_(-0.5)
()
>>> list_primes_le_(16)
(2, 3, 5, 7, 11, 13)
>>> list_primes_le_(17)
(2, 3, 5, 7, 11, 13, 17)
>>> list_primes_le_(18)
(2, 3, 5, 7, 11, 13, 17)
>>> [(n, list_primes_lt_(n+0.5)) for n in range(32)] == [(n, list_primes_le_(n)) for n in range(32)]
True
>>> [(n, list_primes_le_(n-0.5)) for n in range(32)] == [(n, list_primes_lt_(n)) for n in range(32)]
True
>>> print_iterable_(None, [(n, list_primes_le_(n)) for n in range(32)])
(0, ())
(1, ())
(2, (2,))
(3, (2, 3))
(4, (2, 3))
(5, (2, 3, 5))
(6, (2, 3, 5))
(7, (2, 3, 5, 7))
(8, (2, 3, 5, 7))
(9, (2, 3, 5, 7))
(10, (2, 3, 5, 7))
(11, (2, 3, 5, 7, 11))
(12, (2, 3, 5, 7, 11))
(13, (2, 3, 5, 7, 11, 13))
(14, (2, 3, 5, 7, 11, 13))
(15, (2, 3, 5, 7, 11, 13))
(16, (2, 3, 5, 7, 11, 13))
(17, (2, 3, 5, 7, 11, 13, 17))
(18, (2, 3, 5, 7, 11, 13, 17))
(19, (2, 3, 5, 7, 11, 13, 17, 19))
(20, (2, 3, 5, 7, 11, 13, 17, 19))
(21, (2, 3, 5, 7, 11, 13, 17, 19))
(22, (2, 3, 5, 7, 11, 13, 17, 19))
(23, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(24, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(25, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(26, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(27, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(28, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(29, (2, 3, 5, 7, 11, 13, 17, 19, 23, 29))
(30, (2, 3, 5, 7, 11, 13, 17, 19, 23, 29))
(31, (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31))
>>> print_iterable_(None, [(n, list_primes_lt_(n)) for n in range(32)])
(0, ())
(1, ())
(2, ())
(3, (2,))
(4, (2, 3))
(5, (2, 3))
(6, (2, 3, 5))
(7, (2, 3, 5))
(8, (2, 3, 5, 7))
(9, (2, 3, 5, 7))
(10, (2, 3, 5, 7))
(11, (2, 3, 5, 7))
(12, (2, 3, 5, 7, 11))
(13, (2, 3, 5, 7, 11))
(14, (2, 3, 5, 7, 11, 13))
(15, (2, 3, 5, 7, 11, 13))
(16, (2, 3, 5, 7, 11, 13))
(17, (2, 3, 5, 7, 11, 13))
(18, (2, 3, 5, 7, 11, 13, 17))
(19, (2, 3, 5, 7, 11, 13, 17))
(20, (2, 3, 5, 7, 11, 13, 17, 19))
(21, (2, 3, 5, 7, 11, 13, 17, 19))
(22, (2, 3, 5, 7, 11, 13, 17, 19))
(23, (2, 3, 5, 7, 11, 13, 17, 19))
(24, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(25, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(26, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(27, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(28, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(29, (2, 3, 5, 7, 11, 13, 17, 19, 23))
(30, (2, 3, 5, 7, 11, 13, 17, 19, 23, 29))
(31, (2, 3, 5, 7, 11, 13, 17, 19, 23, 29))








[PRIMES_S1[7022] == PRIMES[7021] == 70919]
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398_(7021) # 70919
85748
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398_(1)
3
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398_(7021, inexact=True) # 70919
85748
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398_(1, inexact=True)
3
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7021) # 70919 < 85748
90983
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(1) # 3
6


it is slow to eval lnln(n) exactly...
>>> max_p = 10**5; ps = list_primes_lt_(max_p); all(p <= estimate_upper_bound4Kth_prime__formula1__using_467over398_(k) for k, p in enumerate(ps)) #doctest: +SKIP
True

it is slow to eval lnln(n) inexactly, too...
>>> max_p = 10**5; ps = list_primes_lt_(max_p); all(p <= estimate_upper_bound4Kth_prime__formula1__using_467over398_(k, inexact=True) for k, p in enumerate(ps)) #doctest: +SKIP
True


ok:fast enough
>>> max_p = 10**5; ps = list_primes_lt_(max_p); all(p <= estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(k) for k, p in enumerate(ps)) #doctest: +SKIP
True





>>> list_primes__len_ge_(-1)
()
>>> list_primes__len_ge_(0)
()
>>> list_primes__len_ge_(0.5)
(2,)
>>> list_primes__len_ge_(1)
(2,)
>>> list_primes__len_ge_(2)
(2, 3, 5)
>>> list_primes__len_ge_(3)
(2, 3, 5, 7)
>>> list_primes__len_ge_(4)
(2, 3, 5, 7, 11, 13)
>>> list_primes__len_ge_(5)
(2, 3, 5, 7, 11, 13, 17)


#>>> list_primes__len_ge_(7021)
#>>> list_primes__len_ge_(7022)
#>>> list_primes__len_ge_(10**4)
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7017, using_best_param_known=True)
76169
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7018, using_best_param_known=True)
76180
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7019, using_best_param_known=True)
76191
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7020, using_best_param_known=True, _with_param=True)
(76201, Fraction(-16283427684683656592, 17507783589985676623))
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7021, using_best_param_known=True, _with_param=True) #k+1==7022#p==70919
(76153, Fraction(-8937680917949958227, 9523926479896484331))
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7022, using_best_param_known=True)
76164
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7023, using_best_param_known=True)
76175
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(7024, using_best_param_known=True)
76186
>>> estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(10000, using_best_param_known=True)
115393

]]]
[[
>>> __ = [中选耂主系数尾峰点集牜前千万素数:=[(7238630, 127396421) ,(7238614, 127396187) ,(7150367, 125750881) ,(6988634, 122739389) ,(6673994, 116881327) ,(6414776, 112068497) ,(6215237, 108373277) ,(6070109, 105692341) ,(5887437, 102320291) ,(5757549, 99928681) ,(4184956, 71209783) ,(3084074, 51473027) ,(2328366, 38163397) ,(1705702, 27388583) ,(1257929, 19787693) ,(85130, 1092019) ,(8598, 88793) ,(7022, 70919) ,(1416, 11813) ,(464, 3301) ,(226, 1429) ,(103, 563) ,(69, 347) ,(49, 227) ,(48, 223) ,(25, 97) ,(17, 59) ,(13, 41) ,(12, 37) ,(10, 29) ,(5, 11) ,(3, 5) ,(2, 3)]]
>>> __ = [中选耂第三系数尾峰点集牜前七千二十二个素数:=[(7022, 70919) ,(6934, 69991) ,(3463, 32299) ,(2201, 19427) ,(2194, 19381) ,(1415, 11807) ,(1410, 11777) ,(943, 7451) ,(711, 5393) ,(490, 3511) ,(464, 3301) ,(463, 3299) ,(384, 2657) ,(227, 1433) ,(224, 1423) ,(103, 563) ,(49, 227) ,(25, 97) ,(17, 59) ,(12, 37) ,(10, 29) ,(7, 17) ,(5, 11) ,(3, 5) ,(2, 3)]]

def _main_ratio4inv_num_primesLE_(n, p=None, /, *, max_denominator=None):
def _third_coeff4inv_num_primesLE_(n, p=None, /, *, max_denominator=None, to_add1=False):
#>>> from fractions import Fraction
#>>> from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_
>>> for n,p in 中选耂主系数尾峰点集牜前千万素数:_main_ratio4inv_num_primesLE_(n,p,max_denominator=1<<64)
(7238630, 127396421, Fraction(5283442652748428569, 4741701368381481943), 1.1142504013389318)
(7238614, 127396187, Fraction(11322159901445917414, 10161229534851388591), 1.114250973527635)
(7150367, 125750881, Fraction(8142672284776846982, 7307433057703751125), 1.1142999491719678)
(6988634, 122739389, Fraction(10165622249286547151, 9122059269571974802), 1.1143999341459594)
(6673994, 116881327, Fraction(407113281682899836, 365287834995990887), 1.1144999714741883)
(6414776, 112068497, Fraction(14136414846554423970, 12682949069632986217), 1.11459998529849)
(6215237, 108373277, Fraction(17227294250904267475, 15454648206591138874), 1.1146998637961314)
(6070109, 105692341, Fraction(5370566794751158766, 4817516169435022663), 1.1147999520634708)
(5887437, 102320291, Fraction(9255612889870684979, 8301743604809618406), 1.1148998729024155)
(5757549, 99928681, Fraction(4336766645465841546, 3889476872817861151), 1.1149999825873567)
(4184956, 71209783, Fraction(5995688148686953452, 5372480680089667061), 1.1159999459666525)
(3084074, 51473027, Fraction(1337099684537349509, 1197045566088300683), 1.1169998222429551)
(2328366, 38163397, Fraction(6931426378929484338, 6199845581738867801), 1.117999841696933)
(1705702, 27388583, Fraction(148416066209399726, 132632787121574491), 1.1189998297582173)
(1257929, 19787693, Fraction(1763475734227163775, 1574532011071474412), 1.1199999249472943)
(85130, 1092019, Fraction(19322981157156253974, 17100013620960575191), 1.1299979979823436)
(8598, 88793, Fraction(2585864436960577239, 2268393437942292308), 1.139954116295747)
(7022, 70919, Fraction(462304037211069279, 405417891271306079), 1.1403148385025144)
(1416, 11813, Fraction(1947563090945597789, 1693820538771886994), 1.1498048620650734)
(464, 3301, Fraction(10178039176920125849, 8784090057148451049), 1.158690212725823)
(226, 1429, Fraction(1651238173029389191, 1415559351884599133), 1.166491656341375)
(103, 563, Fraction(9883347064689993971, 8380254741686782629), 1.1793611732977782)
(69, 347, Fraction(1079964777474229525, 909266070154841857), 1.1877324063025017)
(49, 227, Fraction(14152320141811837826, 11889145607356367557), 1.1903563644687083)
(48, 223, Fraction(4671251999841625024, 3892381445164284689), 1.200101291625715)
(25, 97, Fraction(23208855465514691, 19254232933197281), 1.2053897730456469)
(17, 59, Fraction(4546354842071460908, 3711414991378215529), 1.2249653710600534)
(13, 41, Fraction(3826818068224209532, 3112261685067817351), 1.2295939273309602)
(12, 37, Fraction(1965267718733867215, 1583840050668804349), 1.2408246135106877)
(10, 29, Fraction(12324823954846243578, 9785846866277544715), 1.2594539975194303)
(5, 11, Fraction(21252087752704591874, 15547234430717813615), 1.366936856031146)
(3, 5, Fraction(14436582957353755875, 9516124465995262291), 1.5170653777113956)
(2, 3, Fraction(13211246887446691359, 6104892354476684828), 2.1640425613334453)


>>> for n,p in 中选耂第三系数尾峰点集牜前七千二十二个素数:
...     #if n >= 3:_third_coeff4inv_num_primesLE_(n,p,max_denominator=1<<64)
...     _third_coeff4inv_num_primesLE_(n,p,max_denominator=1<<64)
(7022, 70919, Fraction(-8937680917949958227, 9523926479896484331), -0.9384449719153126)
(6934, 69991, Fraction(-16283427684683656592, 17507783589985676623), -0.9300679095666716)
(3463, 32299, Fraction(-5300976768999391794, 5755607378477966345), -0.9210108369833249)
(2201, 19427, Fraction(-8449115367794934233, 9274428753023099002), -0.911011944001495)
(2194, 19381, Fraction(-63815349012167534, 70888782064076653), -0.9002178786833238)
(1415, 11807, Fraction(-4907053136333821975, 5498775192945144627), -0.8923902076647007)
(1410, 11777, Fraction(-2390295157455647533, 2716091159943447081), -0.8800496804773729)
(943, 7451, Fraction(-8877153337734324423, 10182556728375862090), -0.871800037508875)
(711, 5393, Fraction(-13812915340983389308, 15994793348835058775), -0.8635882339792417)
(490, 3511, Fraction(-4222081971979631577, 4951161279847165142), -0.852745797064797)
(464, 3301, Fraction(-6863017376154945289, 8165725309374318866), -0.8404663537084875)
(463, 3299, Fraction(-1066515223372708863, 1289757298737558073), -0.8269115626766653)
(384, 2657, Fraction(-6128329054259179467, 7520613223699439252), -0.814870925012763)
(227, 1433, Fraction(-2035585481770098477, 2534396938409726981), -0.8031833731015234)
(224, 1423, Fraction(-3638520768777641143, 4867450948914068289), -0.7475207879782327)
(103, 563, Fraction(-1279983444639738513, 1822592334329722772), -0.7022872973458795)
(49, 227, Fraction(-3272429477572520833, 5294814398693076902), -0.6180442280243585)
(25, 97, Fraction(-6219810119314288160, 12245938457487303491), -0.5079080007552567)
(17, 59, Fraction(-5464768436054426632, 13525428098478653905), -0.404036633536879)
(12, 37, Fraction(-735370855075673159, 2358406097834894626), -0.3118084098199929)
(10, 29, Fraction(-106723875297850143, 451039580965878764), -0.2366175382420015)
(7, 17, Fraction(-1271533922304677086, 6945671737940182595), -0.18306853106216114)
(5, 11, Fraction(819767841611021608, 7148488208124785951), 0.11467709223878901)
(3, 5, Fraction(135236611098311740, 285305363373914593), 0.47400655038185796)
(2, 3, Fraction(15610327141060647608, 13303888641551525287), 1.173365740021719)
>>> 467/398
1.1733668341708543
>>> 
>>> 

]]






[[[
py_adhoc_call   seed.math.prime_pint.generate_primes   @list_primes_le_ =1000
(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997)

py_adhoc_call  { +lineno }  seed.math.prime_pint.generate_primes   ,list_primes_le_ =1000
===
1:2
2:3
3:5
4:7
5:11
6:13
7:17
8:19
9:23
10:29
11:31
12:37
13:41
14:43
15:47
16:53
17:59
18:61
19:67
20:71
21:73
22:79
23:83
24:89
25:97
26:101
27:103
28:107
29:109
30:113
31:127
32:131
33:137
34:139
35:149
36:151
37:157
38:163
39:167
40:173
41:179
42:181
43:191
44:193
45:197
46:199
47:211
48:223
49:227
50:229
51:233
52:239
53:241
54:251
55:257
56:263
57:269
58:271
59:277
60:281
61:283
62:293
63:307
64:311
65:313
66:317
67:331
68:337
69:347
70:349
71:353
72:359
73:367
74:373
75:379
76:383
77:389
78:397
79:401
80:409
81:419
82:421
83:431
84:433
85:439
86:443
87:449
88:457
89:461
90:463
91:467
92:479
93:487
94:491
95:499
96:503
97:509
98:521
99:523
100:541
101:547
102:557
103:563
104:569
105:571
106:577
107:587
108:593
109:599
110:601
111:607
112:613
113:617
114:619
115:631
116:641
117:643
118:647
119:653
120:659
121:661
122:673
123:677
124:683
125:691
126:701
127:709
128:719
129:727
130:733
131:739
132:743
133:751
134:757
135:761
136:769
137:773
138:787
139:797
140:809
141:811
142:821
143:823
144:827
145:829
146:839
147:853
148:857
149:859
150:863
151:877
152:881
153:883
154:887
155:907
156:911
157:919
158:929
159:937
160:941
161:947
162:953
163:967
164:971
165:977
166:983
167:991
168:997

]]]
[[[
===
py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 '=range(2,2001)' -using_param6n7022
(2, 2.1640441398569763)
(3, 2.153650541561017)
(4, 2.082022069928488)
(5, 2.024737777553438)
(6, 1.9803575452626436)
(7, 1.9451087171943486)
(8, 1.9163355468593775)
(9, 1.8922901475662373)
(10, 1.8718024300281533)
... ...
(359, 1.5006505294236572)
(360, 1.5004942390541738)
(361, 1.5003384914920204)
(362, 1.5001832833141302)
(363, 1.5000286111285766)
(364, 1.4998744715742005)
(365, 1.4997208613202495)
(366, 1.4995677770660174)
(367, 1.4994152155404912)
... ...
(1997, 1.4212748038933352)
(1998, 1.4212557212526478)
(1999, 1.4212366501019496)
(2000, 1.421217590428469)

]]]
[[[
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 '=[10**e for e in range(1,16)]' -using_param6n7022
1:(10, 1.8718024300281533)
2:(100, 1.5864162128460673)
3:(1000, 1.4496412282492719)
4:(10000, 1.3684656053390287)
5:(100000, 1.3141544868728343)
6:(1000000, 1.2749922800686329)
7:(10000000, 1.2452714957203443)
8:(100000000, 1.221861552127512)
9:(1000000000, 1.202893882163053)
10:(10000000000, 1.1871802430028153)
11:(100000000000, 1.173926828653307)
12:(1000000000000, 1.162581973006315)
13:(10000000000000, 1.15274967556423)
14:(100000000000000, 1.1441378904075994)
15:(1000000000000000, 1.1365262459389223)

===
9:(1000000000, 1.202893882163053)
10:(10000000000, 1.1871802430028153)
vs:[force_max_ge_nT:=1]:
    ???:(49, 227, 1.1903563644687083)
    ???:(48, 223, 1.2001012916257148)
===
py_adhoc_call  seed.math.prime_pint.generate_primes   ,_bisect4reduce_coeff__36 '=1.2001012916257148' '=10**12' -using_param6n7022
(1462321839, 1.2001012916273575)
    ???:(48, 223, 1.2001012916257148)
(1462321840, 1.200101291622409)
===
py_adhoc_call  seed.math.prime_pint.generate_primes   ,_bisect4reduce_coeff__36 '=1.1903563644687083' '=10**12' -using_param6n7022
(6069102643, 1.1903563644694328)
    ???:(49, 227, 1.1903563644687083)
(6069102644, 1.190356364468365)
===
11:(100000000000, 1.173926828653307)
vs:[force_max_ge_nT:=1]:
    ???:(226, 1429, 1.1664916563413747)
    ???:(225, 1427, 1.1709942119316805)
    ???:(224, 1423, 1.173890256413011)
    ???:(107, 587, 1.1740171751963917)
    ???:(104, 569, 1.178013213135294)
    ???:(103, 563, 1.1793611732977782)
    ???:(102, 557, 1.1807170623880265)
    ???:(69, 347, 1.1877324063025014)
    ???:(49, 227, 1.1903563644687083)
    ???:101:(48, 223, 1.2001012916257148)
    ???:102:(25, 97, 1.2053897730456469)
    #below verified by: [2..=10**8]
    103:(17, 59, 1.2249653710600534)
    104:(13, 41, 1.2295939273309602)
    105:(12, 37, 1.2408246135106877)
    106:(10, 29, 1.25945399751943)
    107:(5, 11, 1.3669368560311461)
    108:(3, 5, 1.5170653777113956)
    109:(2, 3, 2.1640425613334453)


py_adhoc_call  seed.math.prime_pint.generate_primes   ,_bisects4reduce_coeff__36 '=[1.1664916563413747,1.1709942119316805,1.173890256413011,1.1740171751963917,1.178013213135294,1.1793611732977782,1.1807170623880265,1.1877324063025014,1.1903563644687083,1.2001012916257148,1.2053897730456469,1.2249653710600534,1.2295939273309602,1.2408246135106877,1.25945399751943,1.3669368560311461,1.5170653777113956,2.1640425613334453]' '=10**12' -using_param6n7022
1.1664916563413747
(434904531280, 1.1664916563413827)
(434904531281, 1.1664916563413716)
1.1709942119316805
(175584477853, 1.170994211931689)
(175584477854, 1.1709942119316599)
1.173890256413011
(100691531174, 1.1738902564130527)
(100691531175, 1.173890256413)
1.1740171751963917
(98313306906, 1.1740171751964121)
(98313306907, 1.1740171751963582)
1.178013213135294
(47219438450, 1.1780132131353653)
(47219438451, 1.178013213135247)
1.1793611732977782
(37171974160, 1.1793611732978244)
(37171974161, 1.1793611732976716)
1.1807170623880265
(29337623844, 1.180717062388102)
(29337623845, 1.1807170623879053)
1.1877324063025014
(9156167207, 1.1877324063027501)
(9156167208, 1.187732406302064)
1.1903563644687083
(6069102643, 1.1903563644694328)
(6069102644, 1.190356364468365)
1.2001012916257148
(1462321839, 1.2001012916273575)
(1462321840, 1.200101291622409)
1.2053897730456469
(718939056, 1.205389773056081)
(718939057, 1.2053897730454168)
1.2249653710600534
(71464472, 1.2249653710921007)
(71464473, 1.2249653709608193)
1.2295939273309602
(44118427, 1.229593927354202)
(44118428, 1.229593927131712)
1.2408246135106877
(14906610, 1.2408246137642427)
(14906611, 1.2408246130320353)
1.25945399751943
(3097350, 1.259453999394994)
(3097351, 1.259453995235705)
1.3669368560311461
(10559, 1.3669378981245135)
(10560, 1.3669352507046368)
1.5170653777113956
(270, 1.5172621178563215)
(271, 1.5170386087541194)
2.1640425613334453
(2, 2.1640441398569763)
(3, 2.153650541561017)

===
>>> from math import *
>>> log10(434904531281)
11.63839393261379
>>> log2(10**12)
39.86313713864835

10**8 => 600seconds|10minutes
10**12 => 10_0000minutes|70days
===
]]]
[[[
===
py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__4 '=range(2,2001)'
(2, -0.9819410388282122)
(3, 0.16875488803371386)
(4, 0.509029480585894)
(5, 0.6698357090473925)
(6, 0.7633243473700176)
(7, 0.824486186011369)
(8, 0.8676738206309813)
(9, 0.8998423208025856)
(10, 0.9247665253296018)
(11, 0.9446712535365898)
(12, 0.9609527266703914)
(13, 0.9745315876978173)
(14, 0.9860396586207674)
(15, 0.9959251015500844)
(16, 1.004514740292947)
(17, 1.0120526053317724)
(18, 1.0187246526802871)
(19, 1.0246751172355728)
(20, 1.0300176282909643)
... ...
(61, 1.0988528755288758)
(62, 1.099419924782162)
(63, 1.0999698987465072)
(64, 1.1005035769821574)
(65, 1.101021691579422)
(66, 1.1015249307497896)
(67, 1.1020139420940982)
... ...
(1998, 1.134326920276889)
(1999, 1.134326739189667)
(2000, 1.1343265576470292)

]]]
[[[
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__4 +to_sub1 '=(1<<ez for ez in range(1,1+200))'
1:(2, -1.9819410388282122)
2:(4, -0.49097051941410597)
3:(8, -0.13232617936901864)
4:(16, 0.004514740292946968)
5:(32, 0.06799741121183009)
6:(64, 0.10050357698215735)
7:(128, 0.11791626903277028)
8:(256, 0.1272573701464735)
9:(512, 0.13199821806823336)
10:(1024, 0.13399870560591504)
    ###max@1707.7381300813104
    #(1707.7381300813104, -1+1.1343557800497548)
11:(2048, 0.13431732543718958)
12:(4096, 0.13358512182441204)
13:(8192, 0.13219220610099078)
14:(16384, 0.1303867059449566)
15:(32768, 0.12832997045202044)
16:(65536, 0.12612868507323674)
... ...
200:(1606938044258990275541962092341162602522202993782792835301376, 0.028309575754732568)


]]]
[[[
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 +to_sub1 '=(1<<ez for ez in range(1,1+200))' -using_param6n7022
1:(2, 1.1640441398569765)
    ###max@2.3182883041000326
    #(2.3182883041000326, -1+2.1893023017969857)
2:(4, 1.0820220699284884)
3:(8, 0.9163355468593776)
4:(16, 0.7910110349642441)
5:(32, 0.6971944469488678)
6:(64, 0.6248344400963555)
7:(128, 0.5673427231306544)
8:(256, 0.520505517482122)
9:(512, 0.48155212681103216)
10:(1024, 0.44859722347443387)
11:(2048, 0.420315978044934)
12:(4096, 0.3957505533815111)
13:(8192, 0.37419106599985147)
14:(16384, 0.35509993299389864)
15:(32768, 0.3380623156976997)
16:(65536, 0.322752758741061)
17:(131072, 0.3089121753592539)
18:(262144, 0.29633161896107163)
19:(524288, 0.28484061333160854)
20:(1048576, 0.2742986117372169)
21:(2097152, 0.26458864583979697)
22:(4194304, 0.25561253447701243)
23:(8388608, 0.24728722156147778)
24:(16777216, 0.2395419433574222)
25:(33554432, 0.2323160131852681)
26:(67108864, 0.2255570714614642)
27:(134217728, 0.21921969044520168)
28:(268435456, 0.21326425221123502)
29:(536870912, 0.20765603913739822)
30:(1073741824, 0.2023644911821832)
31:(2147483648, 0.19736259516915647)
32:(4294967296, 0.1926263793705305)
33:(8589934592, 0.18813449270349786)
34:(17179869184, 0.1838678523855093)
35:(34359738368, 0.17980934733719836)
36:(68719476736, 0.17594358725831355)
37:(137438953472, 0.17225668933745744)
38:(274877906944, 0.16873609613948848)
39:(549755813888, 0.1653704194543391)
40:(1099511627776, 0.16214930586860846)
41:(2199023255552, 0.1590633205969527)
42:(4398046511104, 0.15610384672942232)
43:(8796093022208, 0.15326299754788547)
44:(17592186044416, 0.15053353996577898)
45:(35184372088832, 0.1479088274708145)
46:(70368744177664, 0.14538274121552153)
47:(140737488355328, 0.14294963811775774)
48:(281474976710656, 0.14060430501204446)
49:(562949953421312, 0.13834191804024867)
50:(1125899906842624, 0.13615800659263402)
51:(2251799813685248, 0.13404842121232297)
52:(4503599627370496, 0.13200930496150134)
53:(9007199254740992, 0.1300370678192486)
54:(18014398509481984, 0.12812836374111936)
55:(36028797018963968, 0.12628007006148428)
56:(72057594037927936, 0.12448926896276037)
57:(144115188075855872, 0.12275323077231083)
58:(288230376151711744, 0.12106939887904394)
59:(576460752303423488, 0.11943537608845452)
60:(1152921504606846976, 0.11784891225775826)
61:(2305843009213693952, 0.11630789307245676)
62:(4611686018427387904, 0.11481032984264275)
63:(9223372036854775808, 0.11335435021201416)
64:(18446744073709551616, 0.11193818968526527)
65:(36893488147419103232, 0.11056018389054509)
66:(73786976294838206464, 0.10921876150326408)
67:(147573952589676412928, 0.10791243776589178)
68:(295147905179352825856, 0.10663980854569582)
69:(590295810358705651712, 0.10539954487877022)
70:(1180591620717411303424, 0.10419038795431346)
71:(2361183241434822606848, 0.10301114449805153)
72:(4722366482869645213696, 0.10186068251804567)
73:(9444732965739290427392, 0.10073792737995882)
74:(18889465931478580854784, 0.09964185818224224)
75:(37778931862957161709568, 0.09857150440470477)
76:(75557863725914323419136, 0.09752594280658634)
77:(151115727451828646838272, 0.0965042945526218)
78:(302231454903657293676544, 0.09550572254768236)
79:(604462909807314587353088, 0.0945294289624567)
80:(1208925819614629174706176, 0.09357465293430424)
81:(2417851639229258349412352, 0.09264066842890865)
82:(4835703278458516698824704, 0.09172678224969585)
83:(9671406556917033397649408, 0.09083233218317954)
84:(19342813113834066795298816, 0.08995668526947306)
85:(38685626227668133590597632, 0.0890992361881727)
86:(77371252455336267181195264, 0.08825940575068691)
87:(154742504910672534362390528, 0.08743663949087017)
88:(309485009821345068724781056, 0.08663040634652586)
89:(618970019642690137449562112, 0.08584019742498174)
90:(1237940039285380274899124224, 0.08506552484651836)
91:(2475880078570760549798248448, 0.08430592065995245)
92:(4951760157141521099596496896, 0.08356093582515206)
93:(9903520314283042199192993792, 0.08283013925768827)
94:(19807040628566084398385987584, 0.08211311693121928)
95:(39614081257132168796771975168, 0.08140947103355708)
96:(79228162514264337593543950336, 0.08071881917268889)
97:(158456325028528675187087900672, 0.08004079362932068)
98:(316912650057057350374175801344, 0.07937504065277741)
99:(633825300114114700748351602688, 0.07872121979733925)
100:(1267650600228229401496703205376, 0.07807900329631702)
101:(2535301200456458802993406410752, 0.07744807547137396)
102:(5070602400912917605986812821504, 0.07682813217478895)
103:(10141204801825835211973625643008, 0.07621888026252618)
104:(20282409603651670423947251286016, 0.07562003709613528)
105:(40564819207303340847894502572032, 0.07503133007164856)
106:(81129638414606681695789005144064, 0.07445249617377524)
107:(162259276829213363391578010288128, 0.07388328155381425)
108:(324518553658426726783156020576256, 0.07332344112981894)
109:(649037107316853453566312041152512, 0.07277273820765048)
110:(1298074214633706907132624082305024, 0.07223094412165124)
111:(2596148429267413814265248164610048, 0.0716978378937575)
112:(5192296858534827628530496329220096, 0.0711732059099516)
113:(10384593717069655257060992658440192, 0.07065684161302802)
114:(20769187434139310514121985316880384, 0.07014854521071683)
115:(41538374868278621028243970633760768, 0.06964812339827262)
116:(83076749736557242056487941267521536, 0.06915538909469438)
117:(166153499473114484112975882535043072, 0.06867016119179813)
118:(332306998946228968225951765070086144, 0.0681922643154137)
119:(664613997892457936451903530140172288, 0.06772152859802454)
120:(1329227995784915872903807060280344576, 0.06725778946221245)
121:(2658455991569831745807614120560689152, 0.06680088741431052)
122:(5316911983139663491615228241121378304, 0.06635066784770378)
123:(10633823966279326983230456482242756608, 0.0659069808552538)
124:(21267647932558653966460912964485513216, 0.06546968105035364)
125:(42535295865117307932921825928971026432, 0.0650386273961525)
126:(85070591730234615865843651857942052864, 0.06461368304251502)
127:(170141183460469231731687303715884105728, 0.06419471517030821)
128:(340282366920938463463374607431768211456, 0.06378159484263263)
129:(680564733841876926926749214863536422912, 0.06337419686263744)
130:(1361129467683753853853498429727072845824, 0.06297239963758024)
131:(2722258935367507707706996859454145691648, 0.06257608504881242)
132:(5444517870735015415413993718908291383296, 0.062185138327389616)
133:(10889035741470030830827987437816582766592, 0.0617994479350238)
134:(21778071482940061661655974875633165533184, 0.06141890545011006)
135:(43556142965880123323311949751266331066368, 0.06104340545857635)
136:(87112285931760246646623899502532662132736, 0.0606728454493185)
137:(174224571863520493293247799005065324265472, 0.06030712571399637)
138:(348449143727040986586495598010130648530944, 0.05994614925097931)
139:(696898287454081973172991196020261297061888, 0.05958982167324089)
140:(1393796574908163946345982392040522594123776, 0.059238051120013874)
141:(2787593149816327892691964784081045188247552, 0.05889074817202674)
142:(5575186299632655785383929568162090376495104, 0.05854782577015252)
143:(11150372599265311570767859136324180752990208, 0.05820919913731026)
144:(22300745198530623141535718272648361505980416, 0.05787478570346728)
145:(44601490397061246283071436545296723011960832, 0.05754450503359939)
146:(89202980794122492566142873090593446023921664, 0.05721827875847256)
147:(178405961588244985132285746181186892047843328, 0.056896030508117965)
148:(356811923176489970264571492362373784095686656, 0.056577685847877875)
149:(713623846352979940529142984724747568191373312, 0.056263172216906965)
150:(1427247692705959881058285969449495136382746624, 0.055952418869019055)
151:(2854495385411919762116571938898990272765493248, 0.0556453568157752)
152:(5708990770823839524233143877797980545530986496, 0.05534191877171423)
153:(11417981541647679048466287755595961091061972992, 0.05504203910163156)
154:(22835963083295358096932575511191922182123945984, 0.054745653769817396)
155:(45671926166590716193865151022383844364247891968, 0.05445270029116912)
156:(91343852333181432387730302044767688728495783936, 0.05416311768409759)
157:(182687704666362864775460604089535377456991567872, 0.053876846425150345)
158:(365375409332725729550921208179070754913983135744, 0.05359382840527898)
159:(730750818665451459101842416358141509827966271488, 0.053314006887681335)
160:(1461501637330902918203684832716283019655932542976, 0.05303732646715212)
161:(2923003274661805836407369665432566039311865085952, 0.052763733030879466)
162:(5846006549323611672814739330865132078623730171904, 0.052493173720627166)
163:(11692013098647223345629478661730264157247460343808, 0.05222559689624572)
164:(23384026197294446691258957323460528314494920687616, 0.05196095210045769)
165:(46768052394588893382517914646921056628989841375232, 0.0516991900248654)
166:(93536104789177786765035829293842113257979682750464, 0.051440262477131946)
167:(187072209578355573530071658587684226515959365500928, 0.0511841223492876)
168:(374144419156711147060143317175368453031918731001856, 0.050930723587117484)
169:(748288838313422294120286634350736906063837462003712, 0.050680021160586744)
170:(1496577676626844588240573268701473812127674924007424, 0.05043197103526282)
171:(2993155353253689176481146537402947624255349848014848, 0.05018653014469518)
172:(5986310706507378352962293074805895248510699696029696, 0.049943656363715554)
173:(11972621413014756705924586149611790497021399392059392, 0.04970330848262255)
174:(23945242826029513411849172299223580994042798784118784, 0.049465446182216696)
175:(47890485652059026823698344598447161988085597568237568, 0.04923003000965318)
176:(95780971304118053647396689196894323976171195136475136, 0.048997021355081105)
177:(191561942608236107294793378393788647952342390272950272, 0.04876638242903939)
178:(383123885216472214589586756787577295904684780545900544, 0.048538076240580756)
179:(766247770432944429179173513575154591809369561091801088, 0.048312066576096276)
180:(1532495540865888858358347027150309183618739122183602176, 0.048088317978814736)
181:(3064991081731777716716694054300618367237478244367204352, 0.04786679572895128)
182:(6129982163463555433433388108601236734474956488734408704, 0.04764746582448172)
183:(12259964326927110866866776217202473468949912977468817408, 0.047430294962519236)
184:(24519928653854221733733552434404946937899825954937634816, 0.047215250521271686)
185:(49039857307708443467467104868809893875799651909875269632, 0.04700230054255832)
186:(98079714615416886934934209737619787751599303819750539264, 0.046791413714865636)
187:(196159429230833773869868419475239575503198607639501078528, 0.04658255935692306)
188:(392318858461667547739736838950479151006397215279002157056, 0.046375707401779855)
189:(784637716923335095479473677900958302012794430558004314112, 0.04617082838136534)
190:(1569275433846670190958947355801916604025588861116008628224, 0.04596789341151538)
191:(3138550867693340381917894711603833208051177722232017256448, 0.04576687417744883)
192:(6277101735386680763835789423207666416102355444464034512896, 0.04556774291967778)
193:(12554203470773361527671578846415332832204710888928069025792, 0.04537047242033709)
194:(25108406941546723055343157692830665664409421777856138051584, 0.045175035989918066)
195:(50216813883093446110686315385661331328818843555712276103168, 0.04498140745439276)
196:(100433627766186892221372630771322662657637687111424552206336, 0.044789561142715234)
197:(200867255532373784442745261542645325315275374222849104412672, 0.04459947187468707)
198:(401734511064747568885490523085290650630550748445698208825344, 0.04441111494917467)
199:(803469022129495137770981046170581301261101496891396417650688, 0.04422446613266646)
200:(1606938044258990275541962092341162602522202993782792835301376, 0.044039501648158515)


1/2
8:(256, 0.520505517482122)
9:(512, 0.48155212681103216)

1/4
22:(4194304, 0.25561253447701243)
23:(8388608, 0.24728722156147778)

1/8
55:(36028797018963968, 0.12628007006148428)
56:(72057594037927936, 0.12448926896276037)

1/10
73:(9444732965739290427392, 0.10073792737995882)
74:(18889465931478580854784, 0.09964185818224224)

1/16
131:(2722258935367507707706996859454145691648, 0.06257608504881242)
132:(5444517870735015415413993718908291383296, 0.062185138327389616)

===
]]]
[[[
++kw:using_param6n7022
===
bug:py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =70919
py_adhoc_call { -lineno }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =7022
0:('last:', (7023, 70921, 1.1401662919719722), 76175)
1:(7022, 70919, 1.1403148385025141)
2:(7021, 70913, 1.1403991028552904)
3:(7019, 70891, 1.140406836240775)
4:(7017, 70877, 1.1405432990151958)
5:(7016, 70867, 1.1405632756885127)
6:(7014, 70849, 1.1406354392572873)
7:(7013, 70843, 1.1407198405402441)
8:(7012, 70841, 1.1408686845492848)
9:(6947, 70117, 1.1409743777841166)
10:(6946, 70111, 1.1410595617836587)
11:(6936, 70001, 1.1410977001137532)
12:(6935, 69997, 1.1412156323889016)
13:(6934, 69991, 1.1413009870502955)
14:(5640, 55603, 1.1413636932582656)
15:(5257, 51407, 1.141404307907562)
16:(5237, 51193, 1.1415015278590204)
17:(5231, 51131, 1.141579594977055)
18:(5034, 48989, 1.1416774988356806)
19:(5013, 48761, 1.141684271858721)
20:(5012, 48757, 1.141845125498072)
21:(5011, 48751, 1.141959196891255)
22:(5009, 48731, 1.1419999981424904)
23:(4985, 48473, 1.1420666932184433)
24:(4984, 48463, 1.1420870950008164)
25:(4895, 47497, 1.1420905446577183)
26:(4894, 47491, 1.1422070752343738)
27:(4875, 47287, 1.1422562152551599)
28:(4874, 47279, 1.1423248827184858)
29:(4873, 47269, 1.1423452422183065)
30:(4304, 41141, 1.1423974772671508)
31:(4303, 41131, 1.1424169489137501)
32:(4301, 41113, 1.142511479568551)
33:(4273, 40819, 1.1426664593452613)
34:(4272, 40813, 1.1427979318160413)
35:(4266, 40751, 1.142858890255962)
36:(3474, 32371, 1.142892965281353)
37:(3473, 32369, 1.1431917796844329)
38:(3472, 32363, 1.1433494600729268)
39:(3471, 32359, 1.1435779114983908)
40:(3470, 32353, 1.1437357955670933)
41:(3467, 32323, 1.1437853579632526)
42:(3466, 32321, 1.1440850574262247)
43:(3464, 32303, 1.1441891167980167)
44:(3463, 32299, 1.1444183395632206)
45:(3462, 32297, 1.1447185862829237)
46:(3439, 32059, 1.1448188552915062)
47:(3438, 32057, 1.1451213027379756)
48:(3437, 32051, 1.1452810035715693)
49:(3428, 31957, 1.1452889444690475)
50:(2409, 21487, 1.145435527876196)
51:(2408, 21481, 1.145652309891248)
52:(2348, 20879, 1.145713572010415)
53:(2347, 20873, 1.1459352442035295)
54:(2251, 19913, 1.1460217304104496)
55:(2229, 19697, 1.14623746888105)
56:(2227, 19681, 1.1464684310539697)
57:(2201, 19427, 1.1467876202297633)
58:(2200, 19423, 1.1471403893520964)
59:(2199, 19421, 1.1476116727699266)
60:(2198, 19417, 1.147965166605063)
61:(2194, 19381, 1.1481976047691986)
62:(2193, 19379, 1.1486707044742281)
63:(2192, 19373, 1.148907042716899)
64:(1685, 14387, 1.1492368232657704)
65:(1428, 11923, 1.1494225122498707)
66:(1425, 11897, 1.1496634189861175)
67:(1416, 11813, 1.1498048620650734)
68:(1415, 11807, 1.1501450167364504)
69:(1414, 11801, 1.1504856396598506)
70:(1412, 11783, 1.1505824083092364)
71:(1411, 11779, 1.151119422351371)
72:(1410, 11777, 1.151852834013043)
73:(948, 7487, 1.1522134319571957)
74:(947, 7481, 1.1526832701627703)
75:(946, 7477, 1.1534625952277657)
76:(943, 7451, 1.1536431760104255)
77:(714, 5413, 1.1537616080591209)
78:(713, 5407, 1.1543453318573267)
79:(712, 5399, 1.1545029262463782)
80:(711, 5393, 1.1550890502941888)
81:(710, 5387, 1.1556767287065195)
82:(709, 5381, 1.1562659680394831)
83:(492, 3527, 1.1565255790776685)
84:(490, 3511, 1.1567383259640298)
85:(483, 3457, 1.1581441115130533)
86:(482, 3449, 1.1582496584060926)
87:(464, 3301, 1.1586902127258232)
88:(463, 3299, 1.1608971718053234)
89:(384, 2657, 1.1627770904041923)
90:(229, 1447, 1.162881959813781)
91:(227, 1433, 1.1636559433827294)
92:(226, 1429, 1.1664916563413747)
93:(225, 1427, 1.1709942119316805)
94:(224, 1423, 1.173890256413011)
95:(107, 587, 1.1740171751963917)
96:(104, 569, 1.178013213135294)
97:(103, 563, 1.1793611732977782)
98:(102, 557, 1.1807170623880265)
99:(69, 347, 1.1877324063025014)
100:(49, 227, 1.1903563644687083)
101:(48, 223, 1.2001012916257148)
102:(25, 97, 1.2053897730456469)
103:(17, 59, 1.2249653710600534)
104:(13, 41, 1.2295939273309602)
105:(12, 37, 1.2408246135106877)
106:(10, 29, 1.25945399751943)
107:(5, 11, 1.3669368560311461)
108:(3, 5, 1.5170653777113956)
109:(2, 3, 2.1640425613334453)
===
py_adhoc_call { --lineno=4 }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 +using_param6n7022 '=[10**e for e in range(1,16)]'
    # filter:7022<10000
4:(10000, 1.1391785517886883)
5:(100000, 1.130724844032562)
6:(1000000, 1.1221342443684057)
7:(10000000, 1.1142503222630067)
8:(100000000, 1.1072180253523418)
9:(1000000000, 1.1009885250295683)
10:(10000000000, 1.0954654215826791)
11:(100000000000, 1.090549718271365)
12:(1000000000000, 1.0861529551562012)
13:(10000000000000, 1.0821998129333559)
14:(100000000000000, 1.0786273036789307)
15:(1000000000000000, 1.0753830316588315)
===
py_adhoc_call  seed.math.prime_pint.generate_primes   ,_bisect4reduce_coeff__36 +using_param6n7022 '=1.1' '=10**12'
(1480632916, 1.1000000000006214)
(1480632917, 1.0999999999989376)
    1.49*10**9
===
py_adhoc_call { -lineno +to_show_total_timedelta }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =10**4
0:('last:', (10001, 104743, 1.1371066156927465), 115405)
1:(8655, 89387, 1.139191474311182)
2:(8654, 89381, 1.13926115625367)
3:(8653, 89371, 1.1392798633693542)
4:(8652, 89363, 1.1393240723952949)
5:(8621, 89009, 1.1393425320712474)
6:(8620, 89003, 1.1394124813023565)
7:(8619, 88997, 1.1394824468638698)
8:(8618, 88993, 1.1395780392711652)
9:(8602, 88811, 1.1395965024237509)
10:(8601, 88807, 1.1396922904979279)
11:(8600, 88801, 1.1397624315708825)
12:(8599, 88799, 1.1398839357587873)
13:(8598, 88793, 1.139954116295747)
14:(8597, 88789, 1.1400499932422576)
15:(7051, 71233, 1.1401223862242145)
16:(7025, 70949, 1.1402550476665014)
17:(7022, 70919, 1.1403148385025141)
18:(7021, 70913, 1.1403991028552904)
19:(7019, 70891, 1.140406836240775)
20:(7017, 70877, 1.1405432990151958)
21:(7016, 70867, 1.1405632756885127)
22:(7014, 70849, 1.1406354392572873)
23:(7013, 70843, 1.1407198405402441)
24:(7012, 70841, 1.1408686845492848)
25:(6947, 70117, 1.1409743777841166)
26:(6946, 70111, 1.1410595617836587)
27:(6936, 70001, 1.1410977001137532)
28:(6935, 69997, 1.1412156323889016)
29:(6934, 69991, 1.1413009870502955)
30:(5640, 55603, 1.1413636932582656)
31:(5257, 51407, 1.141404307907562)
32:(5237, 51193, 1.1415015278590204)
33:(5231, 51131, 1.141579594977055)
34:(5034, 48989, 1.1416774988356806)
35:(5013, 48761, 1.141684271858721)
36:(5012, 48757, 1.141845125498072)
37:(5011, 48751, 1.141959196891255)
38:(5009, 48731, 1.1419999981424904)
39:(4985, 48473, 1.1420666932184433)
40:(4984, 48463, 1.1420870950008164)
41:(4895, 47497, 1.1420905446577183)
42:(4894, 47491, 1.1422070752343738)
43:(4875, 47287, 1.1422562152551599)
44:(4874, 47279, 1.1423248827184858)
45:(4873, 47269, 1.1423452422183065)
46:(4304, 41141, 1.1423974772671508)
47:(4303, 41131, 1.1424169489137501)
48:(4301, 41113, 1.142511479568551)
49:(4273, 40819, 1.1426664593452613)
50:(4272, 40813, 1.1427979318160413)
51:(4266, 40751, 1.142858890255962)
52:(3474, 32371, 1.142892965281353)
53:(3473, 32369, 1.1431917796844329)
54:(3472, 32363, 1.1433494600729268)
55:(3471, 32359, 1.1435779114983908)
56:(3470, 32353, 1.1437357955670933)
57:(3467, 32323, 1.1437853579632526)
58:(3466, 32321, 1.1440850574262247)
59:(3464, 32303, 1.1441891167980167)
60:(3463, 32299, 1.1444183395632206)
61:(3462, 32297, 1.1447185862829237)
62:(3439, 32059, 1.1448188552915062)
63:(3438, 32057, 1.1451213027379756)
64:(3437, 32051, 1.1452810035715693)
65:(3428, 31957, 1.1452889444690475)
66:(2409, 21487, 1.145435527876196)
67:(2408, 21481, 1.145652309891248)
68:(2348, 20879, 1.145713572010415)
69:(2347, 20873, 1.1459352442035295)
70:(2251, 19913, 1.1460217304104496)
71:(2229, 19697, 1.14623746888105)
72:(2227, 19681, 1.1464684310539697)
73:(2201, 19427, 1.1467876202297633)
74:(2200, 19423, 1.1471403893520964)
75:(2199, 19421, 1.1476116727699266)
76:(2198, 19417, 1.147965166605063)
77:(2194, 19381, 1.1481976047691986)
78:(2193, 19379, 1.1486707044742281)
79:(2192, 19373, 1.148907042716899)
80:(1685, 14387, 1.1492368232657704)
81:(1428, 11923, 1.1494225122498707)
82:(1425, 11897, 1.1496634189861175)
83:(1416, 11813, 1.1498048620650734)
84:(1415, 11807, 1.1501450167364504)
85:(1414, 11801, 1.1504856396598506)
86:(1412, 11783, 1.1505824083092364)
87:(1411, 11779, 1.151119422351371)
88:(1410, 11777, 1.151852834013043)
89:(948, 7487, 1.1522134319571957)
90:(947, 7481, 1.1526832701627703)
91:(946, 7477, 1.1534625952277657)
92:(943, 7451, 1.1536431760104255)
93:(714, 5413, 1.1537616080591209)
94:(713, 5407, 1.1543453318573267)
95:(712, 5399, 1.1545029262463782)
96:(711, 5393, 1.1550890502941888)
97:(710, 5387, 1.1556767287065195)
98:(709, 5381, 1.1562659680394831)
99:(492, 3527, 1.1565255790776685)
100:(490, 3511, 1.1567383259640298)
101:(483, 3457, 1.1581441115130533)
102:(482, 3449, 1.1582496584060926)
103:(464, 3301, 1.1586902127258232)
104:(463, 3299, 1.1608971718053234)
105:(384, 2657, 1.1627770904041923)
106:(229, 1447, 1.162881959813781)
107:(227, 1433, 1.1636559433827294)
108:(226, 1429, 1.1664916563413747)
109:(225, 1427, 1.1709942119316805)
110:(224, 1423, 1.173890256413011)
111:(107, 587, 1.1740171751963917)
112:(104, 569, 1.178013213135294)
113:(103, 563, 1.1793611732977782)
114:(102, 557, 1.1807170623880265)
115:(69, 347, 1.1877324063025014)
116:(49, 227, 1.1903563644687083)
117:(48, 223, 1.2001012916257148)
118:(25, 97, 1.2053897730456469)
119:(17, 59, 1.2249653710600534)
120:(13, 41, 1.2295939273309602)
121:(12, 37, 1.2408246135106877)
122:(10, 29, 1.25945399751943)
123:(5, 11, 1.3669368560311461)
124:(3, 5, 1.5170653777113956)
125:(2, 3, 2.1640425613334453)
total::duration: 0.7126481590000001 *(unit: 0:00:01)
===
py_adhoc_call { -lineno +to_show_total_timedelta }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =10**7 > /sdcard/0my_files/tmp/0tmp
total::duration: 1265.239816248 *(unit: 0:00:01)
    生成冫所有主系数尾峰点集牜前千万素数(基于第三系数尾峰点n7022p70919):here
    vs:生成冫所有第三系数尾峰点集牜前七千二十二个素数:goto
cp -iv /sdcard/0my_files/tmp/0tmp /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt
du -h /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt
    2.2M
    1.92*10**8
    [PRIMES_S1[10000001]==PRIMES_S1[10000000]==179424691]
tar -cvf /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt.tar.lzma --lzma -C /sdcard/0my_files/tmp/out4py/ seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt
tar -tvf /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt.tar.lzma --lzma
du -h /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt.tar.lzma
    428K
#rm -iv /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt.tar.lzma
TODO:转折点选择:尾峰处/尾峰点
    中选耂主系数尾峰点集牜前千万素数:goto
    中选耂第三系数尾峰点集牜前七千二十二个素数:goto
TODO:分区间独立统计最大辻最小:main_ratio+third_coeff+fourth_coeff,最大素数即其位序
    区间大小:2**16
    预计:区间数量:2**24
    预计:总区间大小:2**40

==>>:
初选:中选耂主系数尾峰点集牜前千万素数==
view /sdcard/0my_files/tmp/out4py/seed.math.prime_pint.generate_primes.._reduce_coeff__36__refine.using_param6n7022.n_le_10pow7.out.txt
0:('last:', (10000001, 179424691, 1.113187784896146), 191628270)
1:(7238630, 127396421, 1.1142504013389318)
2:(7238628, 127396393, 1.1142504837953)
3:(7238624, 127396327, 1.1142505612448463)
4:(7238620, 127396253, 1.1142505687237654)
... ...
9:(7238614, 127396187, 1.114250973527635)
10:(7238613, 127396177, 1.1142510497413571)
... ...
731:(7150367, 125750881, 1.1142999491719678)
732:(7150365, 125750851, 1.1143000147611795)
... ...
2171:(6988634, 122739389, 1.1143999341459592)
2172:(6988632, 122739359, 1.1144000009179718)
... ...
3570:(6673994, 116881327, 1.1144999714741883)
3571:(6673993, 116881321, 1.114500091880893)
... ...
4882:(6414776, 112068497, 1.11459998529849)
4883:(6414775, 112068493, 1.1146001303562723)
... ...
6146:(6215237, 108373277, 1.1146998637961314)
6147:(6215236, 108373273, 1.1147000134682299)
... ...
7417:(6070109, 105692341, 1.1147999520634708)
7418:(6070077, 105691757, 1.1148000454672897)
... ...
8614:(5887437, 102320291, 1.1148998729024158)
8615:(5887436, 102320287, 1.1149000308351935)
... ...
9795:(5757549, 99928681, 1.1149999825873567)
9796:(5757548, 99928667, 1.1150000324758729)
... ...
20015:(4184956, 71209783, 1.1159999459666528)
20016:(4184236, 71196733, 1.116000020032099)
... ...
27284:(3084074, 51473027, 1.116999822242955)
27285:(3083992, 51471577, 1.1170000429082516)
... ...
32442:(2328366, 38163397, 1.1179998416969332)
32443:(2326790, 38135813, 1.1180001058921236)
... ...
36348:(1705702, 27388583, 1.1189998297582173)
36349:(1705701, 27388579, 1.1190003680859248)
... ...
39302:(1257929, 19787693, 1.1199999249472945)
39303:(1257928, 19787687, 1.120000539087976)
... ...
47790:(85130, 1092019, 1.1299979979823433)
47791:(85075, 1091261, 1.1300079919730872)
... ...
48413:(8598, 88793, 1.139954116295747)
48414:(8597, 88789, 1.1400499932422576)
48415:(7051, 71233, 1.1401223862242145)
48416:(7025, 70949, 1.1402550476665014)
48417:(7022, 70919, 1.1403148385025141)
48418:(7021, 70913, 1.1403991028552904)
48419:(7019, 70891, 1.140406836240775)
48420:(7017, 70877, 1.1405432990151958)
48421:(7016, 70867, 1.1405632756885127)
48422:(7014, 70849, 1.1406354392572873)
... ...
48483:(1416, 11813, 1.1498048620650734)
48484:(1415, 11807, 1.1501450167364504)
... ...
48503:(464, 3301, 1.1586902127258232)
48504:(463, 3299, 1.1608971718053234)
... ...
48508:(226, 1429, 1.1664916563413747)
48509:(225, 1427, 1.1709942119316805)
... ...
48513:(103, 563, 1.1793611732977782)
48514:(102, 557, 1.1807170623880265)
48515:(69, 347, 1.1877324063025014)
48516:(49, 227, 1.1903563644687083)
48517:(48, 223, 1.2001012916257148)
48518:(25, 97, 1.2053897730456469)
48519:(17, 59, 1.2249653710600534)
48520:(13, 41, 1.2295939273309602)
48521:(12, 37, 1.2408246135106877)
48522:(10, 29, 1.25945399751943)
48523:(5, 11, 1.3669368560311461)
48524:(3, 5, 1.5170653777113956)
48525:(2, 3, 2.1640425613334453)
==>>:
主系数尾峰点
再筛选:中选耂主系数尾峰点集牜前千万素数==
1:(7238630, 127396421, 1.1142504013389318)
... ...
9:(7238614, 127396187, 1.114250973527635)
... ...
731:(7150367, 125750881, 1.1142999491719678)
... ...
2171:(6988634, 122739389, 1.1143999341459592)
... ...
3570:(6673994, 116881327, 1.1144999714741883)
... ...
4882:(6414776, 112068497, 1.11459998529849)
... ...
6146:(6215237, 108373277, 1.1146998637961314)
... ...
7417:(6070109, 105692341, 1.1147999520634708)
... ...
8614:(5887437, 102320291, 1.1148998729024158)
... ...
9795:(5757549, 99928681, 1.1149999825873567)
... ...
20015:(4184956, 71209783, 1.1159999459666528)
... ...
27284:(3084074, 51473027, 1.116999822242955)
... ...
32442:(2328366, 38163397, 1.1179998416969332)
... ...
36348:(1705702, 27388583, 1.1189998297582173)
... ...
39302:(1257929, 19787693, 1.1199999249472945)
... ...
47790:(85130, 1092019, 1.1299979979823433)
... ...
48413:(8598, 88793, 1.139954116295747)
... ...
48417:(7022, 70919, 1.1403148385025141)
... ...
48483:(1416, 11813, 1.1498048620650734)
... ...
48503:(464, 3301, 1.1586902127258232)
... ...
48508:(226, 1429, 1.1664916563413747)
... ...
48513:(103, 563, 1.1793611732977782)
... ...
48515:(69, 347, 1.1877324063025014)
48516:(49, 227, 1.1903563644687083)
48517:(48, 223, 1.2001012916257148)
48518:(25, 97, 1.2053897730456469)
48519:(17, 59, 1.2249653710600534)
48520:(13, 41, 1.2295939273309602)
48521:(12, 37, 1.2408246135106877)
48522:(10, 29, 1.25945399751943)
48523:(5, 11, 1.3669368560311461)
48524:(3, 5, 1.5170653777113956)
48525:(2, 3, 2.1640425613334453)
==>>:
生成冫所有主系数尾峰点集牜前千万素数:goto
数据化:中选耂主系数尾峰点集牜前千万素数==
[(7238630, 127396421, 1.11425041 or 1.1142504013389318)
,(7238614, 127396187, 1.114251 or 1.114250973527635)
,(7150367, 125750881, 1.1143 or 1.1142999491719678)
,(6988634, 122739389, 1.1144 or 1.1143999341459592)
,(6673994, 116881327, 1.1145 or 1.1144999714741883)
,(6414776, 112068497, 1.1146 or 1.11459998529849)
,(6215237, 108373277, 1.1147 or 1.1146998637961314)
,(6070109, 105692341, 1.1148 or 1.1147999520634708)
,(5887437, 102320291, 1.1149 or 1.1148998729024158)
,(5757549, 99928681, 1.115 or 1.1149999825873567)
,(4184956, 71209783, 1.116 or 1.1159999459666528)
,(3084074, 51473027, 1.117 or 1.116999822242955)
,(2328366, 38163397, 1.118 or 1.1179998416969332)
,(1705702, 27388583, 1.119 or 1.1189998297582173)
,(1257929, 19787693, 1.12 or 1.1199999249472945)
,(85130, 1092019, 1.13 or 1.1299979979823433)
,(8598, 88793, 1.14 or 1.139954116295747)
,(7022, 70919, 1.140315 or 1.1403148385025141)
,(1416, 11813, 1.15 or 1.1498048620650734)
,(464, 3301, 1.16 or 1.1586902127258232)
,(226, 1429, 1.17 or 1.1664916563413747)
,(103, 563, 1.18 or 1.1793611732977782)
,(69, 347, 1.19 or 1.1877324063025014)
,(49, 227, 1.2 or 1.1903563644687083)
,(48, 223, 1.2002 or 1.2001012916257148)
,(25, 97, 1.2054 or 1.2053897730456469)
,(17, 59, 1.225 or 1.2249653710600534)
,(13, 41, 1.23 or 1.2295939273309602)
,(12, 37, 1.2409 or 1.2408246135106877)
,(10, 29, 1.2595 or 1.25945399751943)
,(5, 11, 1.367 or 1.3669368560311461)
,(3, 5, 1.5171 or 1.5170653777113956)
,(2, 3, 2.1641 or 2.1640425613334453)
]

33项:
[中选耂主系数尾峰点集牜前千万素数:=[(7238630, 127396421) ,(7238614, 127396187) ,(7150367, 125750881) ,(6988634, 122739389) ,(6673994, 116881327) ,(6414776, 112068497) ,(6215237, 108373277) ,(6070109, 105692341) ,(5887437, 102320291) ,(5757549, 99928681) ,(4184956, 71209783) ,(3084074, 51473027) ,(2328366, 38163397) ,(1705702, 27388583) ,(1257929, 19787693) ,(85130, 1092019) ,(8598, 88793) ,(7022, 70919) ,(1416, 11813) ,(464, 3301) ,(226, 1429) ,(103, 563) ,(69, 347) ,(49, 227) ,(48, 223) ,(25, 97) ,(17, 59) ,(13, 41) ,(12, 37) ,(10, 29) ,(5, 11) ,(3, 5) ,(2, 3)]]

===
???py_adhoc_call { -lineno +to_show_total_timedelta }  seed.math.prime_pint.generate_primes   ,_reduce_coeff__36__refine +using_param6n7022 =10**8 > /sdcard/0my_files/tmp/0tmp
===
]]]
[[[
_iter_third_coeffs_
_third_coeff_n7022__refine
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_third_coeff_n7022__refine
    生成冫所有第三系数尾峰点集牜前七千二十二个素数(基于第三系数尾峰点n7022p70919):here
    vs:生成冫所有主系数尾峰点集牜前千万素数:goto
1:(7022, 70919, -0.9384449719153132)
2:(7021, 70913, -0.9377025743220013)
3:(7019, 70891, -0.9376419158677063)
4:(7017, 70877, -0.9364412238277446)
5:(7016, 70867, -0.9362682486928078)
6:(7014, 70849, -0.9356370735294424)
7:(7013, 70843, -0.9348936075086125)
8:(7012, 70841, -0.9335795011489432)
9:(6947, 70117, -0.9329042128341585)
10:(6946, 70111, -0.932154702447725)
11:(6936, 70001, -0.9318577343705394)
12:(6935, 69997, -0.9308187434659634)
13:(6934, 69991, -0.9300679095666702)
14:(4272, 40813, -0.9296714865570368)
15:(4266, 40751, -0.9291945322409516)
16:(3471, 32359, -0.9278120208505638)
17:(3470, 32353, -0.926530989059132)
18:(3467, 32323, -0.9261452179386338)
19:(3466, 32321, -0.9237085272972991)
20:(3464, 32303, -0.9228727726498964)
21:(3463, 32299, -0.9210108369833252)
22:(3462, 32297, -0.9185702173133148)
23:(3439, 32059, -0.917900132481229)
24:(3438, 32057, -0.9154438115268335)
25:(3437, 32051, -0.914149960621705)
26:(3428, 31957, -0.9141441788231908)
27:(2227, 19681, -0.9132732108362478)
28:(2201, 19427, -0.9110119440014959)
29:(2200, 19423, -0.9083046185444554)
30:(2199, 19421, -0.9046855565169118)
31:(2198, 19417, -0.9019733498310298)
32:(2194, 19381, -0.9002178786833239)
33:(2193, 19379, -0.8965866139086285)
34:(2192, 19373, -0.8947770850079806)
35:(1415, 11807, -0.8923902076647017)
36:(1414, 11801, -0.8899279641489413)
37:(1412, 11783, -0.8892439876702656)
38:(1411, 11779, -0.8853585283825292)
39:(1410, 11777, -0.8800496804773725)
40:(947, 7481, -0.8783460388247402)
41:(946, 7477, -0.8730130532626932)
42:(943, 7451, -0.8718000375088748)
43:(713, 5407, -0.8684661079730926)
44:(712, 5399, -0.8674339772258646)
45:(711, 5393, -0.8635882339792418)
46:(710, 5387, -0.8597338943243826)
47:(709, 5381, -0.8558709250869898)
48:(492, 3527, -0.854083423136063)
49:(490, 3511, -0.8527457970647963)
50:(483, 3457, -0.8439877234039983)
51:(482, 3449, -0.8433280027936585)
52:(464, 3301, -0.8404663537084873)
53:(463, 3299, -0.8269115626766652)
54:(384, 2657, -0.8148709250127633)
55:(229, 1447, -0.807569061960451)
56:(227, 1433, -0.8031833731015237)
57:(226, 1429, -0.7877206686477907)
58:(225, 1427, -0.7632542534935378)
59:(224, 1423, -0.7475207879782326)
60:(109, 599, -0.7416549742922087)
61:(108, 593, -0.7351438830654486)
62:(107, 587, -0.7286121604788136)
63:(104, 569, -0.7088972862225538)
64:(103, 563, -0.7022872973458798)
65:(102, 557, -0.6956589922970857)
66:(69, 347, -0.6482933243521112)
67:(49, 227, -0.6180442280243583)
68:(48, 223, -0.5789324752070328)
69:(35, 149, -0.566658170401084)
70:(26, 101, -0.5546242942155544)
71:(25, 97, -0.5079080007552566)
72:(19, 67, -0.4980414892148384)
73:(17, 59, -0.404036633536879)
74:(13, 41, -0.35304193836349407)
75:(12, 37, -0.3118084098199928)
76:(10, 29, -0.23661753824200193)
77:(7, 17, -0.18306853106216125)
78:(5, 11, 0.11467709223878936)
79:(3, 5, 0.47400655038185785)
80:(2, 3, 1.173365740021719)
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_third_coeff_n7022__refine --max_denominators='[1024,2**64]'
    # ~= -0.9384449719153132 < -0.9384449719153126 < -0.9384449244060475
1:(7022, 70919, -0.9384449719153132, [(Fraction(-869, 926), -0.9384449244060475), (Fraction(-8937680917949958227, 9523926479896484331), -0.9384449719153126)])
2:(7021, 70913, -0.9377025743220013, [(Fraction(-15, 16), -0.9375), (Fraction(-625757187781357785, 667330137419966854), -0.9377025743220012)])
3:(7019, 70891, -0.9376419158677063, [(Fraction(-827, 882), -0.937641723356009), (Fraction(-11239153408628544423, 11986615805488693546), -0.937641915867706)])
4:(7017, 70877, -0.9364412238277446, [(Fraction(-221, 236), -0.9364406779661016), (Fraction(-16126596439458027954, 17221151770251910681), -0.9364412238277445)])
5:(7016, 70867, -0.9362682486928078, [(Fraction(-617, 659), -0.936267071320182), (Fraction(-7580229580732009441, 8096215578511080890), -0.9362682486928093)])
6:(7014, 70849, -0.9356370735294424, [(Fraction(-596, 637), -0.9356357927786499), (Fraction(-11968837295824277229, 12792179397803290225), -0.935637073529441)])
7:(7013, 70843, -0.9348936075086125, [(Fraction(-919, 983), -0.9348931841302136), (Fraction(-3328610970045384643, 3560416868092364633), -0.934893607508612)])
8:(7012, 70841, -0.9335795011489432, [(Fraction(-253, 271), -0.933579335793358), (Fraction(-13807507501522768918, 14789857194304345535), -0.9335795011489438)])
9:(6947, 70117, -0.9329042128341585, [(Fraction(-723, 775), -0.9329032258064516), (Fraction(-399141775306562035, 427848614911890399), -0.9329042128341583)])
10:(6946, 70111, -0.932154702447725, [(Fraction(-316, 339), -0.9321533923303835), (Fraction(-4844091194017400029, 5196660148039164954), -0.9321547024477254)])
11:(6936, 70001, -0.9318577343705394, [(Fraction(-547, 587), -0.9318568994889267), (Fraction(-41890056920143657, 44953274920704444), -0.93185773437054)])
12:(6935, 69997, -0.9308187434659634, [(Fraction(-148, 159), -0.9308176100628931), (Fraction(-13668649926191262437, 14684545215855006238), -0.9308187434659622)])
13:(6934, 69991, -0.9300679095666702, [(Fraction(-93, 100), -0.93), (Fraction(-16283427684683656592, 17507783589985676623), -0.9300679095666716)])
14:(4272, 40813, -0.9296714865570368, [(Fraction(-423, 455), -0.9296703296703297), (Fraction(-12357752331920431873, 13292601215173710431), -0.9296714865570379)])
15:(4266, 40751, -0.9291945322409516, [(Fraction(-853, 918), -0.9291938997821351), (Fraction(-9709569587025993872, 10449447613094835359), -0.9291945322409526)])
16:(3471, 32359, -0.9278120208505638, [(Fraction(-347, 374), -0.9278074866310161), (Fraction(-7492250020835426545, 8075181019930067386), -0.927812020850563)])
17:(3470, 32353, -0.926530989059132, [(Fraction(-227, 245), -0.926530612244898), (Fraction(-11098707828610072498, 11978776705440292531), -0.926530989059131)])
18:(3467, 32323, -0.9261452179386338, [(Fraction(-627, 677), -0.9261447562776958), (Fraction(-14093433220884153894, 15217303882702766963), -0.9261452179386326)])
19:(3466, 32321, -0.9237085272972991, [(Fraction(-339, 367), -0.9237057220708447), (Fraction(-3870990807156560851, 4190705934568762516), -0.9237085272972986)])
20:(3464, 32303, -0.9228727726498964, [(Fraction(-347, 376), -0.9228723404255319), (Fraction(-11778948042529964766, 12763349826334571003), -0.9228727726498969)])
21:(3463, 32299, -0.9210108369833252, [(Fraction(-548, 595), -0.9210084033613445), (Fraction(-5300976768999391794, 5755607378477966345), -0.9210108369833249)])
22:(3462, 32297, -0.9185702173133148, [(Fraction(-925, 1007), -0.9185700099304865), (Fraction(-5571781944099109039, 6065711514570726689), -0.9185702173133149)])
23:(3439, 32059, -0.917900132481229, [(Fraction(-559, 609), -0.9178981937602627), (Fraction(-7651782974246092758, 8336182448914249021), -0.9179001324812299)])
24:(3438, 32057, -0.9154438115268335, [(Fraction(-249, 272), -0.9154411764705882), (Fraction(-1164631966280096449, 1272204750980458722), -0.915443811526833)])
25:(3437, 32051, -0.914149960621705, [(Fraction(-575, 629), -0.9141494435612083), (Fraction(-1393767727012746451, 1524659833781383530), -0.9141499606217046)])
26:(3428, 31957, -0.9141441788231908, [(Fraction(-181, 198), -0.9141414141414141), (Fraction(-2249211379902656252, 2460455836187832027), -0.9141441788231921)])
27:(2227, 19681, -0.9132732108362478, [(Fraction(-179, 196), -0.9132653061224489), (Fraction(-6073958208676812695, 6650757009630375594), -0.9132732108362475)])
28:(2201, 19427, -0.9110119440014959, [(Fraction(-604, 663), -0.9110105580693816), (Fraction(-8449115367794934233, 9274428753023099002), -0.911011944001495)])
29:(2200, 19423, -0.9083046185444554, [(Fraction(-525, 578), -0.9083044982698962), (Fraction(-2705663006625483987, 2978805734755889557), -0.9083046185444552)])
30:(2199, 19421, -0.9046855565169118, [(Fraction(-560, 619), -0.9046849757673667), (Fraction(-569857846990093385, 629896037230966023), -0.904685556516911)])
31:(2198, 19417, -0.9019733498310298, [(Fraction(-46, 51), -0.9019607843137255), (Fraction(-3192267880367670223, 3539204213700646098), -0.9019733498310305)])
32:(2194, 19381, -0.9002178786833239, [(Fraction(-415, 461), -0.9002169197396963), (Fraction(-63815349012167534, 70888782064076653), -0.9002178786833238)])
33:(2193, 19379, -0.8965866139086285, [(Fraction(-893, 996), -0.8965863453815262), (Fraction(-3611013239763660283, 4027511880889691731), -0.8965866139086285)])
34:(2192, 19373, -0.8947770850079806, [(Fraction(-17, 19), -0.8947368421052632), (Fraction(-11362043127089334563, 12698182952447855475), -0.8947770850079814)])
35:(1415, 11807, -0.8923902076647017, [(Fraction(-340, 381), -0.8923884514435696), (Fraction(-4907053136333821975, 5498775192945144627), -0.8923902076647007)])
36:(1414, 11801, -0.8899279641489413, [(Fraction(-857, 963), -0.8899273104880582), (Fraction(-1708639688693832229, 1919975276120067026), -0.889927964148941)])
37:(1412, 11783, -0.8892439876702656, [(Fraction(-835, 939), -0.8892438764643238), (Fraction(-10376285290435053919, 11668659484130931240), -0.8892439876702656)])
38:(1411, 11779, -0.8853585283825292, [(Fraction(-139, 157), -0.8853503184713376), (Fraction(-1572578278000403449, 1776205037380014214), -0.8853585283825285)])
39:(1410, 11777, -0.8800496804773725, [(Fraction(-719, 817), -0.8800489596083231), (Fraction(-2390295157455647533, 2716091159943447081), -0.8800496804773729)])
40:(947, 7481, -0.8783460388247402, [(Fraction(-361, 411), -0.878345498783455), (Fraction(-10142976662666717475, 11547813975729195512), -0.8783460388247405)])
41:(946, 7477, -0.8730130532626932, [(Fraction(-48, 55), -0.8727272727272727), (Fraction(-4758162165545060911, 5450276084375234788), -0.8730130532626934)])
42:(943, 7451, -0.8718000375088748, [(Fraction(-34, 39), -0.8717948717948718), (Fraction(-8877153337734324423, 10182556728375862090), -0.871800037508875)])
43:(713, 5407, -0.8684661079730926, [(Fraction(-515, 593), -0.8684654300168634), (Fraction(-5270578966045479157, 6068836673829966108), -0.8684661079730925)])
44:(712, 5399, -0.8674339772258646, [(Fraction(-229, 264), -0.8674242424242424), (Fraction(-3741300912096147601, 4313067057923165056), -0.8674339772258641)])
45:(711, 5393, -0.8635882339792418, [(Fraction(-804, 931), -0.8635875402792696), (Fraction(-13812915340983389308, 15994793348835058775), -0.8635882339792417)])
46:(710, 5387, -0.8597338943243826, [(Fraction(-190, 221), -0.8597285067873304), (Fraction(-4667209909286759237, 5428668033327290407), -0.8597338943243827)])
47:(709, 5381, -0.8558709250869898, [(Fraction(-95, 111), -0.8558558558558559), (Fraction(-5762071870259253392, 6732407541094587027), -0.8558709250869903)])
48:(492, 3527, -0.854083423136063, [(Fraction(-638, 747), -0.8540829986613119), (Fraction(-1212195599942987475, 1419294142827396038), -0.8540834231360636)])
49:(490, 3511, -0.8527457970647963, [(Fraction(-249, 292), -0.8527397260273972), (Fraction(-4222081971979631577, 4951161279847165142), -0.852745797064797)])
50:(483, 3457, -0.8439877234039983, [(Fraction(-779, 923), -0.8439869989165764), (Fraction(-9724924089108310762, 11522589511000745773), -0.8439877234039984)])
51:(482, 3449, -0.8433280027936585, [(Fraction(-436, 517), -0.8433268858800773), (Fraction(-3579104942114057573, 4244024780699442971), -0.8433280027936589)])
52:(464, 3301, -0.8404663537084873, [(Fraction(-79, 94), -0.8404255319148937), (Fraction(-6863017376154945289, 8165725309374318866), -0.8404663537084875)])
53:(463, 3299, -0.8269115626766652, [(Fraction(-19, 23), -0.8260869565217391), (Fraction(-1066515223372708863, 1289757298737558073), -0.8269115626766653)])
54:(384, 2657, -0.8148709250127633, [(Fraction(-22, 27), -0.8148148148148148), (Fraction(-6128329054259179467, 7520613223699439252), -0.814870925012763)])
55:(229, 1447, -0.807569061960451, [(Fraction(-235, 291), -0.8075601374570447), (Fraction(-3172265572860856418, 3928166298446205533), -0.8075690619604503)])
56:(227, 1433, -0.8031833731015237, [(Fraction(-404, 503), -0.8031809145129225), (Fraction(-2035585481770098477, 2534396938409726981), -0.8031833731015234)])
57:(226, 1429, -0.7877206686477907, [(Fraction(-449, 570), -0.787719298245614), (Fraction(-3154272461037200303, 4004303284883789289), -0.78772066864779)])
58:(225, 1427, -0.7632542534935378, [(Fraction(-216, 283), -0.7632508833922261), (Fraction(-3976621094885483747, 5210087040699539152), -0.763254253493538)])
59:(224, 1423, -0.7475207879782326, [(Fraction(-74, 99), -0.7474747474747475), (Fraction(-3638520768777641143, 4867450948914068289), -0.7475207879782327)])
60:(109, 599, -0.7416549742922087, [(Fraction(-511, 689), -0.7416545718432511), (Fraction(-1965631144710498654, 2650330966345070159), -0.7416549742922091)])
61:(108, 593, -0.7351438830654486, [(Fraction(-136, 185), -0.7351351351351352), (Fraction(-11129548105287428567, 15139278665937825196), -0.735143883065448)])
62:(107, 587, -0.7286121604788136, [(Fraction(-51, 70), -0.7285714285714285), (Fraction(-3614343914606403306, 4960586867272715731), -0.7286121604788136)])
63:(104, 569, -0.7088972862225538, [(Fraction(-263, 371), -0.7088948787061995), (Fraction(-12575474519345217215, 17739487459960777888), -0.7088972862225537)])
64:(103, 563, -0.7022872973458798, [(Fraction(-33, 47), -0.7021276595744681), (Fraction(-1279983444639738513, 1822592334329722772), -0.7022872973458795)])
65:(102, 557, -0.6956589922970857, [(Fraction(-16, 23), -0.6956521739130435), (Fraction(-12777824609458369462, 18367942844044346429), -0.6956589922970864)])
66:(69, 347, -0.6482933243521112, [(Fraction(-94, 145), -0.6482758620689655), (Fraction(-5481443642335583354, 8455190631206344141), -0.6482933243521108)])
67:(49, 227, -0.6180442280243583, [(Fraction(-322, 521), -0.6180422264875239), (Fraction(-3272429477572520833, 5294814398693076902), -0.6180442280243585)])
68:(48, 223, -0.5789324752070328, [(Fraction(-4, 7), -0.5714285714285714), (Fraction(-631041011125481004, 1090007968372847249), -0.5789324752070323)])
69:(35, 149, -0.566658170401084, [(Fraction(-13, 23), -0.5652173913043478), (Fraction(-3530515495413254869, 6230414877657785152), -0.5666581704010841)])
70:(26, 101, -0.5546242942155544, [(Fraction(-66, 119), -0.5546218487394958), (Fraction(-324735223986015885, 585504867660571378), -0.5546242942155543)])
71:(25, 97, -0.5079080007552566, [(Fraction(-257, 506), -0.5079051383399209), (Fraction(-6219810119314288160, 12245938457487303491), -0.5079080007552567)])
72:(19, 67, -0.4980414892148384, [(Fraction(-127, 255), -0.4980392156862745), (Fraction(-7296513047644342420, 14650412075402156239), -0.4980414892148385)])
73:(17, 59, -0.404036633536879, [(Fraction(-21, 52), -0.40384615384615385), (Fraction(-5464768436054426632, 13525428098478653905), -0.404036633536879)])
74:(13, 41, -0.35304193836349407, [(Fraction(-209, 592), -0.3530405405405405), (Fraction(-428847288210655541, 1214720523568823043), -0.35304193836349396)])
75:(12, 37, -0.3118084098199928, [(Fraction(-169, 542), -0.3118081180811808), (Fraction(-735370855075673159, 2358406097834894626), -0.3118084098199929)])
76:(10, 29, -0.23661753824200193, [(Fraction(-53, 224), -0.23660714285714285), (Fraction(-106723875297850143, 451039580965878764), -0.2366175382420015)])
77:(7, 17, -0.18306853106216125, [(Fraction(-80, 437), -0.18306636155606407), (Fraction(-1271533922304677086, 6945671737940182595), -0.18306853106216114)])
78:(5, 11, 0.11467709223878936, [(Fraction(25, 218), 0.11467889908256881), (Fraction(819767841611021608, 7148488208124785951), 0.11467709223878901)])
79:(3, 5, 0.47400655038185785, [(Fraction(73, 154), 0.474025974025974), (Fraction(135236611098311740, 285305363373914593), 0.47400655038185796)])
80:(2, 3, 1.173365740021719, [])
===
py_adhoc_call { +lineno }  seed.math.prime_pint.generate_primes   ,_third_coeff_n7022__refine +to_add1
1:(7022, 70919, 0.061555028084686825)
2:(7021, 70913, 0.062297425677998675)
3:(7019, 70891, 0.06235808413229371)
4:(7017, 70877, 0.06355877617225536)
5:(7016, 70867, 0.06373175130719222)
6:(7014, 70849, 0.06436292647055764)
7:(7013, 70843, 0.0651063924913875)
8:(7012, 70841, 0.06642049885105683)
9:(6947, 70117, 0.06709578716584153)
10:(6946, 70111, 0.06784529755227497)
11:(6936, 70001, 0.06814226562946057)
12:(6935, 69997, 0.06918125653403662)
13:(6934, 69991, 0.06993209043332982)
14:(4272, 40813, 0.0703285134429632)
15:(4266, 40751, 0.07080546775904839)
16:(3471, 32359, 0.0721879791494362)
17:(3470, 32353, 0.073469010940868)
18:(3467, 32323, 0.0738547820613662)
19:(3466, 32321, 0.07629147270270087)
20:(3464, 32303, 0.07712722735010358)
21:(3463, 32299, 0.0789891630166748)
22:(3462, 32297, 0.08142978268668521)
23:(3439, 32059, 0.08209986751877096)
24:(3438, 32057, 0.08455618847316648)
25:(3437, 32051, 0.08585003937829505)
26:(3428, 31957, 0.08585582117680923)
27:(2227, 19681, 0.0867267891637522)
28:(2201, 19427, 0.08898805599850412)
29:(2200, 19423, 0.09169538145554457)
30:(2199, 19421, 0.09531444348308815)
31:(2198, 19417, 0.09802665016897016)
32:(2194, 19381, 0.09978212131667608)
33:(2193, 19379, 0.10341338609137152)
34:(2192, 19373, 0.10522291499201941)
35:(1415, 11807, 0.10760979233529833)
36:(1414, 11801, 0.11007203585105874)
37:(1412, 11783, 0.11075601232973442)
38:(1411, 11779, 0.11464147161747085)
39:(1410, 11777, 0.11995031952262747)
40:(947, 7481, 0.12165396117525984)
41:(946, 7477, 0.12698694673730682)
42:(943, 7451, 0.1281999624911252)
43:(713, 5407, 0.13153389202690735)
44:(712, 5399, 0.13256602277413543)
45:(711, 5393, 0.13641176602075822)
46:(710, 5387, 0.14026610567561737)
47:(709, 5381, 0.1441290749130102)
48:(492, 3527, 0.145916576863937)
49:(490, 3511, 0.14725420293520375)
50:(483, 3457, 0.1560122765960017)
51:(482, 3449, 0.1566719972063415)
52:(464, 3301, 0.15953364629151268)
53:(463, 3299, 0.1730884373233348)
54:(384, 2657, 0.18512907498723674)
55:(229, 1447, 0.19243093803954903)
56:(227, 1433, 0.19681662689847634)
57:(226, 1429, 0.21227933135220933)
58:(225, 1427, 0.23674574650646218)
59:(224, 1423, 0.2524792120217674)
60:(109, 599, 0.2583450257077913)
61:(108, 593, 0.26485611693455136)
62:(107, 587, 0.2713878395211864)
63:(104, 569, 0.29110271377744623)
64:(103, 563, 0.2977127026541202)
65:(102, 557, 0.3043410077029143)
66:(69, 347, 0.3517066756478888)
67:(49, 227, 0.3819557719756417)
68:(48, 223, 0.42106752479296716)
69:(35, 149, 0.433341829598916)
70:(26, 101, 0.44537570578444563)
71:(25, 97, 0.49209199924474345)
72:(19, 67, 0.5019585107851616)
73:(17, 59, 0.595963366463121)
74:(13, 41, 0.6469580616365059)
75:(12, 37, 0.6881915901800072)
76:(10, 29, 0.7633824617579981)
77:(7, 17, 0.8169314689378387)
78:(5, 11, 1.1146770922387894)
79:(3, 5, 1.4740065503818578)
80:(2, 3, 2.173365740021719)
===
初选:中选耂第三系数尾峰点集牜前七千二十二个素数#(1+third_coeff)
1:(7022, 70919, 0.061555028084686825)
... ...
13:(6934, 69991, 0.06993209043332982)
14:(4272, 40813, 0.0703285134429632)
... ...
21:(3463, 32299, 0.0789891630166748)
22:(3462, 32297, 0.08142978268668521)
... ...
28:(2201, 19427, 0.08898805599850412)
29:(2200, 19423, 0.09169538145554457)
... ...
32:(2194, 19381, 0.09978212131667608)
33:(2193, 19379, 0.10341338609137152)
... ...
35:(1415, 11807, 0.10760979233529833)
36:(1414, 11801, 0.11007203585105874)
... ...
39:(1410, 11777, 0.11995031952262747)
40:(947, 7481, 0.12165396117525984)
... ...
42:(943, 7451, 0.1281999624911252)
43:(713, 5407, 0.13153389202690735)
... ...
45:(711, 5393, 0.13641176602075822)
46:(710, 5387, 0.14026610567561737)
... ...
49:(490, 3511, 0.14725420293520375)
50:(483, 3457, 0.1560122765960017)
... ...
52:(464, 3301, 0.15953364629151268)
53:(463, 3299, 0.1730884373233348)
54:(384, 2657, 0.18512907498723674)
55:(229, 1447, 0.19243093803954903)
56:(227, 1433, 0.19681662689847634)
57:(226, 1429, 0.21227933135220933)
58:(225, 1427, 0.23674574650646218)
59:(224, 1423, 0.2524792120217674)
... ...
64:(103, 563, 0.2977127026541202)
65:(102, 557, 0.3043410077029143)
... ...
67:(49, 227, 0.3819557719756417)
68:(48, 223, 0.42106752479296716)
... ...
71:(25, 97, 0.49209199924474345)
72:(19, 67, 0.5019585107851616)
... ...
73:(17, 59, 0.595963366463121)
74:(13, 41, 0.6469580616365059)
... ...
75:(12, 37, 0.6881915901800072)
76:(10, 29, 0.7633824617579981)
77:(7, 17, 0.8169314689378387)
78:(5, 11, 1.1146770922387894)
79:(3, 5, 1.4740065503818578)
80:(2, 3, 2.173365740021719)
==>>:
第三系数尾峰点
再筛选:中选耂第三系数尾峰点集牜前七千二十二个素数#(1+third_coeff)
1:(7022, 70919, 0.061555028084686825)
... ...
13:(6934, 69991, 0.06993209043332982)
... ...
21:(3463, 32299, 0.0789891630166748)
... ...
28:(2201, 19427, 0.08898805599850412)
... ...
32:(2194, 19381, 0.09978212131667608)
... ...
35:(1415, 11807, 0.10760979233529833)
... ...
39:(1410, 11777, 0.11995031952262747)
... ...
42:(943, 7451, 0.1281999624911252)
... ...
45:(711, 5393, 0.13641176602075822)
... ...
49:(490, 3511, 0.14725420293520375)
... ...
52:(464, 3301, 0.15953364629151268)
53:(463, 3299, 0.1730884373233348)
54:(384, 2657, 0.18512907498723674)
... ...
56:(227, 1433, 0.19681662689847634)
... ...
59:(224, 1423, 0.2524792120217674)
... ...
64:(103, 563, 0.2977127026541202)
... ...
67:(49, 227, 0.3819557719756417)
... ...
71:(25, 97, 0.49209199924474345)
... ...
73:(17, 59, 0.595963366463121)
... ...
75:(12, 37, 0.6881915901800072)
76:(10, 29, 0.7633824617579981)
77:(7, 17, 0.8169314689378387)
78:(5, 11, 1.1146770922387894)
79:(3, 5, 1.4740065503818578)
80:(2, 3, 2.173365740021719)
==>>:
生成冫所有第三系数尾峰点集牜前七千二十二个素数:goto
数据化:中选耂第三系数尾峰点集牜前七千二十二个素数#(1+third_coeff)
[(7022, 70919, 0.0615550281 or 0.061555028084686825)
,(6934, 69991, 0.07 or 0.06993209043332982)
,(3463, 32299, 0.08 or 0.0789891630166748)
,(2201, 19427, 0.09 or 0.08898805599850412)
,(2194, 19381, 0.1 or 0.09978212131667608)
,(1415, 11807, 0.11 or 0.10760979233529833)
,(1410, 11777, 0.12 or 0.11995031952262747)
,(943, 7451, 0.13 or 0.1281999624911252)
,(711, 5393, 0.14 or 0.13641176602075822)
,(490, 3511, 0.15 or 0.14725420293520375)
,(464, 3301, 0.16 or 0.15953364629151268)
,(463, 3299, 0.18 or 0.1730884373233348)
,(384, 2657, 0.19 or 0.18512907498723674)
,(227, 1433, 0.2 or 0.19681662689847634)
,(224, 1423, 0.26 or 0.2524792120217674)
,(103, 563, 0.3 or 0.2977127026541202)
,(49, 227, 0.4 or 0.3819557719756417)
,(25, 97, 0.5 or 0.49209199924474345)
,(17, 59, 0.6 or 0.595963366463121)
,(12, 37, 0.7 or 0.6881915901800072)
,(10, 29, 0.764 or 0.7633824617579981)
,(7, 17, 0.817 or 0.8169314689378387)
,(5, 11, 1.1147 or 1.1146770922387894)
,(3, 5, 1.4741 or 1.4740065503818578)
,(2, 3, 2.1734 or 2.173365740021719)
]

25项:
[中选耂第三系数尾峰点集牜前七千二十二个素数:=[(7022, 70919) ,(6934, 69991) ,(3463, 32299) ,(2201, 19427) ,(2194, 19381) ,(1415, 11807) ,(1410, 11777) ,(943, 7451) ,(711, 5393) ,(490, 3511) ,(464, 3301) ,(463, 3299) ,(384, 2657) ,(227, 1433) ,(224, 1423) ,(103, 563) ,(49, 227) ,(25, 97) ,(17, 59) ,(12, 37) ,(10, 29) ,(7, 17) ,(5, 11) ,(3, 5) ,(2, 3)]]

===
]]]
[[[

>>> from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_
>>> cf__ln2 = cf_ln_(2)
>>> cf__ln2.[:70] #doctest: +SKIP
(0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2, 5, 14, 1, 10, 1, 4, 2, 18, 3, 1, 4, 1, 6, 2, 7, 3, 3, 1, 13, 3, 1, 4, 4, 1, 3, 1, 1, 1, 1, 2)
>>> [*islice(cf__ln2.iter_approximate_fractions_(), 48)][-3:] #doctest: +SKIP
[Fraction(1385328996563313413, 1998607273341576092), Fraction(3052446177238342414, 4403748962482230453), Fraction(56329360186853476865, 81266088598021724246)]
>>> 2**60 < 1998607273341576092 < 2**61 < 2**64 < 2**66 < 81266088598021724246 < 2**67
True

===
py_adhoc_call   seed.math.continued_fraction.continued_fraction_fold   ,iter_approximate_fraction_NDs5continued_fraction_  ='(0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2, 5, 14, 1, 10, 1, 4, 2, 18, 3, 1, 4, 1, 6, 2, 7, 3, 3, 1, 13, 3, 1, 4, 4, 1, 3, 1, 1, 1, 1, 2)'
(0, 1)
(1, 1)
(2, 3)
(7, 10)
(9, 13)
(61, 88)
(192, 277)
(253, 365)
(445, 642)
(1143, 1649)
(1588, 2291)
(2731, 3940)
(4319, 6231)
(7050, 10171)
(25469, 36744)
(261740, 377611)
(287209, 414355)
(548949, 791966)
(836158, 1206321)
(2221265, 3204608)
(3057423, 4410929)
(5278688, 7615537)
(8336111, 12026466)
(13614799, 19642003)
(49180508, 70952475)
(111975815, 161546953)
(385107953, 555593334)
(497083768, 717140287)
(6847196937, 9878417065)
(48427462327, 69866059742)
(200557046245, 289342656033)
(248984508572, 359208715775)
(449541554817, 648551371808)
(698526063389, 1007760087583)
(5339223998540, 7702871984889)
(11376974060469, 16413504057361)
(50847120240416, 73356888214333)
(62224094300885, 89770392271694)
(113071214541301, 163127280486027)
(288366523383487, 416024953243748)
(1554903831458736, 2243252046704767)
(22057020163805791, 31821553607110486)
(23611923995264527, 34064805653815253)
(258176260116451061, 372469610145263016)
(281788184111715588, 406534415799078269)
(1385328996563313413, 1998607273341576092)
(3052446177238342414, 4403748962482230453)
(56329360186853476865, 81266088598021724246)
(172040526737798773009, 248202014756547403191)
(228369886924652249874, 329468103354569127437)
(1085520074436407772505, 1566074428174823912939)
(1313889961361060022379, 1895542531529393040376)
(8968859842602767906779, 12939329617351182155195)
(19251609646566595835937, 27774201766231757350766)
(143730127368568938758338, 207358741980973483610557)
(450441991752273412110951, 649850427709152208182437)
(1495056102625389175091191, 2156910025108430108157868)
(1945498094377662587202142, 2806760452817582316340305)
(26786531329535002808719037, 38644795911737000220581833)
(82305092082982671013359253, 118741148188028582978085804)
(109091623412517673822078290, 157385944099765583198667637)
(518671585733053366301672413, 748284924587090915772756352)
(2183777966344731139028767942, 3150525642448129246289693045)
(2702449552077784505330440355, 3898810567035220162062449397)
(10291126622578084655020089007, 14846957343553789732477041236)
(12993576174655869160350529362, 18745767910589009894539490633)
(23284702797233953815370618369, 33592725254142799627016531869)
(36278278971889822975721147731, 52338493164731809521556022502)
(59562981769123776791091766100, 85931218418874609148572554371)
(155404242510137376557904679931, 224200930002481027818701131244)

===
]]]


]]]'''#'''
__all__ = r'''
list_primes__len_ge_

list_primes_le_
list_primes_lt_

sieve_primes_le_
sieve_primes_lt_

estimate_upper_bound4Kth_prime__formula1__using_467over398_
estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_
'''.split()#'''
__all__
___begin_mark_of_excluded_global_names__0___ = ...
from math import floor, ceil, isqrt

from itertools import repeat, compress, islice, chain
#.from seed.tiny_.check import check_type_is, check_int_ge
#.
#.from seed.abc.abc__ver1 import abstractmethod, override, ABC
#.from seed.helper.repr_input import repr_helper
___end_mark_of_excluded_global_names__0___ = ...

#.class __(ABC):
#.    __slots__ = ()
#.    ___no_slots_ok___ = True
#.    def __repr__(sf, /):
#.        return repr_helper(sf, *args, **kwargs)
#.if __name__ == "__main__":
#.    raise NotImplementedError


def list_primes_le_(max0, T=None, BitList=None, /):
    'real -> [prime]'
    return _list_primes_lt_(1+floor(max0), T, BitList)
def list_primes_lt_(max1, T=None, BitList=None, /):
    'real -> [prime]'
    return _list_primes_lt_(ceil(max1), T, BitList)
def _list_primes_lt_(max1, T, BitList, /):
    'int -> [prime]'
    if T is None:
        T = tuple
    bs = _sieve_primes_lt_(max1, BitList)
    return T(compress(range(len(bs)), bs))









def sieve_primes_le_(max0, BitList=None, /):
    'real -> BitList'
    return _sieve_primes_lt_(1+floor(max0), BitList)
def sieve_primes_lt_(max1, BitList=None, /):
    'real -> BitList'
    return _sieve_primes_lt_(ceil(max1), BitList)
def _sieve_primes_lt_(max1, BitList, /):
    'int -> BitList'
    if BitList is None:
        from seed.types.BitList import BitList
    BitList

    max1 = max(0, max1)
    imay_max_sqrt = isqrt(max1-1) if max1 else -1
    max1_sqrt = 1+imay_max_sqrt
    assert 0 <= max1_sqrt#<= max1_sqrt**2
    assert max1_sqrt==0==max1 or 0 <= max1_sqrt-1 <= (max1_sqrt-1)**2 <= max1-1 < max1 <= max1_sqrt**2

    bs = BitList(repeat(1, max1))
    for k in range(min(2, max1)):
        bs[k] = 0
    for d in range(max1_sqrt):
        if not bs[d]: continue
        # [is_prime_(d)]
        p = d
        for k in range(2*p, max1, p):
            bs[k] = 0
    return bs







_cf_digits__neg8937680917949958227over9523926479896484331 = (-1, 16, 4, 14, 24, 2, 10, 3, 5, 1149, 3, 20, 1, 1, 3, 1, 74, 2, 1, 8, 86, 1, 4, 2)
assert len(_cf_digits__neg8937680917949958227over9523926479896484331)&1 == 0 #even
    # !! upper_bound
_cf_digits__467over398 = (1, 5, 1, 3, 3, 5)
assert len(_cf_digits__467over398)&1 == 0 #even
    # !! upper_bound
def estimate_upper_bound4Kth_prime__formula1__using_467over398_(k, /, *, inexact=False, using_param6n7022=False):
    r'''
    'k -> upper_bound{PRIMES[k]} # == upper_bound{PRIMES_S1[1+k]}'
    [PRIMES[k] <= upper_bound{PRIMES[k]}]
    [[n>=2] -> [n*ln(n) + n*(lnln(n)-416/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +467/398)]]
    [PRIMES_S1[1] == PRIMES[0] == 2]
    [PRIMES_S1[7022] == PRIMES[7021] == 70919]

    '''#'''
    k = floor(k)
    k = max(0, k)
    n = 1 + k
    #.if n <= 2:
    #.    # 1,2 --> 2,3
    #.    return 1+n
    if n == 1:
        # 1 --> 2
        return 1+n
    assert n >= 2
    # [n >= 2]
    from seed.math.continued_fraction.continued_fraction_ops____using_LazyList import ContinuedFraction
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import iter_continued_fraction_of_irrational_ln_cf_, iter_continued_fraction_of_irrational_ln_Fraction_
        # require input > 1
    #######
    # [n >= 2]
    # [n/1 > 1]
    cf__lnN = ContinuedFraction(iter_continued_fraction_of_irrational_ln_Fraction_(n, 1))
    if inexact:
        sz = len(_cf_digits__467over398)
        assert sz&1 == 0 #even
            # !! upper_bound
        cf__lnN = ContinuedFraction(islice(iter(cf__lnN), sz))
    cf__lnN

    #######
    # [ln(n) > 1] <==> [n >= 3]
    if n == 2:
        # [n == 2]
        # [ln(n) < 1]
        # [1/ln(n) > 1]
        # [lnln(n) == -ln(1/ln(n)) < 0]
        cf__lnlnN = -ContinuedFraction(iter_continued_fraction_of_irrational_ln_cf_(iter(1/cf__lnN)))
    else:
        # [n >= 3]
        # [ln(n) > 1]
        # [lnln(n) == ln(ln(n)) > 0]
        cf__lnlnN = ContinuedFraction(iter_continued_fraction_of_irrational_ln_cf_(iter(cf__lnN)))
    cf__lnlnN
    if inexact:
        cf__lnlnN = ContinuedFraction(islice(iter(cf__lnlnN), sz))
    cf__lnlnN

    #######
    if using_param6n7022 and n >= 7022:
        cf__neg8937680917949958227over9523926479896484331 = ContinuedFraction(_cf_digits__neg8937680917949958227over9523926479896484331)
        #(-8937680917949958227/9523926479896484331)
        cf__K = cf__neg8937680917949958227over9523926479896484331
    else:
        cf__467over398 = ContinuedFraction(_cf_digits__467over398)
        cf__K = cf__467over398
    cf__K

    #######
    return floor(n*(cf__lnN + cf__lnlnN + cf__K))
    #######
    return floor(n*(cf__lnN + cf__lnlnN + cf__467over398))

#end-def estimate_upper_bound4Kth_prime__formula1__using_467over398_(k, /, *, inexact=False, using_param6n7022=False):
def estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(k, /, *, using_param6n7022=False, using_best_param_known=False, _with_param=False):
    r'''
    'k -> upper_bound{PRIMES[k]} # == upper_bound{PRIMES_S1[1+k]}'
    [PRIMES[k] <= upper_bound{PRIMES[k]}]
    [[n>=2] -> [n*ln(n) + n*(lnln(n)-416/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +467/398)]]
    [PRIMES_S1[1] == PRIMES[0] == 2]
    [PRIMES_S1[7022] == PRIMES[7021] == 70919]

    '''#'''
    k = floor(k)
    k = max(0, k)
    n = 1 + k
    #.if n <= 2:
    #.    # 1,2 --> 2,3
    #.    return 1+n
    if n == 1:
        # 1 --> 2
        return 1+n
    assert n >= 2
    # [n >= 2]
    from fractions import Fraction
    #######
    gt_lnN = _gt_ln_(n)
    gt_lnlnN = _gt_ln_(gt_lnN)
    if using_best_param_known:
        from bisect import bisect_right
        j = bisect_right(_4using_best_param_known, n, key=lambda t:t[0])
        assert j >= 1, (n, j)
        (n0,p0,fr0,fl0) = _4using_best_param_known[j-1]
        assert n0 <= n, (n, j, n0)
        assert j==len(_4using_best_param_known) or n0 <= n < _4using_best_param_known[j][0], (n, j, n0)
        fr__K = fr0
    elif using_param6n7022 and n >= 7022:
        fr__K = Fraction(-8937680917949958227, 9523926479896484331)
    else:
        fr__K = Fraction(467,398)
    fr__K
    fs = (gt_lnN, gt_lnlnN, fr__K)
    result = floor(sum(fs)*n)
    if _with_param:
        return (result, fr__K)
    return result
    #######
    from math import log as ln
    lnN = ln(n) #bug:round-error:may decrease...
    lnlnN = ln(lnN)
    fs = (Fraction(*lnN.as_integer_ratio()), Fraction(*lnlnN.as_integer_ratio()), Fraction(467,398))
    return floor(sum(fs)*n)

    #######
    #bug:round-error:may decrease...
    return floor(n*(lnN + lnlnN + _fr__467over398))
    _fr__467over398 = (467/398)
def _中选耂第三系数尾峰点集牜前七千二十二个素数():
    from fractions import Fraction
    return \
    [(7022, 70919, Fraction(-8937680917949958227, 9523926479896484331), -0.9384449719153126)
    ,(6934, 69991, Fraction(-16283427684683656592, 17507783589985676623), -0.9300679095666716)
    ,(3463, 32299, Fraction(-5300976768999391794, 5755607378477966345), -0.9210108369833249)
    ,(2201, 19427, Fraction(-8449115367794934233, 9274428753023099002), -0.911011944001495)
    ,(2194, 19381, Fraction(-63815349012167534, 70888782064076653), -0.9002178786833238)
    ,(1415, 11807, Fraction(-4907053136333821975, 5498775192945144627), -0.8923902076647007)
    ,(1410, 11777, Fraction(-2390295157455647533, 2716091159943447081), -0.8800496804773729)
    ,(943, 7451, Fraction(-8877153337734324423, 10182556728375862090), -0.871800037508875)
    ,(711, 5393, Fraction(-13812915340983389308, 15994793348835058775), -0.8635882339792417)
    ,(490, 3511, Fraction(-4222081971979631577, 4951161279847165142), -0.852745797064797)
    ,(464, 3301, Fraction(-6863017376154945289, 8165725309374318866), -0.8404663537084875)
    ,(463, 3299, Fraction(-1066515223372708863, 1289757298737558073), -0.8269115626766653)
    ,(384, 2657, Fraction(-6128329054259179467, 7520613223699439252), -0.814870925012763)
    ,(227, 1433, Fraction(-2035585481770098477, 2534396938409726981), -0.8031833731015234)
    ,(224, 1423, Fraction(-3638520768777641143, 4867450948914068289), -0.7475207879782327)
    ,(103, 563, Fraction(-1279983444639738513, 1822592334329722772), -0.7022872973458795)
    ,(49, 227, Fraction(-3272429477572520833, 5294814398693076902), -0.6180442280243585)
    ,(25, 97, Fraction(-6219810119314288160, 12245938457487303491), -0.5079080007552567)
    ,(17, 59, Fraction(-5464768436054426632, 13525428098478653905), -0.404036633536879)
    ,(12, 37, Fraction(-735370855075673159, 2358406097834894626), -0.3118084098199929)
    ,(10, 29, Fraction(-106723875297850143, 451039580965878764), -0.2366175382420015)
    ,(7, 17, Fraction(-1271533922304677086, 6945671737940182595), -0.18306853106216114)
    ,(5, 11, Fraction(819767841611021608, 7148488208124785951), 0.11467709223878901)
    ,(3, 5, Fraction(135236611098311740, 285305363373914593), 0.47400655038185796)
    ,(2, 3, Fraction(15610327141060647608, 13303888641551525287), 1.173365740021719)
        #,(2, 3, Fraction(467,398), )
    ][::-1]
_4using_best_param_known = _中选耂第三系数尾峰点集牜前七千二十二个素数()
def _gt_ln_(n, /):
    gt_lbN = floor(n).bit_length() # == 1+floor_log2(floor(n)) > log2(n)
    _gt_ln2 # > ln(2)
    gt_lnN = _gt_ln2*gt_lbN # > ln(2)*log2(n) == ln(n)
    return gt_lnN
def __():
    from fractions import Fraction
    gt_ln2 = Fraction(1385328996563313413, 1998607273341576092)
    return gt_ln2
_gt_ln2 = __() # [N<D<2**64]
def __():
    from math import log as ln
    from fractions import Fraction
    ln2 = ln(2)
    (N,D) = ln2.as_integer_ratio()
    if 0b0001:
        print(N, D)
        #6243314768165359 9007199254740992
    gt_ln2 = Fraction(N+1,D)
        #to overcome:round-error
    return gt_ln2
#_ln2 = __()
if 0b0000:
    print(_ln2)
    390207173010335/562949953421312
if 1:
    assert float.fromhex('0x1.62e42fefa39efp-1') == 6243314768165359/9007199254740992 == 6243314768165359/2**53
    assert ((6243314768165359+1)/2**53).hex() == '0x1.62e42fefa39f0p-1'
    assert float.fromhex('0x1.62e42fefa39f0p-1') == (6243314768165359+1)/2**53 == 390207173010335/562949953421312
    assert 0x162e42fefa39ef == 6243314768165359
def __(sz, /):
    assert sz&1 == 0, sz # even => bigger
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_
    from seed.math.continued_fraction.continued_fraction_fold import calc_ND5finite_continued_fraction_, calc_Fraction5finite_continued_fraction_
    from fractions import Fraction

    cf__ln2 = cf_ln_(2)
    assert Fraction(6243314768165359,9007199254740992) < cf__ln2 < Fraction(390207173010335,562949953421312)
    assert cf__ln2 < Fraction(1385328996563313413, 1998607273341576092) == _gt_ln2
    gt_ln2 = calc_Fraction5finite_continued_fraction_(ls:=cf__ln2[:sz])
        #to overcome:round-error
    if 0b0001:print(ls)
    return gt_ln2
#_ln2 = __(8)
if 0b0000:
    print(__(8))
    (0, 1, 2, 3, 1, 6, 3, 1)
    253/365
    print(__(40))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2)
    288366523383487/416024953243748

    print(__(22))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1)
    5278688/7615537
    print(__(24))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1)
    13614799/19642003
    print(__(26))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2)
    111975815/161546953
if 0b0000:
    print(__(46))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2, 5, 14, 1, 10, 1, 4)
    1385328996563313413/1998607273341576092

    print(__(48))
    (0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2, 5, 14, 1, 10, 1, 4, 2, 18)
    56329360186853476865/81266088598021724246

def __():
    from seed.math.continued_fraction.continued_fraction_fold import iter_continued_fraction_digits5ND_, iter_approximate_fractions5continued_fraction_
    lsx = [*iter_continued_fraction_digits5ND_(6243314768165359, 9007199254740992)]
    ls0 = [*iter_continued_fraction_digits5ND_(390207173010335, 562949953421312)]
    ls1 = [*iter_continued_fraction_digits5ND_(253, 365)]
    ls2 = [*iter_continued_fraction_digits5ND_(288366523383487, 416024953243748)]
    assert len(ls1) == 7
        #bug:assert len(ls1) == 8
        #   !! (0, 1, 2, 3, 1, 6, 3, 1) --> (0, 1, 2, 3, 1, 6, 3, 2)
    assert len(ls2) == 40
    if 0b0000:
        print(lsx)
        print(ls0)
        print(ls1)
        print(ls2)
    assert lsx == [0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 3, 3, 6, 4, 2, 27, 9, 3, 1, 1, 1, 2, 1, 1, 2, 4]
    assert ls0 == [0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 4, 11, 7, 2, 1, 6, 2, 1, 21, 1, 1, 1, 1, 1, 6]
    assert ls1 == [0, 1, 2, 3, 1, 6, 4]
    assert ls2 == [0, 1, 2, 3, 1, 6, 3, 1, 1, 2, 1, 1, 1, 1, 3, 10, 1, 1, 1, 2, 1, 1, 1, 1, 3, 2, 3, 1, 13, 7, 4, 1, 1, 1, 7, 2, 4, 1, 1, 2]
    from fractions import Fraction
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_
    cf__ln2 = cf_ln_(2)

    assert Fraction(253, 365) > Fraction(390207173010335, 562949953421312)
    assert (
        Fraction(253, 365) # == cf__ln2[:8]
        > Fraction(5278688,7615537) # == cf__ln2[:22]
        > Fraction(13614799,19642003) # == cf__ln2[:24]
        > Fraction(390207173010335, 562949953421312) # == (N+1)/D from float-ln(2) coprime N,D
        == Fraction(6243314768165359+1, 9007199254740992)
        > Fraction(111975815,161546953) # == cf__ln2[:26]
        > Fraction(288366523383487, 416024953243748) # == cf__ln2[:40]
        > Fraction(1385328996563313413, 1998607273341576092) # == cf__ln2[:46]
            # NOTE:[2**60 < 1998607273341576092 < 2**61 < 2**64 < 2**66 < 81266088598021724246 < 2**67]
            #   => _gt_ln2
        > Fraction(56329360186853476865, 81266088598021724246) # == cf__ln2[:48]
        > cf__ln2
        > Fraction(6243314768165359, 9007199254740992)
        == Fraction(6243314768165359, 2**53)
        )
if 0b0001:__()
assert 2**60 < 1998607273341576092 < 2**61 < 2**64 < 2**66 < 81266088598021724246 < 2**67
#######




def _bisects4reduce_coeff__36(main_ratios, max_n, /, *, using_param6n7022:bool):
    for main_ratio in main_ratios:
        yield main_ratio
        yield from _bisect4reduce_coeff__36(main_ratio, max_n, using_param6n7022=using_param6n7022)
def _bisect4reduce_coeff__36(main_ratio4inv_num_primesLE, max_n, /, *, using_param6n7022:bool):
    from bisect import bisect_right
    reverse = True
        # => -main_ratio4inv_num_primesLEN
    def f(n):
        [(_n, main_ratio4inv_num_primesLEN)] = _reduce_coeff__36([n], using_param6n7022=using_param6n7022)
        #if 0b0001:print('@_bisect4reduce_coeff__36', n, _n, main_ratio4inv_num_primesLEN)
        return -main_ratio4inv_num_primesLEN
    if 0:
        #range(1+max_n) => OverflowError: Python int too large to convert to C ssize_t

        n0 = bisect_right(range(1+max_n), -main_ratio4inv_num_primesLE, 2, key=f)
    else:
        from seed.seq_tools.bisearch import bisearch
        n0 = bisearch(-main_ratio4inv_num_primesLE, range(1+max_n), 2, key=f, result_case=1)
    n0
    for n in range(max(2,n0-1), n0+1):
        yield (n, -f(n))
    return n0
def _reduce_coeff__36(ns, /, *, to_sub1=False, using_param6n7022:bool):
    r'''[[[
    to reduce "36" in below formula:
        [[n>=1] -> [1/4*n*ln(n) < PRIMES_S1[n] < 36*n*ln(n)]]
    using:
        [[n>=2] -> [n*ln(n) + n*(lnln(n)-416/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +467/398)]]


    !! [C*n*ln(n) < n*ln(n) + n*lnln(n) + K*n]
    [C < 1 + (lnln(n) + K)/ln(n)]
    input:K
    output:C
        (2, 2.1640441398569763)
        (3, 2.153650541561017)
        (363, 1.5000286111285766)
        (364, 1.4998744715742005)
        (367, 1.4994152155404912)

    ==>>:
    [[n>=2] -> [PRIMES_S1[n] < (277/128)*n*ln(n)]]
    [[n>=3] -> [PRIMES_S1[n] < (28/13)*n*ln(n)]]
    [[n>=364] -> [PRIMES_S1[n] < (3/2)*n*ln(n)]]
    #xxx:[[n>=367] -> [PRIMES_S1[n] < (3/2)*n*ln(n)]]
        # xxx:[PRIMES_S1[73] == PRIMES[72] == 367]


(2, 2.1640441398569763)
(3, 2.153650541561017)
>>> (277/128)
2.1640625
>>> (28/13)
2.1538461538461537


(2, 2.1640441398569763)
py_adhoc_call   seed.math.continued_fraction.continued_fraction5ND   @list.iter_continued_fraction_digits5ND_  =21640441398569763 =10000000000000000
[2, 6, 10, 2, 2, 1, 5, 1, 1, 3, 7, 1, 1, 1, 6, 2, 3, 1, 13, 1, 2, 2, 2, 5, 4, 1, 31, 3, 1, 1, 4, 2, 1, 14]
py_adhoc_call   seed.math.continued_fraction.continued_fraction_fold   ,iter_approximate_fraction_NDs5continued_fraction_  ='[2, 6, 10, 2, 2, 1, 5, 1, 1, 3, 7, 1, 1, 1, 6, 2, 3, 1, 13, 1, 2, 2, 2, 5, 4, 1, 31, 3, 1, 1, 4, 2, 1, 14]'
(2, 1)
(13, 6)
(132, 61)
(277, 128)
(686, 317)
(963, 445)
(5501, 2542)
(6464, 2987)
(11965, 5529)
(42359, 19574)
(308478, 142547)
(350837, 162121)
(659315, 304668)
(1010152, 466789)
(6720227, 3105402)
(14450606, 6677593)
(50072045, 23138181)
(64522651, 29815774)
(888866508, 410743243)
(953389159, 440559017)
(2795644826, 1291861277)
(6544678811, 3024281571)
(15885002448, 7340424419)
(85969691051, 39726403666)
(359763766652, 166246039083)
(445733457703, 205972442749)
(14177500955445, 6551391764302)
(42978236324038, 19860147735655)
(57155737279483, 26411539499957)
(100133973603521, 46271687235612)
(457691631693567, 211498288442405)
(1015517236990655, 469268264120422)
(1473208868684222, 680766552562827)
(21640441398569763, 10000000000000000)

(3, 2.153650541561017)
py_adhoc_call   seed.math.continued_fraction.continued_fraction5ND   @list.iter_continued_fraction_digits5ND_  =2153650541561017 =1000000000000000
[2, 6, 1, 1, 29, 1, 2, 2, 5, 1, 2, 1, 1, 2, 1, 13, 18, 8, 3, 1, 10, 1, 9, 1, 446, 5]
py_adhoc_call   seed.math.continued_fraction.continued_fraction_fold   ,iter_approximate_fraction_NDs5continued_fraction_  ='[2, 6, 1, 1, 29, 1, 2, 2, 5, 1, 2, 1, 1, 2, 1, 13, 18, 8, 3, 1, 10, 1, 9, 1, 446, 5]'
(2, 1)
(13, 6)
(15, 7)
(28, 13)
(827, 384)
(855, 397)
(2537, 1178)
(5929, 2753)
(32182, 14943)
(38111, 17696)
(108404, 50335)
(146515, 68031)
(254919, 118366)
(656353, 304763)
(911272, 423129)
(12502889, 5805440)
(225963274, 104921049)
(1820209081, 845173832)
(5686590517, 2640442545)
(7506799598, 3485616377)
(80754586497, 37496606315)
(88261386095, 40982222692)
(875107061352, 406336610543)
(963368447447, 447318833235)
(430537434622714, 199910536233353)
(2153650541561017, 1000000000000000)


++kw:using_param6n7022
[[n>=7022] -> [PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +(-8937680917949958227/9523926479896484331))]]
    ]]]'''#'''
    #_reduce_coeff__36
    if using_param6n7022:
        K = (-8937680917949958227/9523926479896484331)
        ns = filter(7022 .__le__, ns)
    else:
        K = +467/398
        ns
    return _reduce_coeff__xxx_(K, ns, to_sub1=to_sub1)

def _reduce_coeff__4(ns, /, *, to_sub1=False):
    r'''[[[
    to reduce "4" in below formula:
        [[n>=1] -> [1/4*n*ln(n) < PRIMES_S1[n] < 36*n*ln(n)]]
    using:
        [[n>=2] -> [n*ln(n) + n*(lnln(n)-416/413) <= PRIMES_S1[n] <= n*ln(n) + n*(lnln(n) +467/398)]]

    !! [C*n*ln(n) > n*ln(n) + n*lnln(n) + K*n]
    [C > 1 + (lnln(n) + K)/ln(n)]
    input:K
    output:C
        (2, -0.9819410388282122)
        (3, 0.16875488803371386)
        (4, 0.509029480585894)
        (5, 0.6698357090473925)
        (6, 0.7633243473700176)
        (7, 0.824486186011369)
        (10, 0.9247665253296018)

        (14, 0.9860396586207674)
        (15, 0.9959251015500844)
        (16, 1.004514740292947)
        (17, 1.0120526053317724)

        (63, 1.0999698987465072)
        (64, 1.1005035769821574)

        (67, 1.1020139420940982)

        (1705, 1.1343557769261396)
        (1706, 1.1343557787919818)
        (1707, 1.1343557798230859)
        (1707.7381300813104, 1.1343557800497548)
        (1708, 1.1343557800212456)
        (1709, 1.13435577938825)
    ==>>:
    #已知:[[n>=1] -> [PRIMES_S1[n] > (1/4)*n*ln(n)]]
    [[n>=4] -> [PRIMES_S1[n] > (1/2)*n*ln(n)]]
    [[n>=16] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]
        渐近于1，并且比1大
    #bug:[[n>=64] -> [PRIMES_S1[n] > (11/10)*n*ln(n)]]
    #   !! 极限为1 # 1707.738 之后递降

[(27/160) < (1/4)] #useless
xxx:>>> (27/160)
xxx:0.16875
xxx:
xxx:(3, 0.16875488803371386)
xxx:py_adhoc_call   seed.math.continued_fraction.continued_fraction5ND   @list.iter_continued_fraction_digits5ND_  =16875488803371386 =100000000000000000
xxx:[0, 5, 1, 12, 2, 7, 1, 1, 23, 1, 671, 1, 3, 2, 2, 8, 4, 5, 1, 15, 6, 1, 1, 1, 2, 5, 2, 1, 1, 4, 2]
xxx:py_adhoc_call   seed.math.continued_fraction.continued_fraction_fold   ,iter_approximate_fraction_NDs5continued_fraction_  ='[0, 5, 1, 12, 2, 7, 1, 1, 23, 1, 671, 1, 3, 2, 2, 8, 4, 5, 1, 15, 6, 1, 1, 1, 2, 5, 2, 1, 1, 4, 2]'
xxx:(0, 1)
xxx:(1, 5)
xxx:(1, 6)
xxx:(13, 77)
xxx:(27, 160)
xxx:(202, 1197)
xxx:(229, 1357)
xxx:(431, 2554)
xxx:(10142, 60099)
xxx:(10573, 62653)
xxx:(7104625, 42100262)
xxx:(7115198, 42162915)
xxx:(28450219, 168589007)
xxx:(64015636, 379340929)
xxx:(156481491, 927270865)
xxx:(1315867564, 7797507849)
xxx:(5419951747, 32117302261)
xxx:(28415626299, 168384019154)
xxx:(33835578046, 200501321415)
xxx:(535949296989, 3175903840379)
xxx:(3249531359980, 19255924363689)
xxx:(3785480656969, 22431828204068)
xxx:(7035012016949, 41687752567757)
xxx:(10820492673918, 64119580771825)
xxx:(28675997364785, 169926914111407)
xxx:(154200479497843, 913754151328860)
xxx:(337076956360471, 1997435216769127)
xxx:(491277435858314, 2911189368097987)
xxx:(828354392218785, 4908624584867114)
xxx:(3804695004733454, 22545687707566443)
xxx:(8437744401685693, 50000000000000000)

    ]]]'''#'''
    return _reduce_coeff__xxx_(-416/413, ns, to_sub1=to_sub1)
def _reduce_coeff__xxx_(K, ns, /, *, to_sub1=False):
    r'''[[[
    !! [C*n*ln(n) <?> n*ln(n) + n*lnln(n) + K*n]
    [C <?> 1 + (lnln(n) + K)/ln(n)]
    input:K
    output:C

    # :> [x := ln(n)]
    [f(x) =[def]= (ln(x)+K)/x]
    [Df(x) == -(ln(x)+K-1)/x**2]
    [Df(x0) == 0]:
        [0 == -(ln(x0)+K-1)/x0**2]
        [ln(x0) == 1-K]
        [x0 == exp(1-K)]
        [n0 == e**x0 == exp(exp(1-K))]
    [K==-416/413]:
        [n0 == e**x0 == exp(exp(1-K)) == exp(exp(1--416/413))]
    [K==+467/398]:
        [n0 == e**x0 == exp(exp(1-K)) == exp(exp(1-+467/398))]

>>> from math import exp
>>> exp(exp(1--416/413))
1707.7381300813104
>>> exp(exp(1-+467/398))
2.3182883041000326

py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 '=range(1,6)' -using_param6n7022
(2, 2.1640441398569763)
(3, 2.153650541561017)
(4, 2.082022069928488)
(5, 2.024737777553438)
py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__36 '=[2.3182883041000326]' -using_param6n7022
(2.3182883041000326, 2.1893023017969857)

py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__4 '=range(1705,1710)'
(1705, 1.1343557769261396)
(1706, 1.1343557787919818)
(1707, 1.1343557798230859)
(1708, 1.1343557800212456)
(1709, 1.13435577938825)
py_adhoc_call   seed.math.prime_pint.generate_primes   ,_reduce_coeff__4 '=[1707.7381300813104]'
(1707.7381300813104, 1.1343557800497548)

    ]]]'''#'''
    #_reduce_coeff__xxx_
    from math import log as ln
    _01 = -int(bool(to_sub1))
    for n in ns:
        if n >= 2:
            lnN = ln(n)
            lnlnN = ln(lnN)
            # !! [C*n*ln(n) <?> n*ln(n) + n*lnln(n) + K*n]
            # [C <?> 1 + (lnln(n) + K)/ln(n)]
            yield (n, _01+1+ ((lnlnN +K)/lnN))

def _third_coeff4inv_num_primesLE_(n, p=None, /, *, max_denominator=None, to_add1=False):
    r'''[[[
[n>=3]:
    [third_coeff4inv_num_primesLE(n) =[def]= (PRIMES_S1[n]/n -ln(n) -lnln(n))]
[[n>=7022] -> [third_coeff4inv_num_primesLE(n) <= third_coeff4inv_num_primesLE(7022)]] #p=70919

py_adhoc_call   seed.math.prime_pint.generate_primes   @_third_coeff4inv_num_primesLE_ --max_denominator=2**64 =7022 =70919
(7022, 70919, Fraction(-8937680917949958227, 9523926479896484331), -0.9384449719153126)
py_adhoc_call   seed.math.prime_pint.generate_primes   @_third_coeff4inv_num_primesLE_ --max_denominator=2**64 =17 =70919

py_adhoc_call { -lineno }  seed.math.prime_pint.generate_primes   ,64:_third_coeff4inv_num_primesLE_ --max_denominator=None =7022 =70919
0:(7022, 70919)
1:Fraction(-1, 1)
2:Fraction(-15, 16)
3:Fraction(-61, 65)
4:Fraction(-869, 926)
5:Fraction(-20917, 22289)
6:Fraction(-42703, 45504)
7:Fraction(-447947, 477329)
8:Fraction(-1386544, 1477491)
9:Fraction(-7380667, 7864784)
10:Fraction(-8481772927, 9038114307)
11:Fraction(-25452699448, 27122207705)
12:Fraction(-517535761887, 551482268407)
13:Fraction(-542988461335, 578604476112)
14:Fraction(-1060524223222, 1130086744519)
15:Fraction(-3724561131001, 3968864709669)
16:Fraction(-4785085354223, 5098951454188)
17:Fraction(-357820877343503, 381291272319581)
18:Fraction(-720426840041229, 767681496093350)
19:Fraction(-1078247717384732, 1148972768412931)
20:Fraction(-9346408579119085, 9959463643396798)
21:Fraction(-804869385521626042, 857662846100537559)
22:Fraction(-814215794100745127, 867622309743934357)
23:Fraction(-4061732561924606550, 4328152085076274987)
24:Fraction(-8937680917949958227, 9523926479896484331)
25:Fraction(-57687818069624355912, 61471710964455180973)
26:Fraction(-1566508768797807567851, 1669260122520186370602)
27:Fraction(-1624196586867431923763, 1730731833484641551575)
28:Fraction(-3190705355665239491614, 3399991956004827922177)
29:Fraction(-27149839432189347856675, 28930667481523264928991)
30:Fraction(-57490384220043935204964, 61261326919051357780159)
31:Fraction(-84640223652233283061639, 90191994400574622709150)
32:Fraction(-311411055176743784389881, 331837310120775225907609)
33:Fraction(-4755806051303390048909854, 5067751646212203011323285)
34:Fraction(-5067217106480133833299735, 5399588956332978237230894)
35:Fraction(-9823023157783523882209589, 10467340602545181248554179)
36:Fraction(-14890240264263657715509324, 15866929558878159485785073)
37:Fraction(-188505906328947416468321477, 200870495309083095077975055)
38:Fraction(-1334431584566895572993759663, 1421960396722459825031610458)
39:Fraction(-1522937490895842989462081140, 1622830892031542920109585513)
40:Fraction(-13517931511733639488690408783, 14404607532974803185908294562)
41:Fraction(-55594663537830400944223716272, 59241261023930755663742763761)
42:Fraction(-69112595049564040432914125055, 73645868556905558849651058323)
43:Fraction(-193819853636958481810051966382, 206532998137741873363044880407)
44:Fraction(-262932448686522522242966091437, 280178866694647432212695938730)
45:Fraction(-1245549648383048570781916332130, 1327248464916331602213828635327)
46:Fraction(-1508482097069571093024882423567, 1607427331610979034426524574057)
47:Fraction(-8787960133730904035906328449965, 9364385122971226774346451505612)
48:Fraction(-10296442230800475128931210873532, 10971812454582205808772976079669)
49:Fraction(-29380844595331854293768750197029, 31308010032135638391892403664950)
50:Fraction(-98438976016796038010237461464619, 104895842550989120984450187074519)
51:Fraction(-127819820612127892304006211661648, 136203852583124759376342590739469)
52:Fraction(-226258796628923930314243673126267, 241099695134113880360792777813988)
53:Fraction(-354078617241051822618249884787915, 377303547717238639737135368553457)
54:Fraction(-6599673906967856737442741599308737, 7032563554044409395629229411776214)
55:Fraction(-119148208942662473096587598672345181, 126963447520516607761063264780525309)
56:Fraction(-5368269076326779146083884681854841882, 5720387701977291758643476144535415119)
57:Fraction(-5487417285269441619180472280527187063, 5847351149497808366404539409315940428)
58:Fraction(-10855686361596220765264356962382028945, 11567738851475100125048015553851355547)
59:Fraction(-59765849093250545445502257092437331788, 63686045406873308991644617178572718163)
60:Fraction(-130387384548097311656268871147256692521, 138939829665221718108337249910996791873)
61:Fraction(-190153233641347857101771128239694024309, 202625875072095027099981867089569510036)
62:Fraction(-510693851830793025859811127626644741139, 544191579809411772308300984090135811945)
63:Fraction(-700847085472140882961582255866338765448, 746817454881506799408282851179705321981)

    #]]]'''#'''
    #_third_coeff4inv_num_primesLE_
    from fractions import Fraction
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_
    from seed.math.continued_fraction.continued_fraction_ops____using_LazyList import ContinuedFraction
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import iter_continued_fraction_of_irrational_ln_cf_

    #assert n >= 3 #原先是因为简化下面的代码:[ln(n) > 1] <==> [n >= 3]
    assert n >= 2
    cf__lnN = cf_ln_(n)

    if p is None:
        max_p = floor(n*cf__lnN *12249653710600535/10000000000000000) if n >= 17 else 60
        ps = list_primes_le_(max_p)
        p = ps[n-1]
    p
    assert p >= 3
    assert p&1
    n, p
    #######
    # [ln(n) > 1] <==> [n >= 3]
    if n == 2:
        # [n == 2]
        # [ln(n) < 1]
        # [1/ln(n) > 1]
        # [lnln(n) == -ln(1/ln(n)) < 0]
        cf__lnlnN = -ContinuedFraction(iter_continued_fraction_of_irrational_ln_cf_(iter(1/cf__lnN)))
    else:
        # [n >= 3]
        # [ln(n) > 1]
        # [lnln(n) == ln(ln(n)) > 0]
        cf__lnlnN = ContinuedFraction(iter_continued_fraction_of_irrational_ln_cf_(iter(cf__lnN)))
    cf__lnlnN
    #######
    cf__third_coeff = Fraction(p,n) -cf__lnN -cf__lnlnN
    if to_add1:
        cf__third_coeff += 1
    cf__third_coeff
    if max_denominator is None:
        return chain([(n, p)], cf__third_coeff.iter_approximate_fractions_())
    third_coeff = cf__third_coeff.to_Fraction__via_limit_denominator_(max_denominator, case=2)
    return (n, p, third_coeff, float(third_coeff))
    from math import log as ln
    third_coeff = p/n -ln(n) -ln(ln(n))
    return (n, p, third_coeff)

def _main_ratio4inv_num_primesLE_(n, p=None, /, *, max_denominator=None):
    r'''[[[
[n>=2]:
    [main_ratio4inv_num_primesLE(n) =[def]= PRIMES_S1[n]/(n*ln(n))]

[[n>=5] -> [main_ratio4inv_num_primesLE(n) <= main_ratio4inv_num_primesLE(5) ~= 1.3669368560311461]] #p=11
[[n>=17] -> [main_ratio4inv_num_primesLE(n) <= main_ratio4inv_num_primesLE(17) ~= 1.2249653710600534]] #p=59


py_adhoc_call   seed.math.prime_pint.generate_primes   @_main_ratio4inv_num_primesLE_ --max_denominator=2**64 =5
(5, 11, Fraction(21252087752704591874, 15547234430717813615), 1.366936856031146)
py_adhoc_call   seed.math.prime_pint.generate_primes   @_main_ratio4inv_num_primesLE_ --max_denominator=1000 =5
(5, 11, Fraction(149, 109), 1.3669724770642202)

py_adhoc_call   seed.math.prime_pint.generate_primes   @_main_ratio4inv_num_primesLE_ --max_denominator=2**64 =17
(17, 59, Fraction(4546354842071460908, 3711414991378215529), 1.2249653710600534)
py_adhoc_call   seed.math.prime_pint.generate_primes   @_main_ratio4inv_num_primesLE_ --max_denominator=1000 =17
(17, 59, Fraction(893, 729), 1.224965706447188)



py_adhoc_call { -lineno }  seed.math.prime_pint.generate_primes   ,64:_main_ratio4inv_num_primesLE_ --max_denominator=None =5
0:(5, 11)
1:Fraction(1, 1)
2:Fraction(3, 2)
3:Fraction(4, 3)
4:Fraction(11, 8)
5:Fraction(15, 11)
6:Fraction(26, 19)
7:Fraction(41, 30)
8:Fraction(149, 109)
9:Fraction(339, 248)
10:Fraction(3878, 2837)
11:Fraction(8095, 5922)
12:Fraction(20068, 14681)
13:Fraction(68299, 49965)
14:Fraction(88367, 64646)
15:Fraction(245033, 179257)
16:Fraction(823466, 602417)
17:Fraction(4362363, 3191342)
18:Fraction(5185829, 3793759)
19:Fraction(9548192, 6985101)
20:Fraction(91119557, 66659668)
21:Fraction(100667749, 73644769)
22:Fraction(493790553, 361238744)
23:Fraction(69231345169, 50647068929)
24:Fraction(69725135722, 51008307673)
25:Fraction(208681616613, 152663684275)
26:Fraction(278406752335, 203671991948)
27:Fraction(487088368948, 356335676223)
28:Fraction(6610555548659, 4836035782847)
29:Fraction(46760977209561, 34208586156152)
30:Fraction(53371532758220, 39044621938999)
31:Fraction(260247108242441, 190387073912148)
32:Fraction(313618641000661, 229431695851147)
33:Fraction(887484390243763, 649250465614442)
34:Fraction(1201103031244424, 878682161465589)
35:Fraction(2088587421488187, 1527932627080031)
36:Fraction(9555452717197172, 6990412669785713)
37:Fraction(30754945573079703, 22499170636437170)
38:Fraction(71065343863356578, 51988753942660053)
39:Fraction(101820289436436281, 74487924579097223)
40:Fraction(172885633299792859, 126476678521757276)
41:Fraction(274705922736229140, 200964603100854499)
42:Fraction(722297478772251139, 528405884723466274)
43:Fraction(1719300880280731418, 1257776372547787047)
44:Fraction(2441598359052982557, 1786182257271253321)
45:Fraction(18810489393651609317, 13761052173446560294)
46:Fraction(21252087752704591874, 15547234430717813615)
47:Fraction(40062577146356201191, 29308286604164373909)
48:Fraction(61314664899060793065, 44855521034882187524)
49:Fraction(959782550632268097166, 702141102127397186769)
50:Fraction(1980879766163596987397, 1449137725289676561062)
51:Fraction(6902421849123059059357, 5049554277996426869955)
52:Fraction(43395410860901951343539, 31746463393268237780792)
53:Fraction(1135183104232573793991371, 830457602502970609170547)
54:Fraction(2313761619326049539326281, 1692661668399209456121886)
55:Fraction(17331514439514920569275338, 12679089281297436802023749)
56:Fraction(19645276058840970108601619, 14371750949696646258145635)
57:Fraction(685270900440107904261730384, 501318621570983409578975339)
58:Fraction(704916176498948874370332003, 515690372520680055837120974)
59:Fraction(10554097371425392145446378426, 7720983836860504191298668975)
60:Fraction(21813110919349733165263088855, 15957658046241688438434458924)
61:Fraction(32367208290775125310709467281, 23678641883102192629733127899)
62:Fraction(86547527500899983786682023417, 63314941812446073697900714722)
63:Fraction(292009790793475076670755537532, 213623467320440413723435272065)

py_adhoc_call { -lineno }  seed.math.prime_pint.generate_primes   ,64:_main_ratio4inv_num_primesLE_ --max_denominator=None =17
0:(17, 59)
1:Fraction(1, 1)
2:Fraction(5, 4)
3:Fraction(11, 9)
4:Fraction(49, 40)
5:Fraction(844, 689)
6:Fraction(893, 729)
7:Fraction(4416, 3605)
8:Fraction(5309, 4334)
9:Fraction(9725, 7939)
10:Fraction(15034, 12273)
11:Fraction(1242513, 1014325)
12:Fraction(2500060, 2040923)
13:Fraction(486254153, 396953387)
14:Fraction(488754213, 398994310)
15:Fraction(8306321561, 6780862347)
16:Fraction(42020362018, 34303306045)
17:Fraction(134367407615, 109690780482)
18:Fraction(579489992478, 473066427973)
19:Fraction(713857400093, 582757208455)
20:Fraction(4862634393036, 3969609678703)
21:Fraction(326510361733505, 266546605681556)
22:Fraction(331372996126541, 270516215360259)
23:Fraction(267413145239725551, 218302616186050310)
24:Fraction(4546354842071460908, 3711414991378215529)
25:Fraction(4813767987311186459, 3929717607564265839)
26:Fraction(43056498740560952580, 35149155851892342241)
27:Fraction(47870266727872139039, 39078873459456608080)
28:Fraction(138797032196305230658, 113306902770805558401)
29:Fraction(2407419814065061060225, 1965296220563151100897)
30:Fraction(7361056474391488411333, 6009195564460258861092)
31:Fraction(24490589237239526294224, 19992882913943927684173)
32:Fraction(80832824186110067294005, 65987844306292041913611)
33:Fraction(186156237609459660882234, 151968571526528011511395)
34:Fraction(825457774623948710822941, 673862130412404087959191)
35:Fraction(1011614012233408371705175, 825830701938932099470586)
36:Fraction(1837071786857357082528116, 1499692832351336187429777)
37:Fraction(6522829372805479619289523, 5324909198992940661759917)
38:Fraction(14882730532468316321107162, 12149511230337217510949611)
39:Fraction(36288290437742112261503847, 29623931659667375683659139)
40:Fraction(87459311407952540844114856, 71397374549671968878267889)
41:Fraction(123747601845694653105618703, 101021306209339344561927028)
42:Fraction(582449718790731153266589668, 475482599387029347125976001)
43:Fraction(1288647039427156959638798039, 1051986504983398038813879030)
44:Fraction(1871096758217888112905387707, 1527469104370427385939855031)
45:Fraction(3159743797645045072544185746, 2579455609353825424753734061)
46:Fraction(30308790937023293765803059421, 24742569588554856208723461580)
47:Fraction(33468534734668338838347245167, 27322025197908681633477195641)
48:Fraction(331525603549038343310928265924, 270640796369732990910018222349)
49:Fraction(1359570948930821712082060308863, 1109885210676840645273550085037)
50:Fraction(1691096552479860055392988574787, 1380526007046573636183568307386)
51:Fraction(11506150263809982044439991757585, 9393041252956282462374959929353)
52:Fraction(82234148399149734366472930877882, 67131814777740550872808287812857)
53:Fraction(3547574531427248559802776019506511, 2896061076695799969993131335882204)
54:Fraction(7177383211253646853972024969890904, 5859253968169340490859070959577265)
55:Fraction(53789257010202776537606950808742839, 43910838853881183406006628052923059)
56:Fraction(276123668262267529542006779013605099, 225413448237575257520892211224192560)
57:Fraction(882160261797005365163627287849558136, 720151183566606955968683261725500739)
58:Fraction(2040444191856278259869261354712721371, 1665715815370789169458258734675194038)
59:Fraction(4963048645509561884902149997275000878, 4051582814308185294885200731075888815)
60:Fraction(16929590128384963914575711346537724005, 13820464258295345054113860927902860483)
61:Fraction(21892638773894525799477861343812724883, 17872047072603530348999061658978749298)
62:Fraction(104500145223963067112487156721788623537, 85308652548709466450110107563817857675)
63:Fraction(4201898447732417210298964130215357666363, 3430218149020982188353403364211693056298)

    #]]]'''#'''
    from fractions import Fraction
    from seed.math.continued_fraction.iter_continued_fraction_of_log__truncated_ import cf_ln_

    assert n >= 2
    cf__lnN = cf_ln_(n)

    if p is None:
        max_p = floor(n*cf__lnN *12249653710600535/10000000000000000) if n >= 17 else 60
        ps = list_primes_le_(max_p)
        p = ps[n-1]
    p
    assert p >= 3
    assert p&1
    n, p
    cf__main_ratio = Fraction(p,n)/cf__lnN
    if max_denominator is None:
        return chain([(n, p)], cf__main_ratio.iter_approximate_fractions_())
    main_ratio = cf__main_ratio.to_Fraction__via_limit_denominator_(max_denominator, case=2)
    return (n, p, main_ratio, float(main_ratio))
    from math import log as ln
    main_ratio = p/n/ln(n)
    return (n, p, main_ratio)
def _iter_third_coeffs_(max_p, /):
    r'''[[[
    [third_coeff(n) =[def]= PRIMES_S1[n]/n -ln(n) -lnln(n)]

    known:
        [[n>=7022] -> [third_coeff4inv_num_primesLE(n) <= third_coeff4inv_num_primesLE(7022)]] #p=70919 # ~= -0.9384449719153132 < (-8937680917949958227/9523926479896484331) ~= -0.9384449719153126 < -0.9384449244060475


py_adhoc_call  seed.math.prime_pint.generate_primes   ,_iter_third_coeffs_ =200
(2, 3, 1.173365740021719)
(3, 5, 0.47400655038185785)
(4, 7, 0.03707137890182849)
(5, 11, 0.11467709223878936)
(6, 13, -0.20829088334404766)
(7, 17, -0.18306853106216125)
(8, 19, -0.436540909766281)
(9, 23, -0.42886402995730866)
(10, 29, -0.23661753824200193)
(11, 31, -0.4543048375402413)
(12, 37, -0.3118084098199928)
(13, 41, -0.35304193836349407)
(14, 43, -0.5380505394640517)
(15, 47, -0.5709457607202716)
(16, 53, -0.4798701627780073)
(17, 59, -0.404036633536879)
(18, 61, -0.562867998808952)
(19, 67, -0.4980414892148384)
(20, 71, -0.5429209739189398)
(21, 73, -0.681676015492932)
(22, 79, -0.6286417600109744)
(23, 83, -0.6695853700500085)
(24, 89, -0.6259895034211598)
(25, 97, -0.5079080007552566)
(26, 101, -0.5546242942155544)
(27, 103, -0.673682167474323)
(28, 107, -0.714410038771303)
(29, 109, -0.8227851382444795)
(30, 113, -0.8586582556970308)
(31, 127, -0.570935047279634)
(32, 131, -0.6149108946521626)
(33, 137, -0.5967570406923508)
(34, 139, -0.6983915567277528)
(35, 149, -0.566658170401084)
(36, 151, -0.6654197553542698)
(37, 157, -0.651636678855311)
(38, 163, -0.6394327942556666)
(39, 167, -0.6799461656679913)
(40, 173, -0.6692021950771727)
(41, 179, -0.6597126427861251)
(42, 181, -0.7466081292648876)
(43, 191, -0.6440777367578152)
(44, 193, -0.7286577621604029)
(45, 197, -0.765637530293459)
(46, 199, -0.8450644534642395)


    #]]]'''#'''

    from math import log as ln
    ps = list_primes_le_(max_p)
    for n, p in enumerate(ps, 1):
        if n > 1:
            lnN = ln(n)
            lnlnN = ln(lnN)
            third_coeff = p/n -lnN -lnlnN
            yield (n, p, third_coeff)



def _iter_main_ratios_(max_p, max_n=None, /):
    r'''[[[
    [main_ratio(n) =[def]= PRIMES_S1[n]/n*ln(n)]

    known:
        [[n>=1] -> [1/4*n*ln(n) < PRIMES_S1[n] < 36*n*ln(n)]]

    _reduce_coeff__4 =>:
        [[n>=16] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]
        _iter_main_ratios_ =>:
            [[n>=2] -> [PRIMES_S1[n] > (1/1)*n*ln(n)]]

py_adhoc_call  seed.math.prime_pint.generate_primes   ,_iter_main_ratios_ =200
(2, 3, 2.1640425613334453)
(3, 5, 1.5170653777113956)
(4, 7, 1.2623581607778431)
(5, 11, 1.3669368560311461)
(6, 13, 1.2092396908610357)
(7, 17, 1.2480388314693944)
(8, 19, 1.1421335740370961)
(9, 23, 1.163083456245403)
(10, 29, 1.25945399751943)
(11, 31, 1.1752731031046941)
(12, 37, 1.2408246135106877)
(13, 41, 1.2295939273309602)
(14, 43, 1.1638354866191358)
(15, 47, 1.1570440356157459)
(16, 53, 1.194731830736173)
(17, 59, 1.2249653710600534)
(18, 61, 1.1724750906629338)
(19, 67, 1.1976189061564355)
(20, 71, 1.185019112468436)
(21, 73, 1.141785139474892)
(22, 79, 1.161714581761142)
(23, 83, 1.1509176556093688)
(24, 89, 1.1668566774802964)
(25, 97, 1.2053897730456469)
(26, 101, 1.1922959738247545)
(27, 103, 1.157464695587213)
(28, 107, 1.1468169374837216)
(29, 109, 1.1162133888516323)
(30, 113, 1.107453124295276)
(31, 127, 1.1930079961269429)
(32, 131, 1.1812065647278387)
(33, 137, 1.1873319529656479)
(34, 139, 1.1593355998569217)
(35, 149, 1.1973913055813292)
(36, 151, 1.1704820084616436)
(37, 157, 1.1751148450051516)
(38, 163, 1.1792088203164857)
(39, 167, 1.168821954060753)
(40, 173, 1.1724427576988576)
(41, 179, 1.1756480230128292)
(42, 181, 1.1529975224249707)
(43, 191, 1.180968927067366)
(44, 193, 1.1591289181303177)
(45, 197, 1.1500304504384673)
(46, 199, 1.1299274360061005)
    #]]]'''#'''
    #_iter_main_ratios_

    from math import log as ln
    if max_n is None:
        max_n = max_p
    ps = list_primes_le_(max_p)
    for n, p in enumerate(ps, 1):
        if n > max_n:break
        if n > 1:
            main_ratio = p/n/ln(n)
            yield (n, p, main_ratio)


def _collect_suffix_extremums(prev_extremum_key, xs, /, *, key, reverse):
    return _collect_prefix_extremums(prev_extremum_key, reversed(xs), key=key, reverse=reverse)
def _collect_prefix_extremums(prev_extremum_key, xs, /, *, key, reverse):
    from operator import __le__, __ge__
    le_ = __le__ if not reverse else __ge__
    k_ = prev_extremum_key
    for x in xs:
        k = key(x)
        if le_(k_, k):
            k_ = k
            yield x

def _third_coeff_n7022__refine(*, max_denominators=None, to_add1=False):
    # to refine: [[n>=7022] -> [third_coeff4inv_num_primesLE(n) <= third_coeff4inv_num_primesLE(7022)]] #p=70919 # ~= -0.9384449719153132 < (-8937680917949958227/9523926479896484331) ~= -0.9384449719153126 < -0.9384449244060475
    nT, pT, max_ge_nT = 7022, 70919, -0.9384449719153126
    nT, pT, max_ge_nT = 7022+1, 70919+1, -0.9384449719153126-1
    ts = [*_iter_third_coeffs_(max_p:=pT)]
    ls = _collect_suffix_extremums(max_ge_nT, ts, key=lambda t:t[-1], reverse=False)
    if to_add1:
        ls = [(n, p, third_coeff+1) for (n, p, third_coeff) in ls]
    ls
    if max_denominators is None:
        return ls
        #yield from ls #yield => +to_show_timedelta
    def f(t, /):
        (n, p, third_coeff) = t
        rs = []
        if n >= 3:
          for max_denominator in max_denominators:
            (_n, _p, fr, fl) = _third_coeff4inv_num_primesLE_(n, p, max_denominator=max_denominator, to_add1=to_add1)
            rs.append((fr,fl))
        rs
        return (n, p, third_coeff, rs)
    ls2 = [*map(f, ls)]
    return ls2



def _reduce_coeff__36__refine(max_n, /, *, force_max_ge_nT=None, using_param6n7022:bool):
    #_reduce_coeff__36:goto
    # to refine:[[n>=364] -> [PRIMES_S1[n] < (3/2)*n*ln(n)]]

    [(max1_n, max_ge_nT)] = _reduce_coeff__36([max_n+1], using_param6n7022=using_param6n7022)
        # max_ge_nT :=> [coeff{n>=max_n+1} <= max_ge_nT]
    assert max1_n == max_n+1
    #ts = [*_iter_main_ratios_(max1_n)]
        # bug:using max1_n as max1_p here
    ge_max1_p = estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(max1_n, using_param6n7022=True)
    #ts = [*_iter_main_ratios_(max1_p)]
    ts = [*_iter_main_ratios_(ge_max1_p, max1_n)]
    if not force_max_ge_nT is None:
        max_ge_nT = min(max_ge_nT, force_max_ge_nT)
    ls = _collect_suffix_extremums(max_ge_nT, ts, key=lambda t:t[-1], reverse=False)
    #return ls
    #yield (max1_n, max1_p, max_ge_nT)
    if 0b0001:yield ('last:', ts[-1], ge_max1_p)
        # debug:
    yield from ls #yield => +to_show_timedelta


def list_primes__len_ge_(min_sz, T=None, BitList=None, /):
    min_sz = ceil(min_sz)
    if min_sz < 1:
        ge_Pk = 0
    else:
        # [min_sz >= 1]
        n = min_sz
        k = n-1
        ge_Pk = estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(k, using_best_param_known=True)
    ge_Pk
    return list_primes_le_(ge_Pk, T, BitList)



__all__
from seed.math.prime_pint.generate_primes import list_primes__len_ge_
from seed.math.prime_pint.generate_primes import estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_ #estimate_upper_bound4Kth_prime__formula1__using_467over398_
#def estimate_upper_bound4Kth_prime__formula1__using_467over398__inexact_float_(k, /, *, using_param6n7022=False, using_best_param_known=False, _with_param=False):


from seed.math.prime_pint.generate_primes import list_primes_le_, list_primes_lt_
from seed.math.prime_pint.generate_primes import sieve_primes_le_, sieve_primes_lt_
from seed.math.prime_pint.generate_primes import *

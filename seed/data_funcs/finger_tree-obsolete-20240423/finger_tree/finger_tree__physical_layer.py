#__all__:goto
r'''[[[
e ../../python3_src/seed/data_funcs/finger_tree/finger_tree__physical_layer.py


seed.data_funcs.finger_tree.finger_tree__physical_layer
py -m nn_ns.app.debug_cmd   seed.data_funcs.finger_tree.finger_tree__physical_layer -x
py -m nn_ns.app.doctest_cmd seed.data_funcs.finger_tree.finger_tree__physical_layer:__doc__
py -m nn_ns.app.doctest_cmd seed.data_funcs.finger_tree.finger_tree__physical_layer:__doc__  -ff -v --ndiff
py_adhoc_call   seed.data_funcs.finger_tree.finger_tree__physical_layer   @f
py_adhoc_call  seed.helper.print_methods  @wrapped_print_methods   %seed.data_funcs.finger_tree.finger_tree__physical_layer:XXX@T    =T      ++exclude_prefixes:_       +exclude_attrs5listed_in_cls_doc
#]]]'''
__all__ = r'''
魖属性界面
魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型
    魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型囗囗囗囗固化方法
'''.split()#'''
__all__
from seed.abc.abc__ver1 import abstractmethod, override, ABC, ABC__no_slots









######################
__all__
class 魖属性界面(ABC):
    __slots__ = ()
    ######################
    #属性界面
    @abstractmethod
    def 取囗缓存度量囗公开属性囗索引列表囗(sf, /):
        '-> [索引] #用于 访问/解读 缓存度量 #see:分裂囗囗搜索定位囗'
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗公开属性囗(sf, 缓存度量, 索引, /):
        '缓存度量 -> 索引 -> 属性值<索引>'
    @abstractmethod
    def 取囗缓存度量囗公开属性囗加法零元囗(sf, 索引, /):
        '索引 -> 加法零元<索引>'
    ######################
    ######################











######################
__all__
#class 魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型(ABC):
    #底层接口冖冖某某某
#class 魖双侧展翅树囗数据类型配置囗囗显式参数打包式囗囗面向组合式接口编程(ABC):
    #外参接口冖冖某某某(..., 参数配置=???)
#class 魖双侧展翅树囗数据类型配置囗囗隐式参数囗囗面向树子类设计者囗囗节点版(ABC):
    #内参接口冖冖某某某<参数配置>(...)
    #元素版内参接口冖冖某某某
#class 魖双侧展翅树囗相关操作囗囗面向树实例终端用户囗囗元素版(ABC):
    #某某某#元素版
#
class 魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型(ABC):
    __slots__ = ()

    ######################
    #树基础数据类型界面
    @abstractmethod
    def 底层接口冖冖构造囗元素封包节点囗(sf, 元素, /):
        '-> 元素封包节点/节点<0>/封包<元素> #用于 缓存 度量，否则 无需 封包'
    @abstractmethod
    def 底层接口冖冖构造囗更深节点囗(sf, 节点序列, /, *, 左起丷右起, 更深节点最小许可长度, 更深节点最大许可长度, 深度):
        '-> 节点<深度+1>/更深节点<深度> #可能需要 缓存 度量'
    @abstractmethod
    def 底层接口冖冖构造囗光杆树囗(sf, 节点序列, /, *, 左起丷右起, 光杆树最大许可长度, 深度):
        '-> 光杆树<深度> #可能需要 缓存 度量'
        #光杆树:封顶双侧栈<光杆树最大许可长度>
    @abstractmethod
    def 底层接口冖冖构造囗翅膀囗囗绝对定位囗(sf, 节点序列, /, *, 左起丷右起, 左翼丷右翼, 翅膀最大许可长度, 翅膀最小许可长度, 深度):
        '节点序列<左起丷右起,深度> -> 翅膀<左翼丷右翼,深度> #区分左右:栈开口方向不同！#可能需要 缓存 度量'
        #翅膀:封顶单侧保底栈<左起丷右起,翅膀最大许可长度,翅膀最小许可长度>
    @abstractmethod
    def 底层接口冖冖构造囗根深树囗囗绝对定位囗(sf, 左翼, 更深树, 右翼, /, *, 深度):
        '-> 根深树<深度> #可能需要 缓存 度量'
    #元素封包节点<>
    #更深节点<深度, 更深节点最小许可长度, 更深节点最大许可长度>
    #翅膀<深度, 左翼丷右翼; 翅膀最小许可长度, 翅膀最大许可长度;参数纟节点>
    #光杆树<深度, 光杆树最大许可长度;参数纟节点>
    #根深树<深度;特色参数纟光杆树,特色参数纟翅膀;参数纟节点>
    #双侧展翅树<深度;特色参数纟光杆树,特色参数纟翅膀;参数纟节点>
    # [特色参数纟光杆树:=光杆树最大许可长度]
    # [特色参数纟翅膀:=翅膀最小许可长度, 翅膀最大许可长度]
    # [参数纟节点:=更深节点最小许可长度, 更深节点最大许可长度]
    # [参数纟双侧展翅树:=(特色参数纟光杆树,特色参数纟翅膀;参数纟节点)]
    #


    @abstractmethod
    def 底层接口冖冖拆包囗元素封包节点囗(sf, 元素封包节点, /):
        '-> 元素'
    @abstractmethod
    def 底层接口冖冖拆包囗根深树囗囗绝对定位囗(sf, 根深树, /, *, 深度):
        '-> (左翼, 更深树, 右翼)'

    @abstractmethod
    def 底层接口冖冖区分树形态囗(sf, 双侧展翅树, /, *, 深度):
        '-> 光杆树丷根深树/bool'
    @abstractmethod
    def 底层接口冖冖是空树囗囗光杆树囗(sf, 光杆树, /, *, 深度):
        '-> bool'

    @abstractmethod
    def 底层接口冖冖迭代囗子节点囗囗光杆树囗(sf, 光杆树, /, *, 左起丷右起, 深度):
        '-> Iter 节点<深度>'
    @abstractmethod
    def 底层接口冖冖迭代囗子节点囗囗翅膀囗囗绝对定位囗(sf, 左翼丨右翼, /, *, 左起丷右起, 左翼丷右翼, 深度):
        '-> Iter 节点<深度>'
    @abstractmethod
    def 底层接口冖冖迭代囗子节点囗囗更深节点囗(sf, 更深节点, /, *, 左起丷右起, 深度):
        '更深节点<深度> -> Iter 节点<深度>'


    @abstractmethod
    def 底层接口冖冖取囗长度囗囗光杆树囗(sf, 光杆树, /, *, 深度):
        '-> 长度'
    @abstractmethod
    def 底层接口冖冖取囗长度囗囗翅膀囗囗绝对定位囗(sf, 左翼丨右翼, /, *, 左翼丷右翼, 深度):
        '-> 长度'
    @abstractmethod
    def 底层接口冖冖取囗长度囗囗更深节点囗(sf, 更深节点, /, *, 深度):
        '-> 长度'

    ######################
    ######################
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗囗元素封包节点囗(sf, 元素封包节点, /):
        '-> 缓存度量'
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗囗更深节点囗(sf, 更深节点, /, *, 深度):
        '-> 缓存度量'
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗囗光杆树囗(sf, 光杆树, /, *, 深度):
        '-> 缓存度量'
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗囗翅膀囗囗绝对定位囗(sf, 左翼丨右翼, /, *, 左翼丷右翼, 深度):
        '-> 缓存度量'
    @abstractmethod
    def 底层接口冖冖取囗缓存度量囗囗根深树囗(sf, 根深树, /, *, 深度):
        '-> 缓存度量'

    ######################
    #构造
    底层接口冖冖构造囗元素封包节点囗
    底层接口冖冖构造囗更深节点囗
    底层接口冖冖构造囗光杆树囗
    底层接口冖冖构造囗翅膀囗囗绝对定位囗
        #构造囗翅膀囗囗相对定位囗
    底层接口冖冖构造囗根深树囗囗绝对定位囗
        #构造囗根深树囗囗相对定位囗
    ######################
    #元素封包节点,根深树:定长:拆包
    底层接口冖冖拆包囗元素封包节点囗
    底层接口冖冖拆包囗根深树囗囗绝对定位囗
        #拆包囗根深树囗囗相对定位囗
    ######################
    #更深节点,光杆树,翅膀:变长:迭代:取囗长度
    底层接口冖冖迭代囗子节点囗囗更深节点囗
    底层接口冖冖迭代囗子节点囗囗光杆树囗
    底层接口冖冖迭代囗子节点囗囗翅膀囗囗绝对定位囗
        #迭代囗子节点囗囗翅膀囗囗相对定位囗
    #
    ######################
    底层接口冖冖取囗长度囗囗更深节点囗
    底层接口冖冖取囗长度囗囗光杆树囗
    底层接口冖冖取囗长度囗囗翅膀囗囗绝对定位囗
        #取囗长度囗囗翅膀囗囗相对定位囗
    ######################
    ######################
    ######################
    ######################


class 魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型囗囗囗囗固化方法(魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型):
    __slots__ = ()
    #new
    #固化方法:分流:节点形态
    def 底层接口冖冖取囗缓存度量囗囗节点囗(sf, 节点, /, *, 深度):
        '-> 缓存度量'
        if 深度 > 0:
            # 节点<深度>
            # 更深节点<深度-1>
            更深节点 = 节点
            缓存度量 = sf.底层接口冖冖取囗缓存度量囗囗更深节点囗(更深节点, 深度=深度-1)
        elif 深度 == 0:
            # 节点<0>
            # 元素封包节点
            元素封包节点 = 节点
            缓存度量 = sf.底层接口冖冖取囗缓存度量囗囗元素封包节点囗(元素封包节点)
        else:
            raise 000
        return 缓存度量
    #固化方法:分流:树形态
    def 底层接口冖冖取囗缓存度量囗囗双侧展翅树囗(sf, 双侧展翅树, /, *, 深度):
        '-> 缓存度量'
        f = sf.底层接口冖冖取囗缓存度量囗囗根深树囗 if sf.底层接口冖冖区分树形态囗(双侧展翅树, 深度=深度) else sf.底层接口冖冖取囗缓存度量囗囗光杆树囗
        return f(双侧展翅树, 深度=深度)


__all__

from seed.data_funcs.finger_tree.finger_tree__physical_layer import 魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型囗囗囗囗固化方法
from seed.data_funcs.finger_tree.finger_tree__physical_layer import 魖双侧展翅树囗数据类型配置囗囗显式参数列举式囗囗面向适配底层数据类型, 魖属性界面
from seed.data_funcs.finger_tree.finger_tree__physical_layer import *

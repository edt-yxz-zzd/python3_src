#__all__:goto
r'''[[[
e ../../python3_src/seed/data_funcs/finger_tree__search.py


seed.data_funcs.finger_tree__search
py -m nn_ns.app.debug_cmd   seed.data_funcs.finger_tree__search -x
py -m nn_ns.app.doctest_cmd seed.data_funcs.finger_tree__search:__doc__ -ht
py_adhoc_call   seed.data_funcs.finger_tree__search   @f

[[
重点:大部件+扁索引
    而非 节点{深度;}+路径
部件:数量足够少:以便应用默认搜索方法:枚举搜索
]]

[[
命名规范:
标识名后缀约束声明:
    * 分号之前:虚拟成员:
        展翅树{深度;}
        节点序列{深度,左起丷右起;}
    * 分号之后:真实成员:
        翅膀{深度;左翼丷右翼}

]]


#]]]'''
__all__ = r'''
错误牜展翅树相关
    错误牜欤已知非超前进
筐搜索定位况型
    匡超后退
    匡超前进
    匡扁索引纟部件
    匡路径纟节点
    匡路径全纟元素
筐部件类别牜搜索定位
    匡部件即节点
    匡部件即节点容器
    匡部件即更深节点容器

魖含冫度量值
魖部件容器
    魖部件容器牜搜索定位
魖节点容器
    魖节点容器牜节点数
    魖节点容器牜搜索定位
    魖部件容器暨节点容器
        魖部件容器暨节点容器牜搜索定位
        魖部件容器牜搜索定位爫部件即节点

魖路径全纟节点间隙
    乸路径全纟节点间隙
魖路径全纟元素间隙
    乸路径全纟元素间隙
    魖路径全纟元素
        乸路径全纟元素

魖路径纟节点
    魖路径纟节点牜部件容器暨节点容器
        魖路径纟节点乊匡部件即节点
        魖路径纟节点乊匡部件即节点容器
        魖路径纟节点乊匡部件即更深节点容器
            乸路径纟节点乊匡部件即节点
            乸路径纟节点乊匡部件即节点容器
            乸路径纟节点乊匡部件即更深节点容器

'''.split()#'''
__all__
from seed.tiny_.check import check_type_is
from seed.abc.abc__ver1 import abstractmethod, override, ABC, ABC__no_slots
from seed.helper.repr_input import repr_helper
from enum import Enum, auto

def _repr_(sf, /):
    return repr_helper(sf, *sf)


class 筐搜索定位况型(Enum):
    匡超后退 = auto()
    匡超前进 = auto()
    匡扁索引纟部件 = auto()
    匡路径纟节点 = auto()
    匡路径全纟元素 = auto()
class 筐部件类别牜搜索定位(Enum):
    匡部件即节点 = auto()
    匡部件即节点容器 = auto()
    匡部件即更深节点容器 = auto()
if 1:
    __ = 筐搜索定位况型
    匡超后退 = __.匡超后退
    匡超前进 = __.匡超前进
    匡扁索引纟部件 = __.匡扁索引纟部件
    匡路径纟节点 = __.匡路径纟节点
    匡路径全纟元素 = __.匡路径全纟元素
if 1:
    __ = 筐部件类别牜搜索定位
    匡部件即节点 = __.匡部件即节点
    匡部件即节点容器 = __.匡部件即节点容器
    匡部件即更深节点容器 = __.匡部件即更深节点容器

from seed.data_funcs.finger_tree__errors import 错误牜展翅树相关,错误牜欤已知非超前进

class 魖含冫度量值(ABC):
    __slots__ = ()
    @property
    @abstractmethod
    def 度量值(sf, /):
        '-> 度量值'
        '-> 总度量值/度量值纟容器'


class 魖部件容器(ABC):
    '扁平容器<部件> ==>> 部件数'
    __slots__ = ()
    @property
    @abstractmethod
    def 部件数(sf, /):
        '-> uint'
    @abstractmethod
    def 枚举冫部件扌(sf, /, *, 左起丷右起):
        '部件容器 -> Iter 部件'

    @abstractmethod
    def 测距冫部件乊起端扌(sf, 扁索引纟部件, /, *, 左起丷右起):
        '扁索引纟部件{左起丷右起;} -> 部件到容器起端的距离/焦点与容器起端相隔部件数{0=>焦点是起端端点}/uint#部件数=>反向'

class 魖节点容器(ABC):
    '未知:节点数'
    __slots__ = ()
    @abstractmethod
    def 枚举冫节点扌(sf, /, *, 左起丷右起):
        '节点容器{深度;} -> 节点序列{深度,左起丷右起;}/Iter 节点{深度;}'
class 魖节点容器牜节点数(魖节点容器):
    '扁平容器<节点> ==>> 节点数'
    __slots__ = ()
    @property
    @abstractmethod
    def 节点数(sf, /):
        '-> uint'

    @abstractmethod
    def 测距冫节点乊起端扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> 节点到容器起端的距离/焦点与容器起端相隔节点数{0=>焦点是起端端点}/uint#节点数=>反向'






class 魖节点容器牜搜索定位(魖节点容器,魖含冫度量值):
    '节点{深度;}+路径纟节点匕容器/路径乚容器#节点容器{深度;}#注意:『区别:魖部件容器牜搜索定位vs魖节点容器牜搜索定位』'
    __slots__ = ()
    @abstractmethod
    def 取冫节点巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> 节点{深度;}'
    @abstractmethod
    def 取冫节点丶度量值巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> (节点{深度;}, 度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'

    魖含冫度量值.度量值
        #用于:[not:欤已知非超前进]
        #注意:[不一定:[节点::魖含冫度量值]]
        #   比如:魖元素容器爫展翅树.搜索定位冫元素扌--> (度量值纟元素,元素)
    @abstractmethod
    def 枚举冫路径丶节点丶度量值扌(sf, /, *, 左起丷右起):
        '-> Iter (路径纟节点{左起丷右起;},节点,度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'
    @abstractmethod
    def 搜索定位冫节点扌(sf, 初始累计值, 累积扌, 进退判定扌, /, *, 左起丷右起, 欤已知非超后退, 欤已知非超前进):
        r'''[[[
        -> (筐搜索定位况型, x)
        | -> (匡超后退,初始累计值)
        | -> (匡超前进,终末累计值)
        | -> (匡路径纟节点, (累计值牜前进, 路径纟节点{深度,左起丷右起;},焦点节点{深度;},度量值纟节点, 累计值牜后退))
        | ^错误牜欤已知非超前进
        ######################
        初始累计值 :: 累计值
        累积扌 :: 累计值 -> 度量值纟部件 -> 累计值
        进退判定扌 :: 累计值 -> 后退丷前进
        ######################
        # [不一定:[节点::魖含冫度量值]]
        ######################
        #]]]'''#'''
class 魖部件容器牜搜索定位(魖部件容器,魖含冫度量值):
    '部件+扁索引纟部件#注意:『区别:魖部件容器牜搜索定位vs魖节点容器牜搜索定位』'
    __slots__ = ()

    @abstractmethod
    def 取冫部件巛扁索引扌(sf, 扁索引纟部件, /, *, 左起丷右起):
        '扁索引纟部件{左起丷右起;} -> 部件'
    @abstractmethod
    def 取冫部件丶度量值巛扁索引扌(sf, 扁索引纟部件, /, *, 左起丷右起):
        '扁索引纟部件{左起丷右起;} -> (部件,度量值纟部件)#注意:[不一定:[部件::魖含冫度量值]]'


    魖含冫度量值.度量值
        #用于:[not:欤已知非超前进]
        #注意:[不一定:[部件::魖含冫度量值]]
    @abstractmethod
    def 枚举冫扁索引丶部件丶度量值扌(sf, /, *, 左起丷右起):
        '-> Iter (扁索引纟部件{左起丷右起;},部件,度量值纟部件)#注意:[不一定:[部件::魖含冫度量值]]'
    #@abstractmethod
    def 搜索定位冫部件扌(sf, 初始累计值, 累积扌, 进退判定扌, /, *, 左起丷右起, 欤已知非超后退, 欤已知非超前进):
        r'''[[[
        -> (筐搜索定位况型, x)
        | -> (匡超后退,初始累计值)
        | -> (匡超前进,终末累计值)
        | -> (匡扁索引纟部件, (累计值牜前进, 扁索引纟部件{左起丷右起;},焦点部件,度量值纟部件, 累计值牜后退))
        | ^错误牜欤已知非超前进
        ######################
        初始累计值 :: 累计值
        累积扌 :: 累计值 -> 度量值纟部件 -> 累计值
        进退判定扌 :: 累计值 -> 后退丷前进
        ######################
        # [不一定:[部件::魖含冫度量值]]
        ######################
        #]]]'''#'''
        if not 欤已知非超后退:
            后退丷前进 = 进退判定扌(初始累计值)
            if not 后退丷前进:
                #后退=>超后退
                return (匡超后退,初始累计值)
            欤已知非超后退 = True
        if not 欤已知非超前进:
            终末累计值 = 累积扌(初始累计值, sf.度量值)
            后退丷前进 = 进退判定扌(终末累计值)
            if 后退丷前进:
                #前进=>超前进
                return (匡超前进,终末累计值)
            欤已知非超前进 = True
        assert 欤已知非超后退
        assert 欤已知非超前进
        it = sf.枚举冫扁索引丶部件丶度量值扌(左起丷右起=左起丷右起)
        累计值牜前进 = 初始累计值
            # !! [欤已知非超后退]
        for (扁索引纟部件,部件,度量值纟部件) in it:
            累计值 = 累积扌(累计值牜前进, 度量值纟部件)
            后退丷前进 = 进退判定扌(累计值)
            if not 后退丷前进:
                #后退
                累计值牜后退 = 累计值
                break
            累计值牜前进 = 累计值
        else:
            #超前进
            终末累计值 = 累计值牜前进
            raise 错误牜欤已知非超前进(匡超前进,终末累计值)
        累计值牜前进
        (扁索引纟部件,焦点部件:=部件,度量值纟部件)
        累计值牜后退
        return (匡扁索引纟部件, (累计值牜前进, 扁索引纟部件,焦点部件,度量值纟部件, 累计值牜后退))
#end-class 魖部件容器牜搜索定位(魖部件容器):





class 魖路径纟节点(ABC):
    '路径纟节点{左起丷右起;}  #[可能作为子路径而存在==>>不含:左起丷右起]'
    __slots__ = ()

class 魖路径全纟节点间隙(ABC):
    '路径全纟节点间隙{;左起丷右起} == (左起丷右起, (路径纟节点|讫间隙纟容器))'
    __slots__ = ()
    @property
    @abstractmethod
    def 左起丷右起(sf, /):
        '-> bool'
    @property
    @abstractmethod
    def 鬽路径纟节点(sf, /):
        '-> 鬽 路径纟节点{左起丷右起;}'


class 魖路径全纟元素间隙(ABC):
    '[xpath == 路径全纟元素间隙 == (左起丷右起,鬽路径纟节点)]'
    __slots__ = ()
    @property
    @abstractmethod
    def 左起丷右起(sf, /):
        '-> bool'
    @property
    @abstractmethod
    def 鬽路径纟节点(sf, /):
        '-> 鬽 魖路径纟节点'
class 魖路径全纟元素(魖路径全纟元素间隙):
    '[path == 路径全纟元素 == (左起丷右起,路径纟节点)]'
    __slots__ = ()
    @property
    @abstractmethod
    def 路径纟节点(sf, /):
        '-> 魖路径纟节点'
    @property
    @override
    def 鬽路径纟节点(sf, /):
        '-> 鬽 魖路径纟节点'
        return sf.路径纟节点






class _魖路径全纟某某某爫元组(tuple):
    __slots__ = ()
    __repr__ = _repr_
    def __new__(cls, 左起丷右起,鬽路径纟节点, /):
        check_type_is(bool, 左起丷右起)
        sf = tuple.__new__(cls, [左起丷右起,鬽路径纟节点])
        return sf
    @property
    @override
    def 左起丷右起(sf, /):
        '-> bool'
        return sf[0]
    @property
    @override
    def 鬽路径纟节点(sf, /):
        '-> 鬽 路径纟节点{左起丷右起;}'
        return sf[1]
class 乸路径全纟节点间隙(_魖路径全纟某某某爫元组, 魖路径全纟节点间隙):
    __slots__ = ()
class 乸路径全纟元素间隙(_魖路径全纟某某某爫元组, 魖路径全纟元素间隙):
    __slots__ = ()
class 乸路径全纟元素(乸路径全纟元素间隙, 魖路径全纟元素):
    __slots__ = ()
    def __new__(cls, 左起丷右起,路径纟节点, /):
        check_type_is(bool, 左起丷右起)
        if 路径纟节点 is None:raise TypeError
        return super(__class__, cls).__new__(cls, 左起丷右起,路径纟节点)
    @property
    @override
    def 路径纟节点(sf, /):
        '-> 路径纟节点{左起丷右起;}'
        return sf[1]






魖路径纟节点
魖路径全纟节点间隙
魖路径全纟元素间隙, 魖路径全纟元素

乸路径全纟节点间隙
乸路径全纟元素间隙, 乸路径全纟元素




class 魖路径纟节点牜部件容器暨节点容器(魖路径纟节点):
    r'''[[[
    路径纟节点{左起丷右起;}
        |= (扁索引纟部件,)
            筐部件类别牜搜索定位.匡部件即节点
        |= (扁索引纟部件,路径纟节点匕部件)
            筐部件类别牜搜索定位.匡部件即节点容器
        |= (扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点)
            筐部件类别牜搜索定位.匡部件即更深节点容器

    #]]]'''#'''
    __slots__ = ()
    @property
    @abstractmethod
    def 扁索引纟部件(sf, /):
        '-> 扁索引纟部件'
    @property
    @abstractmethod
    def 部件类别牜搜索定位(sf, /):
        '-> 筐部件类别牜搜索定位'
    @abstractmethod
    def 拆包冫路径扌(sf, /):
        '-> (扁索引纟部件,?,?)'
class 魖路径纟节点乊匡部件即节点(魖路径纟节点牜部件容器暨节点容器):
    __slots__ = ()
    部件类别牜搜索定位 = 匡部件即节点
    @override
    def 拆包冫路径扌(sf, /):
        '-> (扁索引纟部件,)'
        return (sf.扁索引纟部件,)

class 魖路径纟节点乊匡部件即节点容器(魖路径纟节点牜部件容器暨节点容器):
    __slots__ = ()
    部件类别牜搜索定位 = 匡部件即节点容器
    @override
    def 拆包冫路径扌(sf, /):
        '-> (扁索引纟部件,路径纟节点匕部件)'
        return (sf.扁索引纟部件, sf.路径纟节点匕部件)

    @property
    @abstractmethod
    def 路径纟节点匕部件(sf, /):
        '-> 路径纟节点匕部件'

class 魖路径纟节点乊匡部件即更深节点容器(魖路径纟节点牜部件容器暨节点容器):
    __slots__ = ()
    部件类别牜搜索定位 = 匡部件即更深节点容器
    @override
    def 拆包冫路径扌(sf, /):
        '-> (扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点)'
        return (sf.扁索引纟部件, sf.路径纟更深节点匕部件, sf.路径纟节点匕更深节点)
    @property
    @abstractmethod
    def 路径纟更深节点匕部件(sf, /):
        '-> 路径纟更深节点匕部件'
    @property
    @abstractmethod
    def 路径纟节点匕更深节点(sf, /):
        '-> 路径纟节点匕更深节点'


class 乸路径纟节点乊匡部件即节点(tuple, 魖路径纟节点乊匡部件即节点):
    __slots__ = ()
    __repr__ = _repr_
    def __new__(cls, 扁索引纟部件, /):
        sf = tuple.__new__(cls, [扁索引纟部件])
        return sf
    @property
    @override
    def 扁索引纟部件(sf, /):
        '-> 扁索引纟部件'
        return sf[0]
class 乸路径纟节点乊匡部件即节点容器(tuple, 魖路径纟节点乊匡部件即节点容器):
    __slots__ = ()
    __repr__ = _repr_
    def __new__(cls, 扁索引纟部件,路径纟节点匕部件, /):
        sf = tuple.__new__(cls, [扁索引纟部件,路径纟节点匕部件])
        return sf
    @property
    @override
    def 扁索引纟部件(sf, /):
        '-> 扁索引纟部件'
        return sf[0]
    @property
    @override
    def 路径纟节点匕部件(sf, /):
        '-> 路径纟节点匕部件'
        return sf[1]
class 乸路径纟节点乊匡部件即更深节点容器(tuple, 魖路径纟节点乊匡部件即更深节点容器):
    __slots__ = ()
    __repr__ = _repr_
    def __new__(cls, 扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点, /):
        sf = tuple.__new__(cls, [扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点])
        return sf
    @property
    @override
    def 扁索引纟部件(sf, /):
        '-> 扁索引纟部件'
        return sf[0]
    @property
    @override
    def 路径纟更深节点匕部件(sf, /):
        '-> 路径纟更深节点匕部件'
        return sf[1]
    @property
    @override
    def 路径纟节点匕更深节点(sf, /):
        '-> 路径纟节点匕更深节点'
        return sf[2]



class 魖部件容器暨节点容器(魖节点容器,魖部件容器):
    '注意:基类先后顺序'
    __slots__ = ()

class 魖部件容器牜搜索定位爫部件即节点(魖节点容器牜搜索定位,魖部件容器牜搜索定位,魖部件容器暨节点容器,魖节点容器牜节点数):
    '[节点===部件][路径纟节点===扁索引纟部件]#[主要意图:搜索定位冫节点扌<<==搜索定位冫部件扌]'
    __slots__ = ()

    @override
    def 枚举冫节点扌(sf, /, *, 左起丷右起):
        '节点容器{深度;} -> 节点序列{深度,左起丷右起;}/Iter 节点{深度;}'
        return sf.枚举冫部件扌(左起丷右起=左起丷右起)

    @property
    @override
    def 节点数(sf, /):
        '-> uint'
        return sf.部件数

    @override
    def 测距冫节点乊起端扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> 节点到容器起端的距离/焦点与容器起端相隔节点数{0=>焦点是起端端点}/uint#节点数=>反向'
        return sf.测距冫部件乊起端扌(扁索引纟部件:=路径纟节点, 左起丷右起=左起丷右起)

    @override
    def 取冫节点巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> 节点{深度;}'
        return sf.取冫部件巛扁索引扌(扁索引纟部件:=路径纟节点, 左起丷右起=左起丷右起)
    @override
    def 取冫节点丶度量值巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> (节点{深度;}, 度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'
        return sf.取冫部件丶度量值巛扁索引扌(扁索引纟部件:=路径纟节点, 左起丷右起=左起丷右起)

    @override
    def 枚举冫路径丶节点丶度量值扌(sf, /, *, 左起丷右起):
        '-> Iter (路径纟节点{左起丷右起;},节点,度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'
        return sf.枚举冫扁索引丶部件丶度量值扌(左起丷右起=左起丷右起)
    @override
    def 搜索定位冫节点扌(sf, 初始累计值, 累积扌, 进退判定扌, /, *, 左起丷右起, 欤已知非超后退, 欤已知非超前进):
        xx = (况态, x) = sf.搜索定位冫部件扌(初始累计值, 累积扌, 进退判定扌, 左起丷右起=左起丷右起, 欤已知非超后退=欤已知非超后退, 欤已知非超前进=欤已知非超前进)
            # ^错误牜欤已知非超前进
        if 况态 is 匡扁索引纟部件:
            xx = (匡路径纟节点, x)
            (累计值牜前进, 扁索引纟部件,焦点部件,度量值纟部件, 累计值牜后退) = x
            路径纟节点 = 扁索引纟部件
            if 路径纟节点 is None:raise TypeError
        return xx
#end-class 魖部件容器牜搜索定位爫部件即节点(魖节点容器牜搜索定位,魖部件容器牜搜索定位,魖部件容器暨节点容器,魖节点容器牜节点数):


class 魖部件容器暨节点容器牜搜索定位(魖节点容器牜搜索定位,魖部件容器牜搜索定位,魖部件容器暨节点容器):
    '[路径纟节点::魖路径纟节点牜部件容器暨节点容器][部件 不一定是 节点]'
    # [部件 不一定是 节点]
    __slots__ = ()
    @abstractmethod
    def 解读冫部件类别牜搜索定位扌(sf, 扁索引纟部件,部件, /):
        '-> 筐部件类别牜搜索定位'
    @override
    def 取冫节点巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '魖路径纟节点牜部件容器暨节点容器 -> 节点{深度;}'
        部件 = sf.取冫部件巛扁索引扌(路径纟节点.扁索引纟部件, 左起丷右起=左起丷右起)
        类别 = 路径纟节点.部件类别牜搜索定位
        if 类别 is 匡部件即节点:
            节点 = 部件
        else:
            if 类别 is 匡部件即节点容器:
                某节点容器 = 部件
                路径纟节点匕某节点容器 = 路径纟节点.路径纟节点匕部件
            elif 类别 is 匡部件即更深节点容器:
                更深节点容器 = 部件
                更深节点 = 更深节点容器.取冫节点巛路径扌(路径纟节点.路径纟更深节点匕部件, 左起丷右起=左起丷右起)
                某节点容器 = 更深节点
                路径纟节点匕某节点容器 = 路径纟节点.路径纟节点匕更深节点
            else:
                raise 000
            节点 = 某节点容器.取冫节点巛路径扌(路径纟节点匕某节点容器, 左起丷右起=左起丷右起)
        return 节点
    @override
    def 取冫节点丶度量值巛路径扌(sf, 路径纟节点, /, *, 左起丷右起):
        '路径纟节点{左起丷右起;} -> (节点{深度;}, 度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'
        类别 = 路径纟节点.部件类别牜搜索定位
        if 类别 is 匡部件即节点:
            部件,度量值纟部件 = sf.取冫部件丶度量值巛扁索引扌(路径纟节点.扁索引纟部件, 左起丷右起=左起丷右起)
            节点 = 部件
            度量值纟节点 = 度量值纟部件
        else:
            部件 = sf.取冫部件巛扁索引扌(路径纟节点.扁索引纟部件, 左起丷右起=左起丷右起)
            if 类别 is 匡部件即节点容器:
                某节点容器 = 部件
                路径纟节点匕某节点容器 = 路径纟节点.路径纟节点匕部件
            elif 类别 is 匡部件即更深节点容器:
                更深节点容器 = 部件
                更深节点 = 更深节点容器.取冫节点巛路径扌(路径纟节点.路径纟更深节点匕部件, 左起丷右起=左起丷右起)
                某节点容器 = 更深节点
                路径纟节点匕某节点容器 = 路径纟节点.路径纟节点匕更深节点
            else:
                raise 000
            (节点,度量值纟节点) = 某节点容器.取冫节点丶度量值巛路径扌(路径纟节点匕某节点容器, 左起丷右起=左起丷右起)
        return (节点,度量值纟节点)

    @override
    def 搜索定位冫节点扌(sf, 初始累计值, 累积扌, 进退判定扌, /, *, 左起丷右起, 欤已知非超后退, 欤已知非超前进):
        xx = (况态, x) = sf.搜索定位冫部件扌(初始累计值, 累积扌, 进退判定扌, 左起丷右起=左起丷右起, 欤已知非超后退=欤已知非超后退, 欤已知非超前进=欤已知非超前进)
            # ^错误牜欤已知非超前进
        if not 况态 is 匡扁索引纟部件:
            if 况态 is 匡超后退:
                return xx
            elif 况态 is 匡超前进:
                return xx
            raise 000
        (累计值牜前进, 扁索引纟部件,焦点部件,度量值纟部件, 累计值牜后退) = x
        类别 = sf.解读冫部件类别牜搜索定位扌(扁索引纟部件,焦点部件)
        if 类别 is 匡部件即节点:
            焦点节点 = 焦点部件
            度量值纟节点 = 度量值纟部件
            路径纟节点 = 乸路径纟节点乊匡部件即节点(扁索引纟部件)
        else:
            某某节点容器 = 焦点部件
            xx = (况态, x) = 某某节点容器.搜索定位冫节点扌(初始累计值:=累计值牜前进, 累积扌, 进退判定扌, 左起丷右起=左起丷右起, 欤已知非超后退=True, 欤已知非超前进=True)
            if not 况态 is 匡路径纟节点:raise Exception(况态)
            #if not 况态 is 匡路径纟节点:raise 000
            (累计值牜前进, 路径纟某某节点匕部件,焦点某某节点,度量值纟某某节点, 累计值牜后退) = x
            if 类别 is 匡部件即节点容器:
                路径纟节点匕部件 = 路径纟某某节点匕部件
                焦点节点 = 焦点某某节点
                度量值纟节点 = 度量值纟某某节点
                路径纟节点 = 乸路径纟节点乊匡部件即节点容器(扁索引纟部件,路径纟节点匕部件)
            elif 类别 is 匡部件即更深节点容器:
                更深节点 = 焦点某某节点
                度量值纟更深节点 = 度量值纟某某节点
                路径纟更深节点匕部件 = 路径纟某某节点匕部件
                某节点容器 = 更深节点
                xx = (况态, x) = 某节点容器.搜索定位冫节点扌(初始累计值:=累计值牜前进, 累积扌, 进退判定扌, 左起丷右起=左起丷右起, 欤已知非超后退=True, 欤已知非超前进=True)
                if not 况态 is 匡路径纟节点:raise 000
                (累计值牜前进, 路径纟节点匕更深节点,焦点节点,度量值纟节点, 累计值牜后退) = x
                路径纟节点 = 乸路径纟节点乊匡部件即更深节点容器(扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点)
            else:
                raise Exception(类别)
                raise 000
        if 路径纟节点 is None:raise TypeError
        return (匡路径纟节点, (累计值牜前进, 路径纟节点,焦点节点,度量值纟节点, 累计值牜后退))


    @override
    def 枚举冫节点扌(sf, /, *, 左起丷右起):
        '节点容器{深度;} -> 节点序列{深度,左起丷右起;}/Iter 节点{深度;}'
        it = sf.枚举冫扁索引丶部件丶度量值扌(左起丷右起=左起丷右起)
        for (扁索引纟部件,部件,度量值纟部件) in it:
            类别 = sf.解读冫部件类别牜搜索定位扌(扁索引纟部件,部件)
            if 类别 is 匡部件即节点:
                节点 = 部件
                yield 节点
            elif 类别 is 匡部件即节点容器:
                节点容器 = 部件
                yield from 节点容器.枚举冫节点扌(左起丷右起=左起丷右起)
            elif 类别 is 匡部件即更深节点容器:
                更深节点容器 = 部件
                it = 更深节点容器.枚举冫节点扌(左起丷右起=左起丷右起)
                for 更深节点 in it:
                    节点容器 = 更深节点
                    yield from 节点容器.枚举冫节点扌(左起丷右起=左起丷右起)
            else:
                raise 000
        return


    @override
    def 枚举冫路径丶节点丶度量值扌(sf, /, *, 左起丷右起):
        '-> Iter (路径纟节点{左起丷右起;},节点,度量值纟节点)#注意:[不一定:[节点::魖含冫度量值]]'
        it = sf.枚举冫扁索引丶部件丶度量值扌(左起丷右起=左起丷右起)
        for (扁索引纟部件,部件,度量值纟部件) in it:
            类别 = sf.解读冫部件类别牜搜索定位扌(扁索引纟部件,部件)
            if 类别 is 匡部件即节点:
                节点 = 部件
                度量值纟节点 = 度量值纟部件
                路径纟节点 = 乸路径纟节点乊匡部件即节点(扁索引纟部件)
                yield (路径纟节点,节点,度量值纟节点)
            elif 类别 is 匡部件即节点容器:
                节点容器 = 部件
                it = 节点容器.枚举冫路径丶节点丶度量值扌(左起丷右起=左起丷右起)
                for (路径纟节点匕部件,节点,度量值纟节点) in it:
                    路径纟节点 = 乸路径纟节点乊匡部件即节点容器(扁索引纟部件,路径纟节点匕部件)
                    yield (路径纟节点,节点,度量值纟节点)
            elif 类别 is 匡部件即更深节点容器:
                更深节点容器 = 部件
                it = 更深节点容器.枚举冫路径丶节点丶度量值扌(左起丷右起=左起丷右起)
                for (路径纟更深节点匕部件,更深节点,度量值纟更深节点) in it:
                    节点容器 = 更深节点
                    it = 节点容器.枚举冫路径丶节点丶度量值扌(左起丷右起=左起丷右起)
                    for (路径纟节点匕更深节点,节点,度量值纟节点) in it:
                        路径纟节点 = 乸路径纟节点乊匡部件即更深节点容器(扁索引纟部件,路径纟更深节点匕部件,路径纟节点匕更深节点)
                        yield (路径纟节点,节点,度量值纟节点)
            else:
                raise 000
        return


#end-class 魖部件容器暨节点容器牜搜索定位(魖节点容器牜搜索定位,魖部件容器牜搜索定位,魖部件容器暨节点容器):


def __():
    __slots__ = ()
    raise NotImplementedError
    ___no_slots_ok___ = True

__all__
from seed.data_funcs.finger_tree__search import 筐搜索定位况型,匡超后退,匡超前进,匡扁索引纟部件,匡路径纟节点
from seed.data_funcs.finger_tree__search import 筐部件类别牜搜索定位,匡部件即节点,匡部件即节点容器,匡部件即更深节点容器

from seed.data_funcs.finger_tree__search import 魖部件容器,魖部件容器牜搜索定位
from seed.data_funcs.finger_tree__search import 魖节点容器,魖节点容器牜节点数,魖节点容器牜搜索定位,魖部件容器暨节点容器,魖部件容器暨节点容器牜搜索定位,魖部件容器牜搜索定位爫部件即节点

from seed.data_funcs.finger_tree__search import 魖路径纟节点牜部件容器暨节点容器
from seed.data_funcs.finger_tree__search import 乸路径纟节点乊匡部件即节点,乸路径纟节点乊匡部件即节点容器,乸路径纟节点乊匡部件即更深节点容器
from seed.data_funcs.finger_tree__search import 魖路径纟节点,魖路径全纟节点间隙,魖路径全纟元素间隙, 魖路径全纟元素

from seed.data_funcs.finger_tree__search import 乸路径全纟节点间隙,乸路径全纟元素间隙, 乸路径全纟元素

from seed.data_funcs.finger_tree__search import 魖含冫度量值

from seed.data_funcs.finger_tree__search import 错误牜展翅树相关,错误牜欤已知非超前进

from seed.data_funcs.finger_tree__search import *

#__all__:goto
# [:四种不同情况冫两份最小化参数配置]:goto
#_辅助推导冫蛮力穷举扌
#_辅助推导冫输出文本[欤去除冫非对称性:=True]
#bug:重新推导！
# bug:[:六种不同情况冫四份最小化参数配置]:goto
r'''[[[
e ../../python3_src/seed/data_funcs/finger_tree__config.py
view ../../python3_src/seed/math/polynomial/simple_polynomial.py

[[
命名规范:
毶展翅树 === 参数配置纟展翅树
]]


seed.data_funcs.finger_tree__config
py -m nn_ns.app.debug_cmd   seed.data_funcs.finger_tree__config -x
py -m nn_ns.app.doctest_cmd seed.data_funcs.finger_tree__config:__doc__ -ht
py -m nn_ns.app.doctest_cmd seed.data_funcs.finger_tree__config:__doc__ -ht > /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config..doctest.out.txt
view /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config..doctest.out.txt
    _测试冫乸毶展翅树扌:goto



[[[

######################
[[
不同侧端有不同操作，可能导致左右翼参数不一致
难度:絲O(1),缘O(log(外侧距离)),缎O(log(总长)),緣O(外侧距离),緞O(总长)
    絲缘缎緣緞
    ===部分无拼音:
    缅绌䌺缡䌻缘
    緬絀䋙縭䋚緣
    缧缰绔缄䍁缋缳缎绁----纩纩
    縲繮絝緘繸繢繯緞紲絟縂絋纊
操作:取(取端点/取冫节点巛路径)，入(压入)，出(弹出)，合(合并)，分(分裂)
欤左取
欤左出
欤左入

欤右取
欤右出
欤右入

欤合并
欤分裂

操作艹难度:
# O(1)
欤左取艹絲
欤左出艹絲
欤左入艹絲
欤右取艹絲
欤右出艹絲
欤右入艹絲
欤合并艹絲
欤分裂艹絲

# O(log(外侧距离))
欤左取艹缘
欤左出艹缘
欤左入艹缘
欤右取艹缘
欤右出艹缘
欤右入艹缘
欤合并艹缘
欤分裂艹缘

# O(log(总长))
欤左取艹缎
欤左出艹缎
欤左入艹缎
欤右取艹缎
欤右出艹缎
欤右入艹缎
欤合并艹缎
欤分裂艹缎

# O(外侧距离)
欤左取艹緣
欤左出艹緣
欤左入艹緣
欤右取艹緣
欤右出艹緣
欤右入艹緣
欤合并艹緣
欤分裂艹緣

# O(总长)
欤左取艹緞
欤左出艹緞
欤左入艹緞
欤右取艹緞
欤右出艹緞
欤右入艹緞
欤合并艹緞
欤分裂艹緞

具现结构:
*不增不删:数组:
欤左取艹絲
欤右取艹絲
:
欤左出艹緞
欤左入艹緞
欤右出艹緞
欤右入艹緞
欤合并艹緞
欤分裂艹緞

*随意粘合:Rope/Bag:
欤左入艹絲
欤右入艹絲
欤合并艹絲
:
欤左取艹緞
欤左出艹緞
欤右取艹緞
欤右出艹緞
欤分裂艹緞

*单向链表:lnkls:左闭右开
欤右取艹緣
:
欤右出艹絲
欤右入艹絲
:
欤左取艹緞
欤左出艹緞
欤左入艹緞
欤合并艹緞
欤分裂艹緞

*只增单侧展翅树:左闭右开:右入
*只删单侧展翅树:左闭右开:右出
*单侧展翅树:左闭右开
*单行道展翅树:左出右入
*只增双侧展翅树
*只删双侧展翅树
*双侧展翅树
非对称:额外假设:非必要:简化方向:[最小节点数纟左翼<=最小节点数纟右翼]
==
必要前提:[0 <= 最小节点数纟左翼 <= 最大节点数纟左翼]
必要前提:[0 <= 最小节点数纟右翼 <= 最大节点数纟右翼]
必要前提:[0 <= 最小节点数纟更深节点 <= 最优节点数纟更深节点 <= 最大节点数纟更深节点]
必要前提:不允许可退化态:[[更深树.欤空树] -> [[左翼非空][右翼非空]]]
    !! 允许:[最小节点数纟左翼==0]
    !! 允许:[最小节点数纟右翼==0]
必要前提:树状非线性:[最小节点数纟更深节点>=2]
==>>:
[最小节点数纟左翼>=1]欤左取艹缘
[最小节点数纟左翼==0]欤左取艹缎
[最小节点数纟右翼>=1]欤右取艹缘
[最小节点数纟右翼==0]欤右取艹缎

[最大节点数纟更深节点+最小节点数纟左翼-1<=最大节点数纟左翼]欤左出艹缎
    otherwise:???
[最大节点数纟更深节点+最小节点数纟右翼-1<=最大节点数纟右翼]欤右出艹缎
    otherwise:???

[最大节点数纟左翼+1-最优节点数纟更深节点>=最小节点数纟左翼]欤左入艹缎
[最大节点数纟右翼+1-最优节点数纟更深节点>=最小节点数纟右翼]欤右入艹缎

[欤左入艹缎][欤右入艹缎][最大节点数纟更深节点+1>=2*最小节点数纟更深节点][最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]欤合并艹缎
    otherwise:欤合并艹緣
[欤左出艹缎][欤右出艹缎][最小节点数纟更深节点>=最小节点数纟左翼+1][最小节点数纟更深节点>=最小节点数纟右翼+1]欤分裂艹缎
    otherwise:欤分裂艹緣
[欤左出艹缎][欤左入艹缎][最大节点数纟更深节点+最小节点数纟左翼<=最大节点数纟左翼]欤左增删防震荡
    !! [欤左出艹缎][欤左入艹缎][最小节点数纟左翼+1<=最大节点数纟更深节点+最小节点数纟左翼-1<=最大节点数纟左翼-1][最小节点数纟左翼+1<=最大节点数纟左翼+1-最优节点数纟更深节点<=最大节点数纟左翼-1]欤左增删防震荡
    !! 必要前提:[0 <= 最小节点数纟更深节点 <= 最优节点数纟更深节点 <= 最大节点数纟更深节点]
    !! 必要前提:树状非线性:[最小节点数纟更深节点>=2]
[欤右出艹缎][欤右入艹缎][最大节点数纟更深节点+最小节点数纟右翼<=最大节点数纟右翼]欤右增删防震荡

简化退化:左出: [[欤左出艹缎] -> [(最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树]]
简化退化:右出: [[欤右出艹缎] -> [(最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树]]
简化进化:[[欤左入艹缎or欤右入艹缎] -> [1+最大节点数纟光杆树 <= 最大节点数纟左翼+最大节点数纟右翼]]

==>>:
囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]

[0 <= 欤左取艹缘 <= 1]
    #见下面:[欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
[0 <= 欤右取艹缘 <= 1]
[0 <= 欤左出艹缎 <= 1]
[0 <= 欤右出艹缎 <= 1]
[0 <= 欤左入艹缎 <= 1]
[0 <= 欤右入艹缎 <= 1]
[0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎]
[0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎]
[0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎]
[0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎]

[最小节点数纟左翼>=欤左取艹缘]
[最小节点数纟左翼<=最小节点数纟右翼]
    !! 非对称:额外假设

[最小节点数纟右翼>=欤右取艹缘*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘]
    !! 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    !! 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
[欤左入艹缎*欤右入艹缎*欤合并艹缎]:
    !! [[欤左入艹缎][欤右入艹缎][欤合并艹缎] -> [最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]]
    !! 必要前提:树状非线性:[最小节点数纟更深节点>=2]
    [最小节点数纟右翼>=2-最小节点数纟左翼]
[最小节点数纟右翼>=(2*欤左入艹缎*欤右入艹缎*欤合并艹缎+欤右取艹缘*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎))*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘]


asif:[最小节点数纟更深节点<=(最小节点数纟左翼+最小节点数纟右翼)*欤左入艹缎*欤右入艹缎*欤合并艹缎 + 6666600000*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎)]
[最小节点数纟更深节点<=(最小节点数纟左翼+最小节点数纟右翼)*欤左入艹缎*欤右入艹缎*欤合并艹缎 + 最大节点数纟更深节点*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎)]
    !! [[欤左入艹缎][欤右入艹缎][欤合并艹缎] -> [最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]]
[最小节点数纟更深节点>=2+欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]
    !! 必要前提:树状非线性:[最小节点数纟更深节点>=2]
    !! [[欤左出艹缎][欤右出艹缎][欤分裂艹缎] -> [最小节点数纟更深节点>=最小节点数纟左翼+1][最小节点数纟更深节点>=最小节点数纟右翼+1]]
    !! 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
    !! 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
    !! [最小节点数纟右翼>=欤右取艹缘]
注意:不兼容:[[欤分裂艹缎][欤合并艹缎][欤左取艹缘==0]]
[[欤分裂艹缎][欤合并艹缎] -> [欤左取艹缘==1]]
    !! [[欤左出艹缎][欤右出艹缎][欤分裂艹缎] -> [最小节点数纟更深节点>=最小节点数纟左翼+1][最小节点数纟更深节点>=最小节点数纟右翼+1]]
    [最小节点数纟更深节点>=最小节点数纟右翼+1]
    !! [[欤左入艹缎][欤右入艹缎][欤合并艹缎] -> [最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]]
    [最小节点数纟右翼+1<=最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]
    [1<=最小节点数纟左翼]
    !! 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    [欤左取艹缘==1]
[欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 1]
[欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
    !! 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    !! 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
    !! 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]


[最优节点数纟更深节点 >= 最小节点数纟更深节点]


[最大节点数纟更深节点 >= 最优节点数纟更深节点]
[最大节点数纟更深节点 >= 最小节点数纟更深节点 +(最小节点数纟更深节点-1)*欤左入艹缎*欤右入艹缎*欤合并艹缎]



[最大节点数纟左翼>=最小节点数纟左翼+(最大节点数纟更深节点-1+欤左增删防震荡*欤左入艹缎)*欤左出艹缎+(最优节点数纟更深节点-1)*欤左入艹缎*(1-欤左出艹缎)]
[最大节点数纟右翼>=最小节点数纟右翼+(最大节点数纟更深节点-1+欤右增删防震荡*欤右入艹缎)*欤右出艹缎+(最优节点数纟更深节点-1)*欤右入艹缎*(1-欤右出艹缎)]



[最大节点数纟光杆树>=max((最小节点数纟左翼+最大节点数纟右翼-1)*欤左出艹缎,(最大节点数纟左翼+最小节点数纟右翼-1)*欤右出艹缎)]
    !! [最大节点数纟光杆树>=(最小节点数纟左翼+最大节点数纟右翼-1)*欤左出艹缎]
    !! [最大节点数纟光杆树>=(最大节点数纟左翼+最小节点数纟右翼-1)*欤右出艹缎]
asif:[最大节点数纟光杆树 <= ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))]
[最大节点数纟光杆树*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) <= (最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎))]
    !! [[欤左入艹缎or欤右入艹缎] -> [1+最大节点数纟光杆树 <= 最大节点数纟左翼+最大节点数纟右翼]]


==>>:
囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]

囹:[弛最小节点数纟左翼 =[def]= 最小节点数纟左翼-欤左取艹缘]
囹:[弛最小节点数纟右翼 =[def]= 最小节点数纟右翼-((2*欤左入艹缎*欤右入艹缎*欤合并艹缎+欤右取艹缘*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎))*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘)]
    !! [最小节点数纟右翼>=((2*欤左入艹缎*欤右入艹缎*欤合并艹缎+欤右取艹缘*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎))*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘)]
囹:[弛最小节点数纟更深节点 =[def]= 最小节点数纟更深节点-2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]
囹:[弛最优节点数纟更深节点 =[def]= 最优节点数纟更深节点-最小节点数纟更深节点]
囹:[弛最大节点数纟更深节点 =[def]= 最大节点数纟更深节点 - (最小节点数纟更深节点 +(最小节点数纟更深节点-1)*欤左入艹缎*欤右入艹缎*欤合并艹缎)]
    !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
囹:[弛最大节点数纟左翼 =[def]= 最大节点数纟左翼 - (最小节点数纟左翼+(最大节点数纟更深节点-1+欤左增删防震荡*欤左入艹缎)*欤左出艹缎+(最小节点数纟更深节点-1)*欤左入艹缎*(1-欤左出艹缎))]
    !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
囹:[弛最大节点数纟右翼 =[def]= 最大节点数纟右翼 - (最小节点数纟右翼+(最大节点数纟更深节点-1+欤右增删防震荡*欤右入艹缎)*欤右出艹缎+(最小节点数纟更深节点-1)*欤右入艹缎*(1-欤右出艹缎))]
    !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]

囹:[上限纟最大节点数纟光杆树 =[def]= ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))]
    !! asif:[最大节点数纟光杆树 <= ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))]
囹:[自由值纟节点数纟左翼 =[def]= (最大节点数纟左翼-最小节点数纟左翼)]
囹:[自由值纟节点数纟右翼 =[def]= (最大节点数纟右翼-最小节点数纟右翼)]
囹:[下限纟最大节点数纟光杆树 =[def]= max(0, (最小节点数纟左翼+最大节点数纟右翼-1)*欤左出艹缎,(最大节点数纟左翼+最小节点数纟右翼-1)*欤右出艹缎)]
    !! [最大节点数纟光杆树>=max((最小节点数纟左翼+最大节点数纟右翼-1)*欤左出艹缎,(最大节点数纟左翼+最小节点数纟右翼-1)*欤右出艹缎)]
[下限纟最大节点数纟光杆树 == max(0, (最小节点数纟左翼+最小节点数纟右翼-1+自由值纟节点数纟右翼)*欤左出艹缎,(最小节点数纟左翼+最小节点数纟右翼-1+自由值纟节点数纟左翼)*欤右出艹缎) == (最小节点数纟左翼+最小节点数纟右翼-1)*(1-(1-欤左出艹缎)*(1-欤右出艹缎)) +max(-允负固定部纟下限纟最大节点数纟光杆树, 自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
囹:[变动部纟下限纟最大节点数纟光杆树 =[def]= max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
囹:[允负固定部纟下限纟最大节点数纟光杆树 =[def]= (最小节点数纟左翼+最小节点数纟右翼-1)*(1-(1-欤左出艹缎)*(1-欤右出艹缎))]
[下限纟最大节点数纟光杆树 == 允负固定部纟下限纟最大节点数纟光杆树+变动部纟下限纟最大节点数纟光杆树]
囹:[弛最大节点数纟光杆树 =[def]= 最大节点数纟光杆树 -下限纟最大节点数纟光杆树]
囹:[最大值纟弛最大节点数纟光杆树 =[def]= 上限纟最大节点数纟光杆树 -下限纟最大节点数纟光杆树]
xxx:囹:[逆弛最大节点数纟光杆树 =[def]= 上限纟最大节点数纟光杆树 -最大节点数纟光杆树]
==
[欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
[0 <= 欤右取艹缘 <= 1]
[0 <= 欤左出艹缎 <= 1]
[0 <= 欤右出艹缎 <= 1]
[0 <= 欤左入艹缎 <= 1]
[0 <= 欤右入艹缎 <= 1]
[0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎]
[0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎]
[0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎]
[0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎]

[弛最小节点数纟左翼 >= 0]
[弛最小节点数纟右翼 >= 0]
[弛最大节点数纟更深节点 >= 0]
[弛最大节点数纟左翼 >= 0]
[弛最大节点数纟右翼 >= 0]

[弛最优节点数纟更深节点 == 0]
    !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]

[0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]
囹:[最大值纟弛最小节点数纟更深节点乊合并 =[def]= (最小节点数纟左翼+最小节点数纟右翼 -2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎)*欤左入艹缎*欤右入艹缎*欤合并艹缎]
    <<==:
    [0 <= 弛最小节点数纟更深节点 <= (最小节点数纟左翼+最小节点数纟右翼)*欤左入艹缎*欤右入艹缎*欤合并艹缎 + 最大节点数纟更深节点*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎)  -2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]
    <<==:
    !! asif:[最小节点数纟更深节点<=(最小节点数纟左翼+最小节点数纟右翼)*欤左入艹缎*欤右入艹缎*欤合并艹缎 + 6666600000*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎)]
    !! [最小节点数纟更深节点<=(最小节点数纟左翼+最小节点数纟右翼)*欤左入艹缎*欤右入艹缎*欤合并艹缎 + 最大节点数纟更深节点*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎)]
    !! [最小节点数纟更深节点>=2+欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]
    !! 囹:[弛最小节点数纟更深节点 =[def]= 最小节点数纟更深节点-2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]

xxx:[0 <= 逆弛最大节点数纟光杆树 <= 最大值纟逆弛最大节点数纟光杆树]
xxx:囹:[上限乊简化进化纟逆弛最大节点数纟光杆树 =[def]= ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))]
xxx:囹:[下限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树 =[def]= min(自由值纟节点数纟左翼,自由值纟节点数纟右翼)]
xxx:囹:[上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树 =[def]= min(自由值纟节点数纟左翼,自由值纟节点数纟右翼)]
xxx:囹:[最大值纟逆弛最大节点数纟光杆树 =[def]= (上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树*欤左出艹缎*欤右出艹缎 +自由值纟节点数纟左翼*欤左出艹缎*(1-欤右出艹缎) +自由值纟节点数纟右翼*欤右出艹缎*(1-欤左出艹缎) +上限乊简化进化纟逆弛最大节点数纟光杆树*(1-欤左出艹缎)*(1-欤右出艹缎))]
    xxx:!! 囹:[逆弛最大节点数纟光杆树 =[def]= ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎)) -最大节点数纟光杆树]
    !! [最大节点数纟光杆树>=max((最小节点数纟左翼+最大节点数纟右翼-1)*欤左出艹缎,(最大节点数纟左翼+最小节点数纟右翼-1)*欤右出艹缎)]

==
[最大值纟弛最小节点数纟更深节点乊合并 == (最小节点数纟左翼+最小节点数纟右翼 -2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎)*欤左入艹缎*欤右入艹缎*欤合并艹缎]

[自由值纟节点数纟左翼 == (最大节点数纟左翼-最小节点数纟左翼)]
[自由值纟节点数纟右翼 == (最大节点数纟右翼-最小节点数纟右翼)]
[上限纟最大节点数纟光杆树 == ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))]
[变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
[允负固定部纟下限纟最大节点数纟光杆树 == (最小节点数纟左翼+最小节点数纟右翼-1)*(1-(1-欤左出艹缎)*(1-欤右出艹缎))]
[下限纟最大节点数纟光杆树 == 允负固定部纟下限纟最大节点数纟光杆树+变动部纟下限纟最大节点数纟光杆树]
[最大值纟弛最大节点数纟光杆树 == 上限纟最大节点数纟光杆树 -下限纟最大节点数纟光杆树]
xxx:[上限乊简化进化纟逆弛最大节点数纟光杆树 == (最大节点数纟左翼+最大节点数纟右翼-1)]
xxx:[上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树 == min(自由值纟节点数纟左翼,自由值纟节点数纟右翼)]
xxx:[最大值纟逆弛最大节点数纟光杆树 == (上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树*欤左出艹缎*欤右出艹缎 +自由值纟节点数纟左翼*欤左出艹缎*(1-欤右出艹缎) +自由值纟节点数纟右翼*欤右出艹缎*(1-欤左出艹缎) +上限乊简化进化纟逆弛最大节点数纟光杆树*(1-欤左出艹缎)*(1-欤右出艹缎))]

[0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]
xxx:[0 <= 逆弛最大节点数纟光杆树 <= 最大值纟逆弛最大节点数纟光杆树]
[0 <= 弛最大节点数纟光杆树 <= 最大值纟弛最大节点数纟光杆树]
[最小节点数纟左翼 == 弛最小节点数纟左翼+欤左取艹缘]
[最小节点数纟右翼 == 弛最小节点数纟右翼+((2*欤左入艹缎*欤右入艹缎*欤合并艹缎+欤右取艹缘*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎))*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘)]
[最小节点数纟更深节点 == 弛最小节点数纟更深节点+2+欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎]
[最优节点数纟更深节点==弛最优节点数纟更深节点+最小节点数纟更深节点]
[最大节点数纟更深节点 == 弛最大节点数纟更深节点 + (最小节点数纟更深节点 +(最小节点数纟更深节点-1)*欤左入艹缎*欤右入艹缎*欤合并艹缎)]
[最大节点数纟左翼 == 弛最大节点数纟左翼 + (最小节点数纟左翼+(最大节点数纟更深节点-1+欤左增删防震荡*欤左入艹缎)*欤左出艹缎+(最小节点数纟更深节点-1)*欤左入艹缎*(1-欤左出艹缎))]
[最大节点数纟右翼 == 弛最大节点数纟右翼 + (最小节点数纟右翼+(最大节点数纟更深节点-1+欤右增删防震荡*欤右入艹缎)*欤右出艹缎+(最小节点数纟更深节点-1)*欤右入艹缎*(1-欤右出艹缎))]
xxx:[最大节点数纟光杆树 == 最大节点数纟左翼+最大节点数纟右翼-1 -逆弛最大节点数纟光杆树]
[最大节点数纟光杆树 == 弛最大节点数纟光杆树+下限纟最大节点数纟光杆树]
==
变量名次序:
    using seed.math.polynomial.simple_polynomial:mk_type_Polynomial8PyExpr__str

欤左取艹缘
欤右取艹缘
欤左出艹缎
欤右出艹缎
欤左入艹缎
欤右入艹缎
欤合并艹缎
欤分裂艹缎
欤左增删防震荡
欤右增删防震荡

弛最小节点数纟左翼
弛最小节点数纟右翼
弛最小节点数纟更深节点
弛最优节点数纟更深节点
弛最大节点数纟更深节点
弛最大节点数纟左翼
弛最大节点数纟右翼
弛最大节点数纟光杆树
xxx:逆弛最大节点数纟光杆树

最大值纟弛最小节点数纟更深节点乊合并
自由值纟节点数纟右翼
自由值纟节点数纟左翼
xxxxxxxxxxx
上限纟最大节点数纟光杆树
变动部纟下限纟最大节点数纟光杆树
允负固定部纟下限纟最大节点数纟光杆树
下限纟最大节点数纟光杆树
最大值纟弛最大节点数纟光杆树
xxx:上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树
xxx:上限乊简化进化纟逆弛最大节点数纟光杆树
xxx:最大值纟逆弛最大节点数纟光杆树

最小节点数纟左翼
最小节点数纟右翼
最小节点数纟更深节点
最优节点数纟更深节点
最大节点数纟更深节点
最大节点数纟左翼
最大节点数纟右翼
最大节点数纟光杆树



py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 +欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡
    12344
    最小节点数纟翅膀
    最小节点数纟更深节点
    最大节点数纟更深节点
    最大节点数纟翅膀
    最大节点数纟光杆树
    1123444:111111_1111
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡
    『-欤合并艹缎』
    12233
    1122333:111111_0111
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡
    『-欤合并艹缎』
    『-欤左增删防震荡』
    『-欤右增删防震荡』
    12222
    1122222:111111_0100

py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 +欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡
    『-欤分裂艹缎』
    12344
    1123444:111111_1011:111111_1111
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡
    『-欤分裂艹缎』
    『-欤合并艹缎』
    12233
    1122333:111111_0011:111111_0111
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    『-欤分裂艹缎』
    『-欤合并艹缎』
    『-欤左增删防震荡』
    『-欤右增删防震荡』
    12222
    1122222:111111_0000:111111_0100

单侧展翅树,单行道展翅树:注意:额外假设
    额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
    非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]

*只增单侧展翅树
*只删单侧展翅树
*单侧展翅树
*单行道展翅树
*只增双侧展翅树
*只删双侧展翅树
*双侧展翅树

*单侧展翅树
    注意:非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
    最小节点数纟左翼
    最小节点数纟右翼
    最小节点数纟更深节点
    最大节点数纟更深节点
    最大节点数纟左翼
    最大节点数纟右翼
    最大节点数纟光杆树
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 -欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    0122020:010101_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 -欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 -欤右出艹缎 -欤右入艹缎
    xxx:1122211
    1022200:101010_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 +欤右增删防震荡 -欤左出艹缎 -欤左入艹缎
    『+欤右增删防震荡』
    0122030:010101_0001
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 -欤右取艹缘 +欤左增删防震荡 -欤右增删防震荡 -欤右出艹缎 -欤右入艹缎
    『+欤左增删防震荡』
    xxx:1122311
    1022300:101010_0010

*只增单侧展翅树
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 -欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 -欤左入艹缎 -欤右出艹缎 +欤右入艹缎
    0022010:000001_0000:000101_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 -欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 +欤左入艹缎 -欤右出艹缎 -欤右入艹缎
    0022100:000010_0000:001010_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 -欤左入艹缎 -欤右出艹缎 +欤右入艹缎
    『+欤右取艹缘』
    0122020:010001_0000:010101_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 -欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 +欤左入艹缎 -欤右出艹缎 -欤右入艹缎
    『+欤左取艹缘』
    xxx:1122210
    1022200:100010_0000:101010_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 -欤左入艹缎 -欤右出艹缎 +欤右入艹缎
    『+欤右取艹缘』
    『+欤左取艹缘』
    1122120:110001_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 +欤左入艹缎 -欤右出艹缎 -欤右入艹缎
    『+欤左取艹缘』
    『+欤右取艹缘』
    1122210:110010_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 -欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 -欤左入艹缎 -欤右出艹缎 +欤右入艹缎
    『-欤右取艹缘』
    『+欤左取艹缘』
    xxx:1122120
    1022110:100001_0000:100101_0000
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 -欤左取艹缘 +欤右取艹缘 -欤左增删防震荡 -欤右增删防震荡 -欤左出艹缎 +欤左入艹缎 -欤右出艹缎 -欤右入艹缎
    『-欤左取艹缘』
    『+欤右取艹缘』
    0122110:010010_0000:011010_0000

######################
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导牜翅膀一致扌 +欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    ('最小节点数纟翅膀', 1+弛最小节点数纟翅膀)
    ('最小节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最优节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最大节点数纟更深节点', 3+2*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点)
    ('最大节点数纟翅膀', 4+3*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀)
    ('最大节点数纟光杆树', 4+4*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀+弛最大节点数纟光杆树)
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导牜翅膀一致扌 -欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    ('最小节点数纟翅膀', 1+弛最小节点数纟翅膀)
    ('最小节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最优节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最大节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点)
    ('最大节点数纟翅膀', 3+2*弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀)
    ('最大节点数纟光杆树', 3+3*弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀+弛最大节点数纟光杆树)
######################
_辅助推导冫蛮力穷举扌
py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导冫蛮力穷举扌  +欤统计 +欤去除冫非对称性  > /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌..欤统计.欤去除冫非对称性.out.txt     2>&1
du -h /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌.mid-cache.txt
    196KB
du -h /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌..欤统计.欤去除冫非对称性.out.txt
    232KB
view /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌.mid-cache.txt
view /sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌..欤统计.欤去除冫非对称性.out.txt
    前半部分:非对称
        # 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
    后半部分:对称
====================== 统计:归类数量 55 133
0022000 1
0022010 3
0022020 1
0022100 3
0022110 13
0022120 1
0022121 4
0022200 1
0022210 1
0022211 4
0022221 2
0122010 1
0122020 3
0122030 1
0122110 3
0122120 1
0122121 12
0122131 1
0122132 4
0122210 1
0122221 1
0122222 4
0122232 2
0223130 2
0223142 2
0223152 2
0223232 2
0223243 2
0223254 2
0223332 2
0223344 2
0223354 2
1122110 1
1122120 1
1122121 2
1122131 1
1122210 1
1122211 2
1122220 1
1122222 12
1122232 1
1122233 4
1122311 1
1122322 1
1122323 4
1122333 2
1123220 1
1123232 1
1123242 1
1123322 1
1123333 2
1123344 2
1123422 1
1123434 2
1123444 2
=== 输出名 ['最小节点数纟左翼', '最小节点数纟右翼', '最小节点数纟更深节点', '最大节点数纟更深节点', '最大节点数纟左翼', '最大节点数纟右翼', '最大节点数纟光杆树']
=== 参数名 ('欤左取艹缘', '欤右取艹缘', '欤左出艹缎', '欤右出艹缎', '欤左入艹缎', '欤右入艹缎') ('欤合并艹缎', '欤分裂艹缎', '欤左增删防震荡', '欤右增删防震荡')
========= 类组 0022000 1
0022000:111:000000:0000
>末尾:覆盖
========= 类组 0022010 3
0022010:000:000001:0000
0022010:000:000100:0000
0022010:000:000101:0000
>末尾:覆盖
========= 类组 0022020 1
0022020:000:000101:0001
>末尾:覆盖
========= 类组 0022100 3
0022100:000:000010:0000
0022100:000:001000:0000
0022100:000:001010:0000
>末尾:覆盖
========= 类组 0022110 13
0022110:111:000011:0000
0022110:001:000110:0000
0022110:001:000111:0000
0022110:001:001001:0000
0022110:001:001011:0000
0022110:111:001100:0000
0022110:111:001100:0100
0022110:001:001101:0000
0022110:001:001101:0100
0022110:001:001110:0000
0022110:001:001110:0100
0022110:111:001111:0000
0022110:111:001111:0100
>末尾:覆盖
========= 类组 0022120 1
0022120:000:000111:0001
>末尾:覆盖
========= 类组 0022121 4
0022121:000:001101:0001
0022121:000:001101:0101
0022121:000:001111:0001
0022121:000:001111:0101
>末尾:覆盖
========= 类组 0022200 1
0022200:000:001010:0010
>末尾:覆盖
========= 类组 0022210 1
0022210:000:001011:0010
>末尾:覆盖
========= 类组 0022211 4
0022211:000:001110:0010
0022211:000:001110:0110
0022211:000:001111:0010
0022211:000:001111:0110
>末尾:覆盖
========= 类组 0022221 2
0022221:111:001111:0011
0022221:111:001111:0111
>末尾:覆盖
========= 类组 0122010 1
0122010:000:010000:0000
>末尾:覆盖
========= 类组 0122020 3
0122020:000:010001:0000
0122020:000:010100:0000
0122020:000:010101:0000
>末尾:覆盖
========= 类组 0122030 1
0122030:000:010101:0001
>末尾:覆盖
========= 类组 0122110 3
0122110:000:010010:0000
0122110:000:011000:0000
0122110:000:011010:0000
>末尾:覆盖
========= 类组 0122120 1
0122120:000:010011:0000
>末尾:覆盖
========= 类组 0122121 12
0122121:000:010110:0000
0122121:000:010111:0000
0122121:000:011001:0000
0122121:000:011011:0000
0122121:000:011100:0000
0122121:000:011100:0100
0122121:000:011101:0000
0122121:000:011101:0100
0122121:000:011110:0000
0122121:000:011110:0100
0122121:000:011111:0000
0122121:000:011111:0100
>末尾:覆盖
========= 类组 0122131 1
0122131:000:010111:0001
>末尾:覆盖
========= 类组 0122132 4
0122132:000:011101:0001
0122132:000:011101:0101
0122132:000:011111:0001
0122132:000:011111:0101
>末尾:覆盖
========= 类组 0122210 1
0122210:000:011010:0010
>末尾:覆盖
========= 类组 0122221 1
0122221:000:011011:0010
>末尾:覆盖
========= 类组 0122222 4
0122222:000:011110:0010
0122222:000:011110:0110
0122222:000:011111:0010
0122222:000:011111:0110
>末尾:覆盖
========= 类组 0122232 2
0122232:000:011111:0011
0122232:000:011111:0111
>末尾:覆盖
========= 类组 0223130 2
0223130:100:000011:1000
0223130:000:010011:1000
>末尾:覆盖
========= 类组 0223142 2
0223142:000:000111:1000
0223142:000:010111:1000
>末尾:覆盖
========= 类组 0223152 2
0223152:000:000111:1001
0223152:000:010111:1001
>末尾:覆盖
========= 类组 0223232 2
0223232:000:001011:1000
0223232:000:011011:1000
>末尾:覆盖
========= 类组 0223243 2
0223243:100:001111:1000
0223243:000:011111:1000
>末尾:覆盖
========= 类组 0223254 2
0223254:000:001111:1001
0223254:000:011111:1001
>末尾:覆盖
========= 类组 0223332 2
0223332:000:001011:1010
0223332:000:011011:1010
>末尾:覆盖
========= 类组 0223344 2
0223344:000:001111:1010
0223344:000:011111:1010
>末尾:覆盖
========= 类组 0223354 2
0223354:100:001111:1011
0223354:000:011111:1011
>末尾:覆盖
========= 类组 1122110 1
1122110:111:110000:0000
>末尾:覆盖
========= 类组 1122120 1
1122120:000:110001:0000
>末尾:覆盖
========= 类组 1122121 2
1122121:000:110100:0000
1122121:000:110101:0000
>末尾:覆盖
========= 类组 1122131 1
1122131:000:110101:0001
>末尾:覆盖
========= 类组 1122210 1
1122210:000:110010:0000
>末尾:覆盖
========= 类组 1122211 2
1122211:000:111000:0000
1122211:000:111010:0000
>末尾:覆盖
========= 类组 1122220 1
1122220:111:110011:0000
>末尾:覆盖
========= 类组 1122222 12
1122222:001:110110:0000
1122222:001:110111:0000
1122222:001:111001:0000
1122222:001:111011:0000
1122222:111:111100:0000
1122222:111:111100:0100
1122222:001:111101:0000
1122222:001:111101:0100
1122222:001:111110:0000
1122222:001:111110:0100
1122222:111:111111:0000
1122222:111:111111:0100
>末尾:覆盖
========= 类组 1122232 1
1122232:000:110111:0001
>末尾:覆盖
========= 类组 1122233 4
1122233:000:111101:0001
1122233:000:111101:0101
1122233:000:111111:0001
1122233:000:111111:0101
>末尾:覆盖
========= 类组 1122311 1
1122311:000:111010:0010
>末尾:覆盖
========= 类组 1122322 1
1122322:000:111011:0010
>末尾:覆盖
========= 类组 1122323 4
1122323:000:111110:0010
1122323:000:111110:0110
1122323:000:111111:0010
1122323:000:111111:0110
>末尾:覆盖
========= 类组 1122333 2
1122333:111:111111:0011
1122333:111:111111:0111
>末尾:覆盖
========= 类组 1123220 1
1123220:111:110011:1000
>末尾:覆盖
========= 类组 1123232 1
1123232:000:110111:1000
>末尾:覆盖
========= 类组 1123242 1
1123242:000:110111:1001
>末尾:覆盖
========= 类组 1123322 1
1123322:000:111011:1000
>末尾:覆盖
========= 类组 1123333 2
1123333:111:111111:1000
1123333:111:111111:1100
>末尾:覆盖
========= 类组 1123344 2
1123344:000:111111:1001
1123344:000:111111:1101
>末尾:覆盖
========= 类组 1123422 1
1123422:000:111011:1010
>末尾:覆盖
========= 类组 1123434 2
1123434:000:111111:1010
1123434:000:111111:1110
>末尾:覆盖
========= 类组 1123444 2
1123444:111:111111:1011
1123444:111:111111:1111
>末尾:覆盖
=== 全部是 <<== 末尾 覆盖/唯一极大值 55
0022000:111:000000:0000
0022010:000:000101:0000
0022020:000:000101:0001
0022100:000:001010:0000
0022110:111:001111:0100
0022120:000:000111:0001
0022121:000:001111:0101
0022200:000:001010:0010
0022210:000:001011:0010
0022211:000:001111:0110
0022221:111:001111:0111
0122010:000:010000:0000
0122020:000:010101:0000
0122030:000:010101:0001
0122110:000:011010:0000
0122120:000:010011:0000
0122121:000:011111:0100
0122131:000:010111:0001
0122132:000:011111:0101
0122210:000:011010:0010
0122221:000:011011:0010
0122222:000:011111:0110
0122232:000:011111:0111
0223130:000:010011:1000
0223142:000:010111:1000
0223152:000:010111:1001
0223232:000:011011:1000
0223243:000:011111:1000
0223254:000:011111:1001
0223332:000:011011:1010
0223344:000:011111:1010
0223354:000:011111:1011
1122110:111:110000:0000
1122120:000:110001:0000
1122121:000:110101:0000
1122131:000:110101:0001
1122210:000:110010:0000
1122211:000:111010:0000
1122220:111:110011:0000
1122222:111:111111:0100
1122232:000:110111:0001
1122233:000:111111:0101
1122311:000:111010:0010
1122322:000:111011:0010
1122323:000:111111:0110
1122333:111:111111:0111
1123220:111:110011:1000
1123232:000:110111:1000
1123242:000:110111:1001
1123322:000:111011:1000
1123333:111:111111:1100
1123344:000:111111:1101
1123422:000:111011:1010
1123434:000:111111:1110
1123444:111:111111:1111

====================== 统计:欤去除冫非对称性 total 133 same 81 diff 9 miss_matched 43
000000:0000:0022000:== #==
000001:0000:0022010:== #==
000010:0000:0022100:== #==
000011:0000:0022110:== #==
000100:0000:0022010:== #==
000101:0000:0022010:== #==
000101:0001:0022020:== #==
000110:0000:0022110:== #==
000111:0000:0022110:== #==
000111:0001:0022120:== #==
001000:0000:0022100:== #==
001001:0000:0022110:== #==
001010:0000:0022100:== #==
001010:0010:0022200:== #==
001011:0000:0022110:== #==
001011:0010:0022210:== #==
001100:0000:0022110:== #==
001100:0100:0022110:== #==
001101:0000:0022110:== #==
001101:0001:0022121:== #==
001101:0100:0022110:== #==
001101:0101:0022121:== #==
001110:0000:0022110:== #==
001110:0010:0022211:== #==
001110:0100:0022110:== #==
001110:0110:0022211:== #==
001111:0000:0022110:== #==
001111:0001:0022121:== #==
001111:0010:0022211:== #==
001111:0011:0022221:== #==
001111:0100:0022110:== #==
001111:0101:0022121:== #==
001111:0110:0022211:== #==
001111:0111:0022221:== #==
110000:0000:1122110:== #==
110001:0000:1122120:== #==
110010:0000:1122210:== #==
110011:0000:1122220:== #==
110011:1000:1123220:== #==
110100:0000:1122121:== #==
110101:0000:1122121:== #==
110101:0001:1122131:== #==
110110:0000:1122222:== #==
110111:0000:1122222:== #==
110111:0001:1122232:== #==
110111:1000:1123232:== #==
110111:1001:1123242:== #==
111000:0000:1122211:== #==
111001:0000:1122222:== #==
111010:0000:1122211:== #==
111010:0010:1122311:== #==
111011:0000:1122222:== #==
111011:0010:1122322:== #==
111011:1000:1123322:== #==
111011:1010:1123422:== #==
111100:0000:1122222:== #==
111100:0100:1122222:== #==
111101:0000:1122222:== #==
111101:0001:1122233:== #==
111101:0100:1122222:== #==
111101:0101:1122233:== #==
111110:0000:1122222:== #==
111110:0010:1122323:== #==
111110:0100:1122222:== #==
111110:0110:1122323:== #==
111111:0000:1122222:== #==
111111:0001:1122233:== #==
111111:0010:1122323:== #==
111111:0011:1122333:== #==
111111:0100:1122222:== #==
111111:0101:1122233:== #==
111111:0110:1122323:== #==
111111:0111:1122333:== #==
111111:1000:1123333:== #==
111111:1001:1123344:== #==
111111:1010:1123434:== #==
111111:1011:1123444:== #==
111111:1100:1123333:== #==
111111:1101:1123344:== #==
111111:1110:1123434:== #==
111111:1111:1123444:== #==
000011:1000:0223130:2023310 #11 #<>
000111:1000:0223142:2023322 #11 #<>
000111:1001:0223152:2023332 #11 #<>
001011:1000:0223232:2023412 #11 #<>
001011:1010:0223332:2023512 #11 #<>
001111:1000:0223243:2023423 #11 #<>
001111:1001:0223254:2023434 #11 #<>
001111:1010:0223344:2023524 #11 #<>
001111:1011:0223354:2023534 #11 #<>
100000:0000:--:1022100 #>>
100001:0000:--:1022110 #>>
100010:0000:--:1022200 #>>
100011:0000:--:1022210 #>>
100011:1000:--:2023310 #>>
100100:0000:--:1022110 #>>
100101:0000:--:1022110 #>>
100101:0001:--:1022120 #>>
100110:0000:--:1022211 #>>
100111:0000:--:1022211 #>>
100111:0001:--:1022221 #>>
100111:1000:--:2023322 #>>
100111:1001:--:2023332 #>>
101000:0000:--:1022200 #>>
101001:0000:--:1022211 #>>
101010:0000:--:1022200 #>>
101010:0010:--:1022300 #>>
101011:0000:--:1022211 #>>
101011:0010:--:1022311 #>>
101011:1000:--:2023412 #>>
101011:1010:--:2023512 #>>
101100:0000:--:1022211 #>>
101100:0100:--:1022211 #>>
101101:0000:--:1022211 #>>
101101:0001:--:1022222 #>>
101101:0100:--:1022211 #>>
101101:0101:--:1022222 #>>
101110:0000:--:1022211 #>>
101110:0010:--:1022312 #>>
101110:0100:--:1022211 #>>
101110:0110:--:1022312 #>>
101111:0000:--:1022211 #>>
101111:0001:--:1022222 #>>
101111:0010:--:1022312 #>>
101111:0011:--:1022322 #>>
101111:0100:--:1022211 #>>
101111:0101:--:1022222 #>>
101111:0110:--:1022312 #>>
101111:0111:--:1022322 #>>
101111:1000:--:2023423 #>>
101111:1001:--:2023434 #>>
101111:1010:--:2023524 #>>
101111:1011:--:2023534 #>>
010000:0000:0122010:-- #<<
010001:0000:0122020:-- #<<
010010:0000:0122110:-- #<<
010011:0000:0122120:-- #<<
010011:1000:0223130:-- #<<
010100:0000:0122020:-- #<<
010101:0000:0122020:-- #<<
010101:0001:0122030:-- #<<
010110:0000:0122121:-- #<<
010111:0000:0122121:-- #<<
010111:0001:0122131:-- #<<
010111:1000:0223142:-- #<<
010111:1001:0223152:-- #<<
011000:0000:0122110:-- #<<
011001:0000:0122121:-- #<<
011010:0000:0122110:-- #<<
011010:0010:0122210:-- #<<
011011:0000:0122121:-- #<<
011011:0010:0122221:-- #<<
011011:1000:0223232:-- #<<
011011:1010:0223332:-- #<<
011100:0000:0122121:-- #<<
011100:0100:0122121:-- #<<
011101:0000:0122121:-- #<<
011101:0001:0122132:-- #<<
011101:0100:0122121:-- #<<
011101:0101:0122132:-- #<<
011110:0000:0122121:-- #<<
011110:0010:0122222:-- #<<
011110:0100:0122121:-- #<<
011110:0110:0122222:-- #<<
011111:0000:0122121:-- #<<
011111:0001:0122132:-- #<<
011111:0010:0122222:-- #<<
011111:0011:0122232:-- #<<
011111:0100:0122121:-- #<<
011111:0101:0122132:-- #<<
011111:0110:0122222:-- #<<
011111:0111:0122232:-- #<<
011111:1000:0223243:-- #<<
011111:1001:0223254:-- #<<
011111:1010:0223344:-- #<<
011111:1011:0223354:-- #<<

=========== 去除非对称假设重新归组 76
========= 类组 0022000 1 1 0
=== maxs 1
0022000:000000_0000 # >...
=== non_maxs 0
========= 类组 0022010 3 1 2
=== maxs 1
0022010:000101_0000 # >...
=== non_maxs 2
0022010:000001_0000 # <...
0022010:000100_0000 # <...
========= 类组 0022020 1 1 0
=== maxs 1
0022020:000101_0001 # >...
=== non_maxs 0
========= 类组 0022100 3 1 2
=== maxs 1
0022100:001010_0000 # >...
=== non_maxs 2
0022100:000010_0000 # <...
0022100:001000_0000 # <...
========= 类组 0022110 13 1 12
=== maxs 1
0022110:001111_0100 # >...
=== non_maxs 12
0022110:000011_0000 # <...
0022110:000110_0000 # <...
0022110:000111_0000 # <...
0022110:001001_0000 # <...
0022110:001011_0000 # <...
0022110:001100_0000 # <...
0022110:001100_0100 # <...
0022110:001101_0000 # <...
0022110:001101_0100 # <...
0022110:001110_0000 # <...
0022110:001110_0100 # <...
0022110:001111_0000 # <...
========= 类组 0022120 1 1 0
=== maxs 1
0022120:000111_0001 # >...
=== non_maxs 0
========= 类组 0022121 4 1 3
=== maxs 1
0022121:001111_0101 # >...
=== non_maxs 3
0022121:001101_0001 # <...
0022121:001101_0101 # <...
0022121:001111_0001 # <...
========= 类组 0022200 1 1 0
=== maxs 1
0022200:001010_0010 # >...
=== non_maxs 0
========= 类组 0022210 1 1 0
=== maxs 1
0022210:001011_0010 # >...
=== non_maxs 0
========= 类组 0022211 4 1 3
=== maxs 1
0022211:001111_0110 # >...
=== non_maxs 3
0022211:001110_0010 # <...
0022211:001110_0110 # <...
0022211:001111_0010 # <...
========= 类组 0022221 2 1 1
=== maxs 1
0022221:001111_0111 # >...
=== non_maxs 1
0022221:001111_0011 # <...
========= 类组 0122010 1 1 0
=== maxs 1
0122010:010000_0000 # >...
=== non_maxs 0
========= 类组 0122020 3 1 2
=== maxs 1
0122020:010101_0000 # >...
=== non_maxs 2
0122020:010001_0000 # <...
0122020:010100_0000 # <...
========= 类组 0122030 1 1 0
=== maxs 1
0122030:010101_0001 # >...
=== non_maxs 0
========= 类组 0122110 3 1 2
=== maxs 1
0122110:011010_0000 # >...
=== non_maxs 2
0122110:010010_0000 # <...
0122110:011000_0000 # <...
========= 类组 0122120 1 1 0
=== maxs 1
0122120:010011_0000 # >...
=== non_maxs 0
========= 类组 0122121 12 1 11
=== maxs 1
0122121:011111_0100 # >...
=== non_maxs 11
0122121:010110_0000 # <...
0122121:010111_0000 # <...
0122121:011001_0000 # <...
0122121:011011_0000 # <...
0122121:011100_0000 # <...
0122121:011100_0100 # <...
0122121:011101_0000 # <...
0122121:011101_0100 # <...
0122121:011110_0000 # <...
0122121:011110_0100 # <...
0122121:011111_0000 # <...
========= 类组 0122131 1 1 0
=== maxs 1
0122131:010111_0001 # >...
=== non_maxs 0
========= 类组 0122132 4 1 3
=== maxs 1
0122132:011111_0101 # >...
=== non_maxs 3
0122132:011101_0001 # <...
0122132:011101_0101 # <...
0122132:011111_0001 # <...
========= 类组 0122210 1 1 0
=== maxs 1
0122210:011010_0010 # >...
=== non_maxs 0
========= 类组 0122221 1 1 0
=== maxs 1
0122221:011011_0010 # >...
=== non_maxs 0
========= 类组 0122222 4 1 3
=== maxs 1
0122222:011111_0110 # >...
=== non_maxs 3
0122222:011110_0010 # <...
0122222:011110_0110 # <...
0122222:011111_0010 # <...
========= 类组 0122232 2 1 1
=== maxs 1
0122232:011111_0111 # >...
=== non_maxs 1
0122232:011111_0011 # <...
========= 类组 0223130 2 1 1
=== maxs 1
0223130:010011_1000 # >...
=== non_maxs 1
0223130:000011_1000 # <...
========= 类组 0223142 2 1 1
=== maxs 1
0223142:010111_1000 # >...
=== non_maxs 1
0223142:000111_1000 # <...
========= 类组 0223152 2 1 1
=== maxs 1
0223152:010111_1001 # >...
=== non_maxs 1
0223152:000111_1001 # <...
========= 类组 0223232 2 1 1
=== maxs 1
0223232:011011_1000 # >...
=== non_maxs 1
0223232:001011_1000 # <...
========= 类组 0223243 2 1 1
=== maxs 1
0223243:011111_1000 # >...
=== non_maxs 1
0223243:001111_1000 # <...
========= 类组 0223254 2 1 1
=== maxs 1
0223254:011111_1001 # >...
=== non_maxs 1
0223254:001111_1001 # <...
========= 类组 0223332 2 1 1
=== maxs 1
0223332:011011_1010 # >...
=== non_maxs 1
0223332:001011_1010 # <...
========= 类组 0223344 2 1 1
=== maxs 1
0223344:011111_1010 # >...
=== non_maxs 1
0223344:001111_1010 # <...
========= 类组 0223354 2 1 1
=== maxs 1
0223354:011111_1011 # >...
=== non_maxs 1
0223354:001111_1011 # <...
========= 类组 1022100 1 1 0
=== maxs 1
1022100:100000_0000 # >...
=== non_maxs 0
========= 类组 1022110 3 1 2
=== maxs 1
1022110:100101_0000 # >...
=== non_maxs 2
1022110:100001_0000 # <...
1022110:100100_0000 # <...
========= 类组 1022120 1 1 0
=== maxs 1
1022120:100101_0001 # >...
=== non_maxs 0
========= 类组 1022200 3 1 2
=== maxs 1
1022200:101010_0000 # >...
=== non_maxs 2
1022200:100010_0000 # <...
1022200:101000_0000 # <...
========= 类组 1022210 1 1 0
=== maxs 1
1022210:100011_0000 # >...
=== non_maxs 0
========= 类组 1022211 12 1 11
=== maxs 1
1022211:101111_0100 # >...
=== non_maxs 11
1022211:100110_0000 # <...
1022211:100111_0000 # <...
1022211:101001_0000 # <...
1022211:101011_0000 # <...
1022211:101100_0000 # <...
1022211:101100_0100 # <...
1022211:101101_0000 # <...
1022211:101101_0100 # <...
1022211:101110_0000 # <...
1022211:101110_0100 # <...
1022211:101111_0000 # <...
========= 类组 1022221 1 1 0
=== maxs 1
1022221:100111_0001 # >...
=== non_maxs 0
========= 类组 1022222 4 1 3
=== maxs 1
1022222:101111_0101 # >...
=== non_maxs 3
1022222:101101_0001 # <...
1022222:101101_0101 # <...
1022222:101111_0001 # <...
========= 类组 1022300 1 1 0
=== maxs 1
1022300:101010_0010 # >...
=== non_maxs 0
========= 类组 1022311 1 1 0
=== maxs 1
1022311:101011_0010 # >...
=== non_maxs 0
========= 类组 1022312 4 1 3
=== maxs 1
1022312:101111_0110 # >...
=== non_maxs 3
1022312:101110_0010 # <...
1022312:101110_0110 # <...
1022312:101111_0010 # <...
========= 类组 1022322 2 1 1
=== maxs 1
1022322:101111_0111 # >...
=== non_maxs 1
1022322:101111_0011 # <...
========= 类组 1122110 1 1 0
=== maxs 1
1122110:110000_0000 # >...
=== non_maxs 0
========= 类组 1122120 1 1 0
=== maxs 1
1122120:110001_0000 # >...
=== non_maxs 0
========= 类组 1122121 2 1 1
=== maxs 1
1122121:110101_0000 # >...
=== non_maxs 1
1122121:110100_0000 # <...
========= 类组 1122131 1 1 0
=== maxs 1
1122131:110101_0001 # >...
=== non_maxs 0
========= 类组 1122210 1 1 0
=== maxs 1
1122210:110010_0000 # >...
=== non_maxs 0
========= 类组 1122211 2 1 1
=== maxs 1
1122211:111010_0000 # >...
=== non_maxs 1
1122211:111000_0000 # <...
========= 类组 1122220 1 1 0
=== maxs 1
1122220:110011_0000 # >...
=== non_maxs 0
========= 类组 1122222 12 1 11
=== maxs 1
1122222:111111_0100 # >...
=== non_maxs 11
1122222:110110_0000 # <...
1122222:110111_0000 # <...
1122222:111001_0000 # <...
1122222:111011_0000 # <...
1122222:111100_0000 # <...
1122222:111100_0100 # <...
1122222:111101_0000 # <...
1122222:111101_0100 # <...
1122222:111110_0000 # <...
1122222:111110_0100 # <...
1122222:111111_0000 # <...
========= 类组 1122232 1 1 0
=== maxs 1
1122232:110111_0001 # >...
=== non_maxs 0
========= 类组 1122233 4 1 3
=== maxs 1
1122233:111111_0101 # >...
=== non_maxs 3
1122233:111101_0001 # <...
1122233:111101_0101 # <...
1122233:111111_0001 # <...
========= 类组 1122311 1 1 0
=== maxs 1
1122311:111010_0010 # >...
=== non_maxs 0
========= 类组 1122322 1 1 0
=== maxs 1
1122322:111011_0010 # >...
=== non_maxs 0
========= 类组 1122323 4 1 3
=== maxs 1
1122323:111111_0110 # >...
=== non_maxs 3
1122323:111110_0010 # <...
1122323:111110_0110 # <...
1122323:111111_0010 # <...
========= 类组 1122333 2 1 1
=== maxs 1
1122333:111111_0111 # >...
=== non_maxs 1
1122333:111111_0011 # <...
========= 类组 1123220 1 1 0
=== maxs 1
1123220:110011_1000 # >...
=== non_maxs 0
========= 类组 1123232 1 1 0
=== maxs 1
1123232:110111_1000 # >...
=== non_maxs 0
========= 类组 1123242 1 1 0
=== maxs 1
1123242:110111_1001 # >...
=== non_maxs 0
========= 类组 1123322 1 1 0
=== maxs 1
1123322:111011_1000 # >...
=== non_maxs 0
========= 类组 1123333 2 1 1
=== maxs 1
1123333:111111_1100 # >...
=== non_maxs 1
1123333:111111_1000 # <...
========= 类组 1123344 2 1 1
=== maxs 1
1123344:111111_1101 # >...
=== non_maxs 1
1123344:111111_1001 # <...
========= 类组 1123422 1 1 0
=== maxs 1
1123422:111011_1010 # >...
=== non_maxs 0
========= 类组 1123434 2 1 1
=== maxs 1
1123434:111111_1110 # >...
=== non_maxs 1
1123434:111111_1010 # <...
========= 类组 1123444 2 1 1
=== maxs 1
1123444:111111_1111 # >...
=== non_maxs 1
1123444:111111_1011 # <...
========= 类组 2023310 2 1 1
=== maxs 1
2023310:100011_1000 # >...
=== non_maxs 1
2023310:000011_1000 # <...
========= 类组 2023322 2 1 1
=== maxs 1
2023322:100111_1000 # >...
=== non_maxs 1
2023322:000111_1000 # <...
========= 类组 2023332 2 1 1
=== maxs 1
2023332:100111_1001 # >...
=== non_maxs 1
2023332:000111_1001 # <...
========= 类组 2023412 2 1 1
=== maxs 1
2023412:101011_1000 # >...
=== non_maxs 1
2023412:001011_1000 # <...
========= 类组 2023423 2 1 1
=== maxs 1
2023423:101111_1000 # >...
=== non_maxs 1
2023423:001111_1000 # <...
========= 类组 2023434 2 1 1
=== maxs 1
2023434:101111_1001 # >...
=== non_maxs 1
2023434:001111_1001 # <...
========= 类组 2023512 2 1 1
=== maxs 1
2023512:101011_1010 # >...
=== non_maxs 1
2023512:001011_1010 # <...
========= 类组 2023524 2 1 1
=== maxs 1
2023524:101111_1010 # >...
=== non_maxs 1
2023524:001111_1010 # <...
========= 类组 2023534 2 1 1
=== maxs 1
2023534:101111_1011 # >...
=== non_maxs 1
2023534:001111_1011 # <...
=== 全部是 <<== 末尾 覆盖/唯一极大值 76 # 隐藏非最大
0022000:000000_0000 # 1>... # 0
0022010:000101_0000 # 1>... # 2
0022020:000101_0001 # 1>... # 0
0022100:001010_0000 # 1>... # 2
0022110:001111_0100 # 1>... # 12
0022120:000111_0001 # 1>... # 0
0022121:001111_0101 # 1>... # 3
0022200:001010_0010 # 1>... # 0
0022210:001011_0010 # 1>... # 0
0022211:001111_0110 # 1>... # 3
0022221:001111_0111 # 1>... # 1
0122010:010000_0000 # 1>... # 0
0122020:010101_0000 # 1>... # 2
0122030:010101_0001 # 1>... # 0
0122110:011010_0000 # 1>... # 2
0122120:010011_0000 # 1>... # 0
0122121:011111_0100 # 1>... # 11
0122131:010111_0001 # 1>... # 0
0122132:011111_0101 # 1>... # 3
0122210:011010_0010 # 1>... # 0
0122221:011011_0010 # 1>... # 0
0122222:011111_0110 # 1>... # 3
0122232:011111_0111 # 1>... # 1
0223130:010011_1000 # 1>... # 1
0223142:010111_1000 # 1>... # 1
0223152:010111_1001 # 1>... # 1
0223232:011011_1000 # 1>... # 1
0223243:011111_1000 # 1>... # 1
0223254:011111_1001 # 1>... # 1
0223332:011011_1010 # 1>... # 1
0223344:011111_1010 # 1>... # 1
0223354:011111_1011 # 1>... # 1
1022100:100000_0000 # 1>... # 0
1022110:100101_0000 # 1>... # 2
1022120:100101_0001 # 1>... # 0
1022200:101010_0000 # 1>... # 2
1022210:100011_0000 # 1>... # 0
1022211:101111_0100 # 1>... # 11
1022221:100111_0001 # 1>... # 0
1022222:101111_0101 # 1>... # 3
1022300:101010_0010 # 1>... # 0
1022311:101011_0010 # 1>... # 0
1022312:101111_0110 # 1>... # 3
1022322:101111_0111 # 1>... # 1
1122110:110000_0000 # 1>... # 0
1122120:110001_0000 # 1>... # 0
1122121:110101_0000 # 1>... # 1
1122131:110101_0001 # 1>... # 0
1122210:110010_0000 # 1>... # 0
1122211:111010_0000 # 1>... # 1
1122220:110011_0000 # 1>... # 0
1122222:111111_0100 # 1>... # 11
1122232:110111_0001 # 1>... # 0
1122233:111111_0101 # 1>... # 3
1122311:111010_0010 # 1>... # 0
1122322:111011_0010 # 1>... # 0
1122323:111111_0110 # 1>... # 3
1122333:111111_0111 # 1>... # 1
1123220:110011_1000 # 1>... # 0
1123232:110111_1000 # 1>... # 0
1123242:110111_1001 # 1>... # 0
1123322:111011_1000 # 1>... # 0
1123333:111111_1100 # 1>... # 1
1123344:111111_1101 # 1>... # 1
1123422:111011_1010 # 1>... # 0
1123434:111111_1110 # 1>... # 1
1123444:111111_1111 # 1>... # 1
2023310:100011_1000 # 1>... # 1
2023322:100111_1000 # 1>... # 1
2023332:100111_1001 # 1>... # 1
2023412:101011_1000 # 1>... # 1
2023423:101111_1000 # 1>... # 1
2023434:101111_1001 # 1>... # 1
2023512:101011_1010 # 1>... # 1
2023524:101111_1010 # 1>... # 1
2023534:101111_1011 # 1>... # 1
=== 全部是 <<== 末尾 覆盖/唯一极大值 76 # 显示所有:折叠
0022000:000000_0000 > [] # 1>... # 0
0022010:000101_0000 > [000001_0000,000100_0000] # 1>... # 2
0022020:000101_0001 > [] # 1>... # 0
0022100:001010_0000 > [000010_0000,001000_0000] # 1>... # 2
0022110:001111_0100 > [000011_0000,000110_0000,000111_0000,001001_0000,001011_0000,001100_0000,001100_0100,001101_0000,001101_0100,001110_0000,001110_0100,001111_0000] # 1>... # 12
0022120:000111_0001 > [] # 1>... # 0
0022121:001111_0101 > [001101_0001,001101_0101,001111_0001] # 1>... # 3
0022200:001010_0010 > [] # 1>... # 0
0022210:001011_0010 > [] # 1>... # 0
0022211:001111_0110 > [001110_0010,001110_0110,001111_0010] # 1>... # 3
0022221:001111_0111 > [001111_0011] # 1>... # 1
0122010:010000_0000 > [] # 1>... # 0
0122020:010101_0000 > [010001_0000,010100_0000] # 1>... # 2
0122030:010101_0001 > [] # 1>... # 0
0122110:011010_0000 > [010010_0000,011000_0000] # 1>... # 2
0122120:010011_0000 > [] # 1>... # 0
0122121:011111_0100 > [010110_0000,010111_0000,011001_0000,011011_0000,011100_0000,011100_0100,011101_0000,011101_0100,011110_0000,011110_0100,011111_0000] # 1>... # 11
0122131:010111_0001 > [] # 1>... # 0
0122132:011111_0101 > [011101_0001,011101_0101,011111_0001] # 1>... # 3
0122210:011010_0010 > [] # 1>... # 0
0122221:011011_0010 > [] # 1>... # 0
0122222:011111_0110 > [011110_0010,011110_0110,011111_0010] # 1>... # 3
0122232:011111_0111 > [011111_0011] # 1>... # 1
0223130:010011_1000 > [000011_1000] # 1>... # 1
0223142:010111_1000 > [000111_1000] # 1>... # 1
0223152:010111_1001 > [000111_1001] # 1>... # 1
0223232:011011_1000 > [001011_1000] # 1>... # 1
0223243:011111_1000 > [001111_1000] # 1>... # 1
0223254:011111_1001 > [001111_1001] # 1>... # 1
0223332:011011_1010 > [001011_1010] # 1>... # 1
0223344:011111_1010 > [001111_1010] # 1>... # 1
0223354:011111_1011 > [001111_1011] # 1>... # 1
1022100:100000_0000 > [] # 1>... # 0
1022110:100101_0000 > [100001_0000,100100_0000] # 1>... # 2
1022120:100101_0001 > [] # 1>... # 0
1022200:101010_0000 > [100010_0000,101000_0000] # 1>... # 2
1022210:100011_0000 > [] # 1>... # 0
1022211:101111_0100 > [100110_0000,100111_0000,101001_0000,101011_0000,101100_0000,101100_0100,101101_0000,101101_0100,101110_0000,101110_0100,101111_0000] # 1>... # 11
1022221:100111_0001 > [] # 1>... # 0
1022222:101111_0101 > [101101_0001,101101_0101,101111_0001] # 1>... # 3
1022300:101010_0010 > [] # 1>... # 0
1022311:101011_0010 > [] # 1>... # 0
1022312:101111_0110 > [101110_0010,101110_0110,101111_0010] # 1>... # 3
1022322:101111_0111 > [101111_0011] # 1>... # 1
1122110:110000_0000 > [] # 1>... # 0
1122120:110001_0000 > [] # 1>... # 0
1122121:110101_0000 > [110100_0000] # 1>... # 1
1122131:110101_0001 > [] # 1>... # 0
1122210:110010_0000 > [] # 1>... # 0
1122211:111010_0000 > [111000_0000] # 1>... # 1
1122220:110011_0000 > [] # 1>... # 0
1122222:111111_0100 > [110110_0000,110111_0000,111001_0000,111011_0000,111100_0000,111100_0100,111101_0000,111101_0100,111110_0000,111110_0100,111111_0000] # 1>... # 11
1122232:110111_0001 > [] # 1>... # 0
1122233:111111_0101 > [111101_0001,111101_0101,111111_0001] # 1>... # 3
1122311:111010_0010 > [] # 1>... # 0
1122322:111011_0010 > [] # 1>... # 0
1122323:111111_0110 > [111110_0010,111110_0110,111111_0010] # 1>... # 3
1122333:111111_0111 > [111111_0011] # 1>... # 1
1123220:110011_1000 > [] # 1>... # 0
1123232:110111_1000 > [] # 1>... # 0
1123242:110111_1001 > [] # 1>... # 0
1123322:111011_1000 > [] # 1>... # 0
1123333:111111_1100 > [111111_1000] # 1>... # 1
1123344:111111_1101 > [111111_1001] # 1>... # 1
1123422:111011_1010 > [] # 1>... # 0
1123434:111111_1110 > [111111_1010] # 1>... # 1
1123444:111111_1111 > [111111_1011] # 1>... # 1
2023310:100011_1000 > [000011_1000] # 1>... # 1
2023322:100111_1000 > [000111_1000] # 1>... # 1
2023332:100111_1001 > [000111_1001] # 1>... # 1
2023412:101011_1000 > [001011_1000] # 1>... # 1
2023423:101111_1000 > [001111_1000] # 1>... # 1
2023434:101111_1001 > [001111_1001] # 1>... # 1
2023512:101011_1010 > [001011_1010] # 1>... # 1
2023524:101111_1010 > [001111_1010] # 1>... # 1
2023534:101111_1011 > [001111_1011] # 1>... # 1
=== 多对多:非极大00xxx->(极大01xxx,极大10xxx) 9
000011_1000 < 010011_1000<>100011_1000
000111_1000 < 010111_1000<>100111_1000
000111_1001 < 010111_1001<>100111_1001
001011_1000 < 011011_1000<>101011_1000
001011_1010 < 011011_1010<>101011_1010
001111_1000 < 011111_1000<>101111_1000
001111_1001 < 011111_1001<>101111_1001
001111_1010 < 011111_1010<>101111_1010
001111_1011 < 011111_1011<>101111_1011
=== 多对多:极大->(==极大,<极大) 0
=== 多对多 9
000011_1000:0223130,2023310
000111_1000:0223142,2023322
000111_1001:0223152,2023332
001011_1000:0223232,2023412
001011_1010:0223332,2023512
001111_1000:0223243,2023423
001111_1001:0223254,2023434
001111_1010:0223344,2023524
001111_1011:0223354,2023534
=== 全部是 <<== 末尾 覆盖/唯一极大值:类组总数=76, 参数组总数=176, 类组参数组关联总数=185, 多对多关联的参数组总数=9, 多对多关联的最大参数组总数=0 # 显示所有:扁平反转:参数组->极大参数组->类组 #max#multi#max_and_multi
000000_0000:000000_0000:0022000 #max
000001_0000:000101_0000:0022010
000100_0000:000101_0000:0022010
000101_0000:000101_0000:0022010 #max
000101_0001:000101_0001:0022020 #max
000010_0000:001010_0000:0022100
001000_0000:001010_0000:0022100
001010_0000:001010_0000:0022100 #max
000011_0000:001111_0100:0022110
000110_0000:001111_0100:0022110
000111_0000:001111_0100:0022110
001001_0000:001111_0100:0022110
001011_0000:001111_0100:0022110
001100_0000:001111_0100:0022110
001100_0100:001111_0100:0022110
001101_0000:001111_0100:0022110
001101_0100:001111_0100:0022110
001110_0000:001111_0100:0022110
001110_0100:001111_0100:0022110
001111_0000:001111_0100:0022110
001111_0100:001111_0100:0022110 #max
000111_0001:000111_0001:0022120 #max
001101_0001:001111_0101:0022121
001101_0101:001111_0101:0022121
001111_0001:001111_0101:0022121
001111_0101:001111_0101:0022121 #max
001010_0010:001010_0010:0022200 #max
001011_0010:001011_0010:0022210 #max
001110_0010:001111_0110:0022211
001110_0110:001111_0110:0022211
001111_0010:001111_0110:0022211
001111_0110:001111_0110:0022211 #max
001111_0011:001111_0111:0022221
001111_0111:001111_0111:0022221 #max
010000_0000:010000_0000:0122010 #max
010001_0000:010101_0000:0122020
010100_0000:010101_0000:0122020
010101_0000:010101_0000:0122020 #max
010101_0001:010101_0001:0122030 #max
010010_0000:011010_0000:0122110
011000_0000:011010_0000:0122110
011010_0000:011010_0000:0122110 #max
010011_0000:010011_0000:0122120 #max
010110_0000:011111_0100:0122121
010111_0000:011111_0100:0122121
011001_0000:011111_0100:0122121
011011_0000:011111_0100:0122121
011100_0000:011111_0100:0122121
011100_0100:011111_0100:0122121
011101_0000:011111_0100:0122121
011101_0100:011111_0100:0122121
011110_0000:011111_0100:0122121
011110_0100:011111_0100:0122121
011111_0000:011111_0100:0122121
011111_0100:011111_0100:0122121 #max
010111_0001:010111_0001:0122131 #max
011101_0001:011111_0101:0122132
011101_0101:011111_0101:0122132
011111_0001:011111_0101:0122132
011111_0101:011111_0101:0122132 #max
011010_0010:011010_0010:0122210 #max
011011_0010:011011_0010:0122221 #max
011110_0010:011111_0110:0122222
011110_0110:011111_0110:0122222
011111_0010:011111_0110:0122222
011111_0110:011111_0110:0122222 #max
011111_0011:011111_0111:0122232
011111_0111:011111_0111:0122232 #max
000011_1000:010011_1000:0223130 #multi
010011_1000:010011_1000:0223130 #max
000111_1000:010111_1000:0223142 #multi
010111_1000:010111_1000:0223142 #max
000111_1001:010111_1001:0223152 #multi
010111_1001:010111_1001:0223152 #max
001011_1000:011011_1000:0223232 #multi
011011_1000:011011_1000:0223232 #max
001111_1000:011111_1000:0223243 #multi
011111_1000:011111_1000:0223243 #max
001111_1001:011111_1001:0223254 #multi
011111_1001:011111_1001:0223254 #max
001011_1010:011011_1010:0223332 #multi
011011_1010:011011_1010:0223332 #max
001111_1010:011111_1010:0223344 #multi
011111_1010:011111_1010:0223344 #max
001111_1011:011111_1011:0223354 #multi
011111_1011:011111_1011:0223354 #max
100000_0000:100000_0000:1022100 #max
100001_0000:100101_0000:1022110
100100_0000:100101_0000:1022110
100101_0000:100101_0000:1022110 #max
100101_0001:100101_0001:1022120 #max
100010_0000:101010_0000:1022200
101000_0000:101010_0000:1022200
101010_0000:101010_0000:1022200 #max
100011_0000:100011_0000:1022210 #max
100110_0000:101111_0100:1022211
100111_0000:101111_0100:1022211
101001_0000:101111_0100:1022211
101011_0000:101111_0100:1022211
101100_0000:101111_0100:1022211
101100_0100:101111_0100:1022211
101101_0000:101111_0100:1022211
101101_0100:101111_0100:1022211
101110_0000:101111_0100:1022211
101110_0100:101111_0100:1022211
101111_0000:101111_0100:1022211
101111_0100:101111_0100:1022211 #max
100111_0001:100111_0001:1022221 #max
101101_0001:101111_0101:1022222
101101_0101:101111_0101:1022222
101111_0001:101111_0101:1022222
101111_0101:101111_0101:1022222 #max
101010_0010:101010_0010:1022300 #max
101011_0010:101011_0010:1022311 #max
101110_0010:101111_0110:1022312
101110_0110:101111_0110:1022312
101111_0010:101111_0110:1022312
101111_0110:101111_0110:1022312 #max
101111_0011:101111_0111:1022322
101111_0111:101111_0111:1022322 #max
110000_0000:110000_0000:1122110 #max
110001_0000:110001_0000:1122120 #max
110100_0000:110101_0000:1122121
110101_0000:110101_0000:1122121 #max
110101_0001:110101_0001:1122131 #max
110010_0000:110010_0000:1122210 #max
111000_0000:111010_0000:1122211
111010_0000:111010_0000:1122211 #max
110011_0000:110011_0000:1122220 #max
110110_0000:111111_0100:1122222
110111_0000:111111_0100:1122222
111001_0000:111111_0100:1122222
111011_0000:111111_0100:1122222
111100_0000:111111_0100:1122222
111100_0100:111111_0100:1122222
111101_0000:111111_0100:1122222
111101_0100:111111_0100:1122222
111110_0000:111111_0100:1122222
111110_0100:111111_0100:1122222
111111_0000:111111_0100:1122222
111111_0100:111111_0100:1122222 #max
110111_0001:110111_0001:1122232 #max
111101_0001:111111_0101:1122233
111101_0101:111111_0101:1122233
111111_0001:111111_0101:1122233
111111_0101:111111_0101:1122233 #max
111010_0010:111010_0010:1122311 #max
111011_0010:111011_0010:1122322 #max
111110_0010:111111_0110:1122323
111110_0110:111111_0110:1122323
111111_0010:111111_0110:1122323
111111_0110:111111_0110:1122323 #max
111111_0011:111111_0111:1122333
111111_0111:111111_0111:1122333 #max
110011_1000:110011_1000:1123220 #max
110111_1000:110111_1000:1123232 #max
110111_1001:110111_1001:1123242 #max
111011_1000:111011_1000:1123322 #max
111111_1000:111111_1100:1123333
111111_1100:111111_1100:1123333 #max
111111_1001:111111_1101:1123344
111111_1101:111111_1101:1123344 #max
111011_1010:111011_1010:1123422 #max
111111_1010:111111_1110:1123434
111111_1110:111111_1110:1123434 #max
111111_1011:111111_1111:1123444
111111_1111:111111_1111:1123444 #max
000011_1000:100011_1000:2023310 #multi
100011_1000:100011_1000:2023310 #max
000111_1000:100111_1000:2023322 #multi
100111_1000:100111_1000:2023322 #max
000111_1001:100111_1001:2023332 #multi
100111_1001:100111_1001:2023332 #max
001011_1000:101011_1000:2023412 #multi
101011_1000:101011_1000:2023412 #max
001111_1000:101111_1000:2023423 #multi
101111_1000:101111_1000:2023423 #max
001111_1001:101111_1001:2023434 #multi
101111_1001:101111_1001:2023434 #max
001011_1010:101011_1010:2023512 #multi
101011_1010:101011_1010:2023512 #max
001111_1010:101111_1010:2023524 #multi
101111_1010:101111_1010:2023524 #max
001111_1011:101111_1011:2023534 #multi
101111_1011:101111_1011:2023534 #max

======================



##end:====================== 统计:归类数量 55 133
##old:end:====================== 统计:归类数量 55 180
##old-end:====================== 统计:归类数量 55 184
##old-end:====================== 统计:归类数量 46 162

]]
######################
[[
[:搜索冫外总长]:here
[伥外夞帐张怅搃胀枨縂聪账苌总长迯]
    有拼音部分
[䀤㔰]
    无拼音部分
<<==:
grep '[外总长]' /sdcard/0my_files/tmp/out4py/script.hz.部件拆分..提取基本面编码空间里的汉字囗.out.txt | sort -t : -k 2
伥:a,亻,长,
外:a,夕,卜,
夞:a,外,𠮟,
帐:a,巾,长,
张:a,弓,长,
怅:a,忄,长,
搃:a,扌,总,
胀:a,月,长,
枨:a,木,长,
縂:a,糹,总,
聪:a,耳,总,
账:a,贝,长,
苌:d,卄,长,
䀤:d,外,目,
总:d,𠮦,心,
长:lock,37104,㇐,
⻓:me,长,
迯:sbl,辶,外,
㔰:sl,匚,外,
grep '[伥外夞帐张怅搃胀枨縂聪账苌䀤总长迯㔰]' /sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取拼音.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
伥:chang>chāng
苌:chang>cháng
迯:tao>táo
张:zhang>zhàng,zhāng
帐:zhang>zhàng
搃:zong>zǒng
外:wai>wài
夞:yi,xi>yi,xi
怅:chang>chàng
账:zhang>zhàng
长:chang,zhang>cháng,zhǎng
枨:cheng>chéng
总:zong>zǒng
胀:zhang>zhàng
聪:cong>cōng
縂:zong>zǒng

]]
######################
[[
[:搜索冫纟糹糸]:here
[纒縄緸緩織緃纄絕緖繌繊縁絔綂継緵綅糺絁紾繼糽紑紐組紲糾紈紸紇紓紆紜絙絚絞絯綧綡繵紟紒紨紷絍絥絵綸緱緶緥緰纀統絩絖絻綐絟緉綨縑納絅綗紞終絀糿紉紛糼約綯紣絆綼綷綽綣緾縓紘紶縿紁級綴緅綬縀絇紹紿絡給結絧絽綢綹緝緘緺縜繕繥繑繟繰繬絗絪綑経絓綞繞纆紝続絳綘綾緮紻紩絝綊綺縘綏緀緌縅縷纓綒綍紵紽綄綋綜綰綻綩縇縡縖縮縯紂縛縳繜紗緔繚紌純綱繀繃纗紃絒經繅紅縒紀紦繏絺綿締絣緈絋纏纊綖綎紖紼紭綈繈繦綠緑緣縦縰縱綛綕総緦緿緫縂緪縆總繐繶纋纞絨絾綫緎縬綟編繖繳紋緕紏紤紡縍縼絢緄緍緆緡緹緼縨縉絏綆縵繒繓繪絠綳絊絉絑綀綝綶緤練縔縧纅絘紪緞紕纔紙絿線緂繎繺纁縴紎紱絃繂紺細紬紳緇綥縪繙繣繮緁絈紴縊繿纑緗緲縝繉繯繹繘縹縩縭綉縥繍繗絲縤縲纝網纙絴繆緒緛繡綃絹緭縃絰緻縚絬絶縐緢緓縙縸繱絎縗纕絤絸纜繲綌絼緽績繢繽纉續纘緷縟繷縋縌縫縺繸繨繾綁綇緧綵緟繝維繧繻綪緋緬緙緯纎纖纐纈縎縞纚繩纃縕经绎练继纻缠纽组绁纠纨纥纾纡纭绞纵纶绘缑缏统缣纳纲终绌纫纷绉约绹纤绊绰续绻纮级缀绶织绍绐络给结绸绺缉缄缮缲缍纴绛绫绔绮绥缕缨综绾绽缤缩纣缚纱绱缭绕纯缫红纪绵缔纩纼绋绨绿缘缌线绒编缴纹纺绚绲缗缇缊缙绠缦缯绷绦缎纰纸缐缓绂绀细绅缁缰缢缃缈缜缳缥缡绣缧缪绪绡绢绖绝绬绗缞缆绤绩缋缵缛缒缝缱绑维绯缅缂纬缬缟绳銯縈紧索纟絜綦絫縶絮糹糸繠紥絷繁紊紮紫繄累纍緊縏繋繴綤素絭綮繫系縻辮辫]
    有拼音部分:562
[䋣䌯䌴䌪䌞䌱䌲䋝䌩䌨䌫䌜䌧䌐䌈䌭䌥䌄䌊䋔䋑䋏䊵䊶䋫䊸䊺䋁䋡䋱䋩䋄䋓䌃䌔䊹䋻䋍䋨䌅䌑䌍䊿䊽䋾䌏䋽䋇䋧䌂䌵䋌䋟䋬䋐䋆䊷䋎䋵䊾䋴䊻䊼䋊䋦䋃䋋䌗䋂䌤䋅䌳䋠䋿䋹䋼䋸䋒䌝䋺䌀䋉䌣䋛䌚䌇䋞䌉䋚䌌䌦䋘䋙䌰䋖䋭䋳䋗䌋䌁䌡䌟䋥䋮䋪䌖䌢䌮䋶䌆䌒䌕䌙䋲䌬䌸䌼䌹䌾䌶䌷䌿䍀䌻䌺䍁䌽䋷䔝䋜䋯䌓䌠䋕䋰䋈䋢䌘䌎䒺㬧䋀]
    无拼音部分:142

grep '[纟糹糸]' /sdcard/0my_files/tmp/out4py/script.hz.部件拆分..提取基本面编码空间里的汉字囗.out.txt | sort -t : -k 2
䋣:a,每,糸,
䌯:a,糹,12220,
䌴:a,糹,12249,
䌪:a,糹,12347,
䌞:a,糹,12353,
䌱:a,糹,12484,
纒:a,糹,15966,
䌲:a,糹,18201,
縄:a,糹,29554,
緸:a,糹,37025,
緩:a,糹,37039,
織:a,糹,37051,
緃:a,糹,37262,
䋝:a,糹,37289,
纄:a,糹,37433,
絕:a,糹,37475,
緖:a,糹,37567,
繌:a,糹,37605,
繊:a,糹,37989,
縁:a,糹,38015,
絔:a,糹,38488,
䌩:a,糹,39046,
綂:a,糹,42504,
䌨:a,糹,45215,
䌫:a,糹,59347,
継:a,糹,59366,
緵:a,糹,65106,
䌜:a,糹,65178,
綅:a,糹,65347,
䌧:a,糹,65412,
䌐:a,糹,90243,
䌈:a,糹,90444,
䌭:a,糹,91939,
糺:a,糹,㇟,
絁:a,糹,㐌,
紾:a,糹,㐱,
繼:a,糹,㡭,
䌥:a,糹,㥯,
䌄:a,糹,㪅,
䌊:a,糹,䍃,
糽:a,糹,丁,
紑:a,糹,不,
紐:a,糹,丑,
組:a,糹,且,
䋔:a,糹,丕,
紲:a,糹,世,
䋑:a,糹,丙,
糾:a,糹,丩,
紈:a,糹,丸,
紸:a,糹,主,
䋏:a,糹,乍,
䊵:a,糹,九,
紇:a,糹,乞,
䊶:a,糹,也,
紓:a,糹,予,
䋫:a,糹,争,
紆:a,糹,于,
䊸:a,糹,亏,
紜:a,糹,云,
䊺:a,糹,互,
絙:a,糹,亘,
絚:a,糹,亙,
䋁:a,糹,亢,
絞:a,糹,交,
絯:a,糹,亥,
綧:a,糹,享,
綡:a,糹,京,
繵:a,糹,亶,
紟:a,糹,今,
紒:a,糹,介,
紨:a,糹,付,
紷:a,糹,令,
絍:a,糹,任,
絥:a,糹,伏,
絵:a,糹,会,
䋡:a,糹,余,
䋱:a,糹,來,
綸:a,糹,侖,
緱:a,糹,侯,
緶:a,糹,便,
緥:a,糹,保,
緰:a,糹,俞,
纀:a,糹,僕,
統:a,糹,充,
絩:a,糹,兆,
絖:a,糹,光,
絻:a,糹,免,
綐:a,糹,兑,
䋩:a,糹,兒,
絟:a,糹,全,
緉:a,糹,兩,
綨:a,糹,其,
縑:a,糹,兼,
納:a,糹,内,
䋄:a,糹,冈,
絅:a,糹,冋,
綗:a,糹,冏,
紞:a,糹,冘,
終:a,糹,冬,
絀:a,糹,出,
糿:a,糹,刀,
紉:a,糹,刃,
紛:a,糹,分,
䋓:a,糹,刍,
䌃:a,糹,削,
糼:a,糹,力,
約:a,糹,勺,
綯:a,糹,匋,
䌔:a,糹,區,
䊹:a,糹,千,
紣:a,糹,卆,
絆:a,糹,半,
綼:a,糹,卑,
綷:a,糹,卒,
綽:a,糹,卓,
䋻:a,糹,南,
綣:a,糹,卷,
緾:a,糹,厘,
縓:a,糹,原,
紘:a,糹,厷,
紶:a,糹,去,
縿:a,糹,參,
紁:a,糹,叉,
級:a,糹,及,
綴:a,糹,叕,
緅:a,糹,取,
綬:a,糹,受,
縀:a,糹,叚,
絇:a,糹,句,
紹:a,糹,召,
䋍:a,糹,可,
紿:a,糹,台,
絡:a,糹,各,
給:a,糹,合,
結:a,糹,吉,
絧:a,糹,同,
絽:a,糹,吕,
綢:a,糹,周,
䋨:a,糹,咅,
綹:a,糹,咎,
緝:a,糹,咠,
緘:a,糹,咸,
緺:a,糹,咼,
縜:a,糹,員,
䌅:a,糹,唐,
繕:a,糹,善,
繥:a,糹,喜,
繑:a,糹,喬,
繟:a,糹,單,
繰:a,糹,喿,
繬:a,糹,嗇,
絗:a,糹,回,
絪:a,糹,因,
綑:a,糹,困,
経:a,糹,圣,
絓:a,糹,圭,
綞:a,糹,垂,
䌑:a,糹,堅,
䌍:a,糹,堇,
繞:a,糹,堯,
纆:a,糹,墨,
紝:a,糹,壬,
続:a,糹,売,
絳:a,糹,夅,
綘:a,糹,夆,
綾:a,糹,夌,
緮:a,糹,复,
䊿:a,糹,夫,
䊽:a,糹,夬,
紻:a,糹,央,
紩:a,糹,失,
絝:a,糹,夸,
綊:a,糹,夾,
綺:a,糹,奇,
䋾:a,糹,奓,
縘:a,糹,奚,
綏:a,糹,妥,
緀:a,糹,妻,
緌:a,糹,委,
縅:a,糹,威,
縷:a,糹,婁,
纓:a,糹,嬰,
綒:a,糹,孚,
綍:a,糹,孛,
紵:a,糹,宁,
紽:a,糹,它,
綄:a,糹,完,
綋:a,糹,宏,
綜:a,糹,宗,
綰:a,糹,官,
綻:a,糹,定,
綩:a,糹,宛,
縇:a,糹,宣,
縡:a,糹,宰,
縖:a,糹,害,
縮:a,糹,宿,
縯:a,糹,寅,
䌏:a,糹,密,
紂:a,糹,寸,
䋽:a,糹,封,
縛:a,糹,尃,
縳:a,糹,專,
繜:a,糹,尊,
紗:a,糹,少,
緔:a,糹,尚,
繚:a,糹,尞,
紌:a,糹,尤,
䋇:a,糹,尺,
䋧:a,糹,居,
䌂:a,糹,屋,
䌵:a,糹,屬,
純:a,糹,屯,
綱:a,糹,岡,
繀:a,糹,崔,
繃:a,糹,崩,
纗:a,糹,巂,
紃:a,糹,川,
絒:a,糹,州,
經:a,糹,巠,
繅:a,糹,巢,
紅:a,糹,工,
䋌:a,糹,巨,
縒:a,糹,差,
紀:a,糹,己,
紦:a,糹,巴,
繏:a,糹,巽,
絺:a,糹,希,
綿:a,糹,帛,
締:a,糹,帝,
絣:a,糹,并,
緈:a,糹,幸,
絋:a,糹,広,
纏:a,糹,廛,
纊:a,糹,廣,
綖:a,糹,延,
綎:a,糹,廷,
紖:a,糹,引,
紼:a,糹,弗,
紭:a,糹,弘,
綈:a,糹,弟,
繈:a,糹,強,
繦:a,糹,强,
綠:a,糹,彔,
緑:a,糹,录,
緣:a,糹,彖,
縦:a,糹,従,
縰:a,糹,徙,
縱:a,糹,從,
䋟:a,糹,忌,
綛:a,糹,忍,
綕:a,糹,志,
䋬:a,糹,忝,
総:a,糹,忩,
緦:a,糹,思,
緿:a,糹,怠,
緫:a,糹,怱,
縂:a,糹,总,
緪:a,糹,恆,
縆:a,糹,恒,
總:a,糹,悤,
繐:a,糹,惠,
繶:a,糹,意,
纋:a,糹,憂,
纞:a,糹,戀,
䋐:a,糹,戉,
絨:a,糹,戎,
絾:a,糹,成,
綫:a,糹,戔,
緎:a,糹,或,
縬:a,糹,戚,
䋆:a,糹,户,
綟:a,糹,戾,
編:a,糹,扁,
䊷:a,糹,才,
繖:a,糹,散,
繳:a,糹,敫,
紋:a,糹,文,
緕:a,糹,斉,
紏:a,糹,斗,
紤:a,糹,斤,
紡:a,糹,方,
縍:a,糹,旁,
縼:a,糹,旋,
䋎:a,糹,旦,
絢:a,糹,旬,
緄:a,糹,昆,
緍:a,糹,昏,
緆:a,糹,易,
緡:a,糹,昬,
緹:a,糹,是,
緼:a,糹,昷,
縨:a,糹,晃,
縉:a,糹,晋,
絏:a,糹,曳,
綆:a,糹,更,
䋵:a,糹,曷,
縵:a,糹,曼,
繒:a,糹,曾,
繓:a,糹,最,
繪:a,糹,會,
絠:a,糹,有,
綳:a,糹,朋,
䊾:a,糹,木,
絊:a,糹,本,
絉:a,糹,术,
絑:a,糹,朱,
綀:a,糹,束,
綝:a,糹,林,
綶:a,糹,果,
緤:a,糹,枼,
䋴:a,糹,柔,
練:a,糹,柬,
縔:a,糹,桑,
縧:a,糹,條,
纅:a,糹,樂,
䊻:a,糹,欠,
絘:a,糹,次,
䊼:a,糹,止,
䋊:a,糹,正,
紪:a,糹,此,
緞:a,糹,段,
䋦:a,糹,每,
紕:a,糹,比,
纔:a,糹,毚,
䋃:a,糹,毛,
紙:a,糹,氏,
䋋:a,糹,民,
絿:a,糹,求,
線:a,糹,泉,
緂:a,糹,炎,
䌗:a,糹,無,
繎:a,糹,然,
繺:a,糹,煞,
纁:a,糹,熏,
䋂:a,糹,爻,
䌤:a,糹,爾,
䋅:a,糹,牛,
縴:a,糹,牽,
紎:a,糹,犬,
紱:a,糹,犮,
絃:a,糹,玄,
繂:a,糹,率,
䌳:a,糹,璽,
紺:a,糹,甘,
䋠:a,糹,甫,
細:a,糹,田,
紬:a,糹,由,
紳:a,糹,申,
緇:a,糹,甾,
綥:a,糹,畀,
䋿:a,糹,畏,
䋹:a,糹,畐,
縪:a,糹,畢,
繙:a,糹,番,
繣:a,糹,畫,
繮:a,糹,畺,
緁:a,糹,疌,
絈:a,糹,白,
紴:a,糹,皮,
䋼:a,糹,盈,
縊:a,糹,益,
繿:a,糹,監,
纑:a,糹,盧,
緗:a,糹,相,
䋸:a,糹,盾,
緲:a,糹,眇,
縝:a,糹,真,
繉:a,糹,眺,
繯:a,糹,睘,
繹:a,糹,睪,
䋒:a,糹,矛,
繘:a,糹,矞,
縹:a,糹,票,
縩:a,糹,祭,
䌝:a,糹,禁,
縭:a,糹,离,
綉:a,糹,秀,
䋺:a,糹,秋,
䌀:a,糹,科,
縥:a,糹,秦,
䋉:a,糹,穴,
䌣:a,糹,管,
䋛:a,糹,米,
繍:a,糹,粛,
䌚:a,糹,粟,
繗:a,糹,粦,
絲:a,糹,糸,
縤:a,糹,素,
䌇:a,糹,索,
縲:a,糹,累,
纝:a,糹,纍,
䋞:a,糹,网,
網:a,糹,罔,
䌉:a,糹,罡,
纙:a,糹,羅,
絴:a,糹,羊,
䋚:a,糹,羽,
繆:a,糹,翏,
䌌:a,糹,習,
䌦:a,糹,翟,
緒:a,糹,者,
緛:a,糹,耎,
䋘:a,糹,耒,
䋙:a,糹,耳,
䌰:a,糹,聶,
䋖:a,糹,聿,
繡:a,糹,肅,
綃:a,糹,肖,
絹:a,糹,肙,
䋭:a,糹,育,
緭:a,糹,胃,
䋳:a,糹,背,
縃:a,糹,胥,
䋗:a,糹,臣,
絰:a,糹,至,
緻:a,糹,致,
縚:a,糹,舀,
絬:a,糹,舌,
絶:a,糹,色,
縐:a,糹,芻,
緢:a,糹,苗,
緓:a,糹,英,
縙:a,糹,茸,
䌋:a,糹,荅,
縸:a,糹,莫,
繱:a,糹,葱,
絎:a,糹,行,
縗:a,糹,衰,
纕:a,糹,襄,
絤:a,糹,西,
䌁:a,糹,要,
絸:a,糹,見,
纜:a,糹,覽,
繲:a,糹,解,
綌:a,糹,谷,
䌡:a,糹,豊,
絼:a,糹,豸,
緽:a,糹,貞,
績:a,糹,責,
繢:a,糹,貴,
繽:a,糹,賓,
纉:a,糹,賛,
續:a,糹,賣,
纘:a,糹,贊,
緷:a,糹,軍,
䌟:a,糹,辟,
縟:a,糹,辱,
繷:a,糹,農,
縋:a,糹,追,
縌:a,糹,逆,
縫:a,糹,逢,
縺:a,糹,連,
繸:a,糹,遂,
繨:a,糹,達,
繾:a,糹,遣,
綁:a,糹,邦,
綇:a,糹,酉,
緧:a,糹,酋,
綵:a,糹,采,
䋥:a,糹,里,
緟:a,糹,重,
䋮:a,糹,金,
繝:a,糹,閒,
䋪:a,糹,阿,
維:a,糹,隹,
䌖:a,糹,集,
繧:a,糹,雲,
䌢:a,糹,零,
繻:a,糹,需,
䌮:a,糹,霜,
綪:a,糹,青,
緋:a,糹,非,
緬:a,糹,面,
緙:a,糹,革,
緯:a,糹,韋,
纎:a,糹,韯,
纖:a,糹,韱,
䋶:a,糹,頁,
纐:a,糹,頝,
纈:a,糹,頡,
縎:a,糹,骨,
縞:a,糹,高,
䌆:a,糹,鬼,
䌒:a,糹,鹿,
纚:a,糹,麗,
䌕:a,糹,麻,
䌙:a,糹,黄,
繩:a,糹,黽,
䋲:a,糹,黾,
纃:a,糹,齊,
䌬:a,糹,龍,
縕:a,糹,𥁕,
经:a,纟,37030,
绎:a,纟,37071,
练:a,纟,37276,
继:a,纟,59366,
纻:a,纟,㝉,
缠:a,纟,㢆,
纽:a,纟,丑,
䌸:a,纟,专,
组:a,纟,且,
绁:a,纟,世,
纠:a,纟,丩,
纨:a,纟,丸,
纥:a,纟,乞,
纾:a,纟,予,
纡:a,纟,于,
纭:a,纟,云,
绞:a,纟,交,
纵:a,纟,从,
纶:a,纟,仑,
绘:a,纟,会,
缑:a,纟,侯,
缏:a,纟,便,
统:a,纟,充,
䌼:a,纟,兑,
缣:a,纟,兼,
纳:a,纟,内,
纲:a,纟,冈,
䌹:a,纟,冋,
终:a,纟,冬,
绌:a,纟,出,
纫:a,纟,刃,
纷:a,纟,分,
绉:a,纟,刍,
约:a,纟,勺,
绹:a,纟,匋,
纤:a,纟,千,
绊:a,纟,半,
绰:a,纟,卓,
续:a,纟,卖,
䌾:a,纟,南,
绻:a,纟,卷,
纮:a,纟,厷,
级:a,纟,及,
缀:a,纟,叕,
绶:a,纟,受,
织:a,纟,只,
绍:a,纟,召,
绐:a,纟,台,
络:a,纟,各,
给:a,纟,合,
结:a,纟,吉,
绸:a,纟,周,
绺:a,纟,咎,
缉:a,纟,咠,
缄:a,纟,咸,
缮:a,纟,善,
缲:a,纟,喿,
缍:a,纟,垂,
纴:a,纟,壬,
绛:a,纟,夅,
绫:a,纟,夌,
绔:a,纟,夸,
绮:a,纟,奇,
绥:a,纟,妥,
缕:a,纟,娄,
缨:a,纟,婴,
综:a,纟,宗,
绾:a,纟,官,
绽:a,纟,定,
缤:a,纟,宾,
缩:a,纟,宿,
纣:a,纟,寸,
缚:a,纟,尃,
纱:a,纟,少,
绱:a,纟,尚,
缭:a,纟,尞,
绕:a,纟,尧,
纯:a,纟,屯,
缫:a,纟,巢,
红:a,纟,工,
纪:a,纟,己,
绵:a,纟,帛,
缔:a,纟,帝,
纩:a,纟,广,
纼:a,纟,引,
绋:a,纟,弗,
绨:a,纟,弟,
绿:a,纟,录,
缘:a,纟,彖,
缌:a,纟,思,
线:a,纟,戋,
绒:a,纟,戎,
编:a,纟,扁,
䌶:a,纟,才,
缴:a,纟,敫,
纹:a,纟,文,
纺:a,纟,方,
绚:a,纟,旬,
绲:a,纟,昆,
缗:a,纟,昬,
缇:a,纟,是,
缊:a,纟,昷,
缙:a,纟,晋,
绠:a,纟,更,
缦:a,纟,曼,
缯:a,纟,曾,
绷:a,纟,朋,
绦:a,纟,条,
缎:a,纟,段,
纰:a,纟,比,
纸:a,纟,氏,
缐:a,纟,泉,
缓:a,纟,爰,
绂:a,纟,犮,
绀:a,纟,甘,
细:a,纟,田,
䌷:a,纟,由,
绅:a,纟,申,
缁:a,纟,甾,
䌿:a,纟,畐,
缰:a,纟,畺,
缢:a,纟,益,
䍀:a,纟,监,
缃:a,纟,相,
缈:a,纟,眇,
缜:a,纟,真,
缳:a,纟,睘,
缥:a,纟,票,
缡:a,纟,离,
绣:a,纟,秀,
缧:a,纟,累,
䌻:a,纟,羽,
缪:a,纟,翏,
绪:a,纟,者,
䌺:a,纟,耳,
绡:a,纟,肖,
绢:a,纟,肙,
绖:a,纟,至,
绝:a,纟,色,
绬:a,纟,英,
绗:a,纟,行,
缞:a,纟,衰,
缆:a,纟,览,
绤:a,纟,谷,
绩:a,纟,责,
缋:a,纟,贵,
缵:a,纟,赞,
缛:a,纟,辱,
缒:a,纟,追,
缝:a,纟,逢,
䍁:a,纟,遂,
缱:a,纟,遣,
绑:a,纟,邦,
䌽:a,纟,采,
维:a,纟,隹,
绯:a,纟,非,
缅:a,纟,面,
缂:a,纟,革,
纬:a,纟,韦,
缬:a,纟,颉,
缟:a,纟,高,
绳:a,纟,黾,
銯:a,金,糸,
縈:d,37027,糸,
紧:d,37144,糸,
索:d,37400,糸,
䋷:d,46156,糸,
䔝:d,92577,糸,
䋜:d,97767,糸,
䋯:d,97768,糸,
䌓:d,97769,糸,
纟:d,99836,㇐,
絜:d,㓞,糸,
䌠:d,㰹,糸,
䋕:d,任,糸,
綦:d,其,糸,
䋰:d,具,糸,
絫:d,厽,糸,
縶:d,執,糸,
䋈:d,奴,糸,
絮:d,如,糸,
糹:d,幺,37546,
糸:d,幺,小,
繠:d,惢,糸,
紥:d,扎,糸,
絷:d,执,糸,
䋢:d,折,糸,
繁:d,敏,糸,
䌘:d,敝,糸,
紊:d,文,糸,
紮:d,札,糸,
紫:d,此,糸,
繄:d,殹,糸,
累:d,田,糸,
䌎:d,略,糸,
纍:d,畾,糸,
緊:d,臤,糸,
縏:d,般,糸,
䒺:d,艹,糸,
繋:d,軗,糸,
繴:d,辟,糸,
綤:d,邵,糸,
素:d,龶,糸,
絭:d,龹,糸,
綮:d,𢼄,糸,
㬧:d,𣅽,大,糸,
繫:d,𣪠,糸,
系:d/t,㇒,糸,
䋀:stl,户,糸,
縻:stl,麻,糸,
辮:w,辡,糸,
辫:w,辡,纟,
grep '[䋣䌯䌴䌪䌞䌱纒䌲縄緸緩織緃䋝纄絕緖繌繊縁絔䌩綂䌨䌫継緵䌜綅䌧䌐䌈䌭糺絁紾繼䌥䌄䌊糽紑紐組䋔紲䋑糾紈紸䋏䊵紇䊶紓䋫紆䊸紜䊺絙絚䋁絞絯綧綡繵紟紒紨紷絍絥絵䋡䋱綸緱緶緥緰纀統絩絖絻綐䋩絟緉綨縑納䋄絅綗紞終絀糿紉紛䋓䌃糼約綯䌔䊹紣絆綼綷綽䋻綣緾縓紘紶縿紁級綴緅綬縀絇紹䋍紿絡給結絧絽綢䋨綹緝緘緺縜䌅繕繥繑繟繰繬絗絪綑経絓綞䌑䌍繞纆紝続絳綘綾緮䊿䊽紻紩絝綊綺䋾縘綏緀緌縅縷纓綒綍紵紽綄綋綜綰綻綩縇縡縖縮縯䌏紂䋽縛縳繜紗緔繚紌䋇䋧䌂䌵純綱繀繃纗紃絒經繅紅䋌縒紀紦繏絺綿締絣緈絋纏纊綖綎紖紼紭綈繈繦綠緑緣縦縰縱䋟綛綕䋬総緦緿緫縂緪縆總繐繶纋纞䋐絨絾綫緎縬䋆綟編䊷繖繳紋緕紏紤紡縍縼䋎絢緄緍緆緡緹緼縨縉絏綆䋵縵繒繓繪絠綳䊾絊絉絑綀綝綶緤䋴練縔縧纅䊻絘䊼䋊紪緞䋦紕纔䋃紙䋋絿線緂䌗繎繺纁䋂䌤䋅縴紎紱絃繂䌳紺䋠細紬紳緇綥䋿䋹縪繙繣繮緁絈紴䋼縊繿纑緗䋸緲縝繉繯繹䋒繘縹縩䌝縭綉䋺䌀縥䋉䌣䋛繍䌚繗絲縤䌇縲纝䋞網䌉纙絴䋚繆䌌䌦緒緛䋘䋙䌰䋖繡綃絹䋭緭䋳縃䋗絰緻縚絬絶縐緢緓縙䌋縸繱絎縗纕絤䌁絸纜繲綌䌡絼緽績繢繽纉續纘緷䌟縟繷縋縌縫縺繸繨繾綁綇緧綵䋥緟䋮繝䋪維䌖繧䌢繻䌮綪緋緬緙緯纎纖䋶纐纈縎縞䌆䌒纚䌕䌙繩䋲纃䌬縕经绎练继纻缠纽䌸组绁纠纨纥纾纡纭绞纵纶绘缑缏统䌼缣纳纲䌹终绌纫纷绉约绹纤绊绰续䌾绻纮级缀绶织绍绐络给结绸绺缉缄缮缲缍纴绛绫绔绮绥缕缨综绾绽缤缩纣缚纱绱缭绕纯缫红纪绵缔纩纼绋绨绿缘缌线绒编䌶缴纹纺绚绲缗缇缊缙绠缦缯绷绦缎纰纸缐缓绂绀细䌷绅缁䌿缰缢䍀缃缈缜缳缥缡绣缧䌻缪绪䌺绡绢绖绝绬绗缞缆绤绩缋缵缛缒缝䍁缱绑䌽维绯缅缂纬缬缟绳銯縈紧索䋷䔝䋜䋯䌓纟絜䌠䋕綦䋰絫縶䋈絮糹糸繠紥絷䋢繁䌘紊紮紫繄累䌎纍緊縏䒺繋繴綤素絭綮㬧繫系䋀縻辮辫]' /sdcard/0my_files/tmp/out4py/汉语字典囗.py..仅提取拼音.withoutNULL..nn_ns.fileformat.sqlite3_dump_cmd.out.txt
纟:si>sī
纠:jiu>jiū
纥:ge,he>gē,hé
红:gong,hong>gōng,hóng
级:ji>jí
纪:ji>jì,jǐ
纩:kuang>kuàng
纤:qian,xian>qiàn,xiān
纫:ren>rèn
纨:wan>wán
约:yao,yue>yāo,yuē
纡:yu>yū
纣:zhou>zhòu
纯:chun>chún
纺:fang>fǎng
纲:gang>gāng
纶:guan,lun>guān,lún
纮:hong>hóng
纳:na>nà
纽:niu>niǔ
纰:pi>pí,pī
纴:ren>rèn
纱:sha>shā
纾:shu>shū
纬:wei>wěi
纹:wen>wén
纭:yun>yún
纼:zhen>zhèn
纸:zhi>zhǐ
纻:zhu>zhù
纵:zong>zòng
绊:ban>bàn
绌:chu>chù
绐:dai>dài
绂:fu>fú
绋:fu>fú
绀:gan>gàn
经:jing>jìng,jīng
练:lian>liàn
绍:shao>shào
绅:shen>shēn
细:xi>xì
线:xian>xiàn
绁:xie>xiè
绎:yi>yì
织:zhi>zhì,zhī
终:zhong>zhōng
绉:zhou>zhòu
组:zu>zǔ
绑:bang>bǎng
绖:die>dié
给:gei,ji>gěi,jǐ
绗:hang>háng
绘:hui>huì
绛:jiang>jiàng
绞:jiao>jiǎo
结:jie>jié,jiē
绝:jue>jué
绔:ku>kù
络:lao,luo>lào,luò
绕:rao>rào
绒:rong>róng
统:tong>tǒng
绚:xuan>xuàn
绠:bing,geng>bǐng,gěng
继:ji>jì
绢:juan>juàn
绥:sui>suí
绦:tao>tāo
绨:ti>tí,tì
绤:xi>xì
绡:xiao>xiāo
绣:xiu>xiù
绷:beng>bèng,běng,bēng
绰:chao,chuo>chāo,chuo,chuò
绸:chou>chóu
绯:fei>fēi
绲:gun>gǔn
绩:ji>jì
绫:ling>líng
绺:liu>liǔ
绿:lu,lv>lù,lǜ
绵:mian>mián
绮:qi>qǐ
绻:quan>quǎn
绱:shang>shàng
绳:sheng>shéng
绶:shou>shòu
绾:wan>wǎn
维:wei>wéi
绪:xu>xù
续:xu>xù
综:zeng,zong>zèng,zōng
绽:zhan>zhàn
缀:zhui>zhuì
缁:zi>zī
绹:tao>táo
缍:duo>duǒ
绬:ying>yīng
编:bian>biān
缏:bian,pian>biàn,pián
缔:di>dì
缎:duan>duàn
缑:gou>gōu
缓:huan>huǎn
缋:hui>huì
缉:ji,qi>jī,qī
缄:jian>jiān
缂:ke>kè
缆:lan>lǎn
缕:lv>lǚ
缅:mian>miǎn
缈:miao>miǎo
缗:min>mín
缌:si>sī
缇:ti>tí
缐:xian>xiàn
缃:xiang>xiāng
缘:yuan>yuán,yuàn
缊:yun>yùn,yūn
缒:zhui>zhuì
缤:bin>bīn
缠:chan>chán
缞:cui>cuī
缝:feng>féng,fèng
缚:fu>fù
缟:gao>gǎo
缙:jin>jìn
缡:li>lí
缛:ru>rù
缢:yi>yì
缜:zhen>zhěn
缣:jian>jiān
缧:lei>léi
缦:man>màn
缪:miao,miu,mou>miào,miù,móu
缥:piao>piǎo,piāo
缫:sao>sāo
缩:su,suo>sù,suō
缨:ying>yīng
缭:liao>liáo
缮:shan>shàn
缬:xie>xié
缯:zeng>zèng,zēng
缳:huan>huán
缰:jiang>jiāng
缴:jiao,zhuo>jiǎo,zhuó
缱:qian>qiǎn
缲:qiao>qiāo
缵:zuan>zuǎn
糸:mi>mì
系:ji,xi>jì,xì
紧:jin>jǐn
素:su>sù
索:suo>suǒ
紊:wen>wěn
紥:zha>zhā
累:lei>léi,lèi,lěi
紮:zha>zhā
絜:jie,xie>jié,xié
絮:xu>xù
絷:zhi>zhí
紫:zi>zǐ
絭:juan>juàn
絫:lei>lěi
綤:shao>shào
綦:qi>qí
綮:qi,qing>qǐ,qìng
緊:jin>jǐn
縏:pan>pán
縈:ying>yíng
繁:fan,po>fán,pó
縻:mi>mí
繄:yi>yī
縶:zhi>zhí
繋:ji>jì
繠:rui>ruǐ
繴:bi>bì
繫:xi>xì
纍:lei>léi
糹:si>sī
糺:jiu>jiū
糾:jiu>jiū
糼:gong>gōng
糿:gong>gōng
糽:zheng>zhēng
紃:xun>xún
紆:yu>yū
紅:hong>hóng
紂:zhou>zhòu
紇:he>hé
紈:wan>wán
約:yue>yuē
級:ji>jí
紀:ji>jì
紉:ren>rèn
紁:cha>chà
紞:dan>dǎn
紟:jin>jīn
紕:pi>pī
紜:yun>yún
純:chun>chún
紘:hong>hóng
納:na>nà
紗:sha>shā
紝:ren>rèn
紙:zhi>zhǐ
紋:wen>wén
紡:fang>fǎng
紐:niu>niǔ
紖:zhen>zhèn
紦:ha>hā
紣:cui>cuì
紑:fou>fóu
紒:ji>jì
紤:jiu>jiǔ
紌:qiu>qiú
紓:shu>shū
紏:tou>tǒu
紎:zi>zī
紬:chou>chóu,chōu
絅:jiong>jiǒng
絁:shi>shī
紩:zhi>zhì
紺:gan>gàn
紲:xie>xiè
紱:fu>fú
組:zu>zǔ
紳:shen>shēn
細:xi>xì
紾:zhen>zhěn
終:zhong>zhōng
紵:zhu>zhù
絃:xian>xián
絆:ban>bàn
紿:dai>dài
紼:fu>fú
絀:chu>chù
紹:shao>shào
紴:bo>bō
紨:fu>fū
紭:hong>hóng
経:jing>jīng
絋:kuang>kuàng
紷:ling>líng
絈:mo>mò
紶:qu>qū
絇:qu>qú
絉:shu>shù
紽:tuo>tuó
紻:yang>yǎng
紸:zhu>zhù
絊:zui>zuì
絣:beng>bēng
絓:gua>guà
結:jie>jié
絡:luo>luò
絪:yin>yīn
絑:zhu>zhū
綁:bang>bǎng
絨:rong>róng
絝:ku>kù
絰:die>dié
絚:geng>gēng
絏:xie>xiè
給:gei>gěi
絳:jiang>jiàng
絶:jue>jué
絍:ren>rèn
絢:xuan>xuàn
絎:hang>háng
絞:jiao>jiǎo
統:tong>tǒng
絲:si>sī
絠:gai>gǎi
絔:bai>bǎi
絾:cheng>chéng
絒:chou>chóu
絘:ci>cì
絩:tiao>tiào
絧:tong>tōng
絥:fu>fú
絯:gai>gāi
絙:huan>huán
絵:hui>huì
絗:hu>hú
絕:jue>jué
絖:kuang>kuàng
絽:lv>lǚ
紪:qi>qī
絟:quan>quán
綎:ting>tīng
絤:xian>xiàn
綖:yan>yán
絴:xiang>xiáng
絬:xie>xiè
絺:chi>chī
絻:wen>wèn
綗:jiong>jiǒng
綆:geng>gěng
綀:shu>shū
經:jing>jīng
綃:xiao>xiāo
絸:jian>jiǎn
絹:juan>juàn
綑:kun>kǔn
綏:sui>suí
綉:xiu>xiù
綌:xi>xì
綈:ti>tí
綐:dui>duì
綘:feng>féng
綍:fu>fú
綒:fu>fū
綋:hong>hóng
綄:huan>huán
継:ji>jì
綅:qin>qīn
絿:qiu>qiú
綛:ka,sei>ka,sei
綂:tong>tǒng
綊:xie>xié
綇:xu>xū
続:xu>xù
絼:zhen>zhèn
綕:zhi>zhī
綵:cai>cǎi
綝:chen>chēn
綷:cui>cuì
緺:gua>guā
緉:liang>liǎng
綪:qian>qiàn
緌:rui>ruí
綯:tao>táo
緅:zou>zōu
綾:ling>líng
緒:xu>xù
綫:xian>xiàn
綺:qi>qǐ
緋:fei>fēi
緔:shang>shàng
綽:chuo>chuò
綥:qi>qí
網:wang>wǎng
綱:gang>gāng
緄:gun>gǔn
綬:shou>shòu
綸:lun>lún
綳:beng>bēng
綹:liu>liǔ
綢:chou>chóu
維:wei>wéi
綿:mian>mián
綜:zong>zōng
綻:zhan>zhàn
綰:wan>wǎn
綣:quan>quǎn
綠:lv>lǜ
緇:zi>zī
綴:zhui>zhuì
緍:min>mín
綼:bi>bì
緂:tian>tián
総:zong>zǒng
綞:duo>duǒ
綶:guo>guǒ
綟:li>lì
綡:jing>jīng
緑:lv>lǜ
緢:miao>miáo
綨:ji>jī
緀:qi>qī
緕:zi>zī
緁:ji>jī
綩:wan>wǎn
緆:xi>xī
緈:xing>xìng
緓:ying>yīng
緎:yu>yù
綧:zhun>zhǔn
緃:zong>zōng
縆:geng>gēng
緘:jian>jiān
緛:ruan>ruǎn
緼:wen>wēn
緰:xu>xū
緙:ke>kè
緗:xiang>xiāng
練:lian>liàn
緬:mian>miǎn
緲:miao>miǎo
緹:ti>tí
緝:ji>jī
緦:si>sī
緩:huan>huǎn
緞:duan>duàn
緶:bian>biàn
線:xian>xiàn
緥:bao>bǎo
縋:zhui>zhuì
緱:gou>gōu
締:di>dì
縂:zong>zǒng
編:bian>biān
緪:geng>gēng
縁:yuan>yuán
緯:wei>wěi
緾:chan>chán
緽:cheng>chēng
緟:chong>chóng
縒:ci>cī
緫:zong>zǒng
緿:dai>dài
緮:fu>fù
縎:gu>gǔ
緷:gun>gǔn
緡:min>mín
縌:ni>nì
緧:qiu>qiū
縙:rong>róng
縇:se,o,ne>se,o,ne
縄:sheng>shéng
緭:wei>wèi
縅:ou,duo,xi>oǔ,duō,xī
縀:xie>xié
緤:xie>xiè
緖:xu>xù
縃:xu>xū
緸:yin>yīn
緣:yuan>yuán
緵:zong>zōng
縑:jian>jiān
縓:quan>quàn
縚:tao>tāo
縛:fu>fù
縝:zhen>zhěn
縟:ru>rù
緻:zhi>zhì
縉:jin>jìn
縧:tao>tāo
縫:feng>féng
縭:li>lí
縗:cui>cuī
縞:gao>gǎo
縊:yi>yì
縍:bang>bāng
縪:bi>bì
縐:zhou>zhòu
縦:zong>zòng
縨:huang,ho,ro>huang,ho,ro
縘:xi>xì
縺:lian>lián
縸:mu>mù
縔:shuang>shuǎng
縤:su>sù
縕:yun>yùn
縖:xia>xiá
縜:yun>yún
縡:zai>zài
縥:zhen>zhěn
縩:cai>cài
繀:sui>suì
縯:yan>yǎn
績:ji>jì
縹:piao>piǎo
縷:lv>lǚ
縵:man>màn
繃:beng>bēng
總:zong>zǒng
縱:zong>zòng
縴:qian>qiàn
縮:suo>suō
繆:mou>móu
繅:sao>sāo
繈:qiang>qiǎng
縬:cu>cù
繉:sheng>shéng
縳:zhuan>zhuàn
縲:lei>léi
繂:lv>lǜ
縿:shan>shān
繌:zong>zōng
縰:xi>xǐ
繊:xian>xiān
繍:xiu>xiù
縼:xuan>xuàn
繟:chan>chǎn
繨:da>da
繙:fan>fān
繦:qiang>qiǎng
繐:sui>suì
繸:sui>suì
繞:rao>rào
繚:liao>liáo
織:zhi>zhī
繕:shan>shàn
繒:zeng>zēng
繩:sheng>shéng
繱:cong>cōng
繣:hua>huà
繢:hui>huì
繝:jian>jiàn
繑:qiao>qiāo
繘:ju>jú
繗:lin>lín
繎:ran>rán
繖:san>sǎn
繥:xi>xī
繏:xuan>xuàn
繧:wen>wén
繜:zun>zūn
繓:zuo>zuǒ
繮:jiang>jiāng
繯:huan>huán
繾:qian>qiǎn
繰:qiao>qiāo
繪:hui>huì
繳:jiao>jiǎo
繡:xiu>xiù
繵:dan>dàn
繲:xie>xiè
繷:nong>nǒng
纄:peng>péng
繬:se>sè
繺:sha>shā
繹:yi>yì
繶:yi>yì
纀:pu>pú
繻:xu>xū
纁:xun>xūn
繽:bin>bīn
纊:kuang>kuàng
繼:ji>jì
繿:lan>lán
纃:zi>zī
纆:mo>mò
纈:xie>xiè
續:xu>xù
纎:xian>xiān
纏:chan>chán
纐:ko,o>ko,o
纅:yao>yào
纋:you>yōu
纉:zuan>zuǎn
纑:lu>lú
纒:chan>chán
纓:ying>yīng
纔:cai>cái
纖:xian>xiān
纕:xiang>xiāng
纗:zui>zuī
纘:zuan>zuǎn
纚:li>lí
纙:luo>luò
纝:lei>léi
纜:lan>lǎn
纞:lian>liàn
辫:bian>biàn
辮:bian>biàn
銯:ka,si,ga,yi>kǎ,sī,gā,yī
紛:fen>fēn
纷:fen>fēn

]]
######################
[[
[:搜索冫幺]:here
grep '[幺]' /sdcard/0my_files/tmp/out4py/script.hz.部件拆分..提取基本面编码空间里的汉字囗.out.txt | sort -t : -k 2
吆:a,口,幺,
鴢:a,幺,37378,
幻:a,幺,㇆,
乣:a,幺,㇟,
㓜:a,幺,刀,
幼:a,幺,力,
㡫:a,幺,曷,
㭃:a,木,幺,
糹:d,幺,37546,
糸:d,幺,小,
⺯:d,幺,𡭔,
玄:d/t,亠,幺,
⺓:me,幺,
麼:stl,麻,幺,
幺:wbr,99836,㇔,
]]
######################

]]]





old:旧版推导:
[[
###分裂冫防震荡冫滴血重生:[最小节点数纟翅膀+2 <= 最小节点数纟更深节点]
分裂冫防震荡冫滴血重生:[最小节点数纟翅膀+1+I <= 最小节点数纟更深节点]
合并冫覆盖:[最小节点数纟翅膀*2 >= 最小节点数纟更深节点 >= 2][最小节点数纟更深节点*2 <= 1+最大节点数纟更深节点]
深度有限性:[最小节点数纟翅膀 >= 1]
树状非线性:[最小节点数纟更深节点 >= 2]
压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
简化退化:[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树]
  #蕴含:进化冫防震荡:[最小节点数纟翅膀*2+2 <= 1+最大节点数纟光杆树]
简化进化:[1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
==>>:
[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
[最小节点数纟翅膀+2 <= 最大节点数纟光杆树-最大节点数纟翅膀+3 <= 最大节点数纟翅膀]
[最小节点数纟翅膀+2 <= 最大节点数纟翅膀]
    # <<==被蕴含:压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
==>>:
!! [最小节点数纟翅膀+1+I <= 最小节点数纟更深节点 <= 最小节点数纟翅膀*2]
[最小节点数纟翅膀 >= 1+I]
==>>:
[u,v,w,m,n >= 0]
[0 <= I <= 1]
[最小节点数纟翅膀 == (1+I+u+v)]
!! [2+2*I+u+v == (1+I)+(1+I+u+v) <= 最小节点数纟更深节点 <= 2*(1+I+u+v) == 2+2*I+2*u+2*v]
[最小节点数纟更深节点 == (2+2*I+u+2*v)]
!! [最大节点数纟更深节点-w == 2*(2+2*I+u+2*v)-1 == 3+4*I+2*u+4*v]
[最大节点数纟更深节点 == (3+4*I+2*u+4*v+w)]
!! [最大节点数纟翅膀-m == (1+I+u+v)+(3+4*I+2*u+4*v+w) == (4+5*I+3*u+5*v+w)]
[最大节点数纟翅膀 == (4+5*I+3*u+5*v+w+m)]
!! [最大节点数纟光杆树-n == (1+I+u+v)+(4+5*I+3*u+5*v+w+m)-1 == (4+6*I+4*u+6*v+w+m)]
[最大节点数纟光杆树 == (4+6*I+4*u+6*v+w+m+n)]
!! [最大节点数纟光杆树 <= 最大节点数纟翅膀*2-3 == (4+5*I+3*u+5*v+w+m)*2-3 == (5+10*I+6*u+10*v+2*w+2*m)]
[(4+6*I+4*u+6*v+w+m+n) <= (5+10*I+6*u+10*v+2*w+2*m)]
[n <= (1+4*I+2*u+4*v+w+m)]
==>>:
[0 <= I <= 1]
[u,v,w,m >= 0]
[0 <= n <= (1+4*I+2*u+4*v+w+m)]
[最小节点数纟翅膀 == (1+I+u+v)]
[最小节点数纟更深节点 == (2+2*I+u+2*v)]
[最大节点数纟更深节点 == (3+4*I+2*u+4*v+w)]
[最大节点数纟翅膀 == (4+5*I+3*u+5*v+w+m)]
[最大节点数纟光杆树 == (4+6*I+4*u+6*v+w+m+n)]
==>>:
[0 <= I <= 1]
[u,v,w,m >= 0]
[vI := v+I]
[u1 := u+1]
[0 <= n <= (1+2*u+4*vI+w+m)]
[最小节点数纟翅膀 == (u1+vI)]
[最小节点数纟更深节点 == (1+u1+2*vI)]
[最大节点数纟更深节点 == (1+2*u1+4*vI+w)]
[最大节点数纟翅膀 == (1+3*u1+5*vI+w+m)]
[最大节点数纟光杆树 == (4*u1+6*vI+w+m+n)]
    [:公式纟毶展翅树牜有分裂有合并]:here
    _辅助推导牜翅膀一致扌
    ('最小节点数纟翅膀', 1+弛最小节点数纟翅膀)
    ('最小节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最优节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最大节点数纟更深节点', 3+2*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点)
    ('最大节点数纟翅膀', 4+3*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀)
    ('最大节点数纟光杆树', 4+4*弛最小节点数纟翅膀+2*弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀+弛最大节点数纟光杆树)
==>>:
[I==1]:
    [最小节点数纟翅膀 >= 2]
    [最小节点数纟更深节点 >= 4]
    [最大节点数纟更深节点 >= 7]
    [最大节点数纟翅膀 >= 9]
    [最大节点数纟光杆树 >= 10]
    [:最小化毶展翅树牜有分裂有合并牜分裂不濒危:2_4_7_9_10]:here
[I==0]:
    [最小节点数纟翅膀 >= 1]
    [最小节点数纟更深节点 >= 2]
    [最大节点数纟更深节点 >= 3]
    [最大节点数纟翅膀 >= 4]
    [最大节点数纟光杆树 >= 4]
    [:最小化毶展翅树牜有分裂有合并牜分裂濒危:1_2_3_4_4]:here

py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 +欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    1123444:111111_1111
    12344

]]
[[
不考虑分裂合并:
深度有限性:[最小节点数纟翅膀 >= 1]
树状非线性:[最小节点数纟更深节点 >= 2]
压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
简化退化:[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树]
  #蕴含:进化冫防震荡:[最小节点数纟翅膀*2+2 <= 1+最大节点数纟光杆树]
简化进化:[1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
==>>:
[u,v,w,m,n >= 0]
[最小节点数纟翅膀 == 1+w]
[最小节点数纟更深节点 == 2+u]
[最大节点数纟更深节点 == 2+u+v]
[最大节点数纟翅膀 == 3+u+v+w+m]
[最大节点数纟光杆树 == 3+u+v+2*w+m+n]

!! [最大节点数纟光杆树 <= 最大节点数纟翅膀*2-3 == (3+u+v+w+m)*2-3]
[n +(1+w) -1 <= (3+u+v+w+m)-3]
[n <= (u+v+m)]
==>>:
[u,v,w,m >= 0]
[0 <= n <= (u+v+m)]
[最小节点数纟翅膀 == (1+w)]
[最小节点数纟更深节点 == (2+u)]
[最大节点数纟更深节点 == (2+u+v)]
[最大节点数纟翅膀 == (3+u+v+w+m)]
[最大节点数纟光杆树 == (3+u+v+2*w+m+n)]
    [:公式纟毶展翅树牜无分裂无合并]:here
==>>:
[最小节点数纟翅膀 >= 1]
[最小节点数纟更深节点 >= 2]
[最大节点数纟更深节点 >= 2]
[最大节点数纟翅膀 >= 3]
[最大节点数纟光杆树 >= 3]
[:最小化毶展翅树牜无分裂无合并:1_2_2_3_3]:here

py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    1122333:111111_0011:111111_0111
    12233

]]
[[
不考虑分裂:
合并冫覆盖:[最小节点数纟翅膀*2 >= 最小节点数纟更深节点 >= 2][最小节点数纟更深节点*2 <= 1+最大节点数纟更深节点]
深度有限性:[最小节点数纟翅膀 >= 1]
树状非线性:[最小节点数纟更深节点 >= 2]
压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
简化退化:[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树]
  #蕴含:进化冫防震荡:[最小节点数纟翅膀*2+2 <= 1+最大节点数纟光杆树]
简化进化:[1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
==>>:
[0 <= J <= 1]
[最小节点数纟更深节点 == (2+2*u+J)]
!! [最小节点数纟翅膀-v == (2+(2*u+J)+1)//2 == 1+u+J]
[最小节点数纟翅膀 == (1+u+J+v)]
!! [最大节点数纟更深节点-w == 2*(2+2*u+J)-1 == 3+4*u+2*J]
[最大节点数纟更深节点 == (3+4*u+2*J+w)]
!! [最大节点数纟翅膀-m == (1+u+J+v)+(3+4*u+2*J+w) == 4+5*u+3*J+v+w]
[最大节点数纟翅膀 == (4+5*u+3*J+v+w+m)]
!! [最大节点数纟光杆树-n == (1+u+J+v)+(4+5*u+3*J+v+w+m)-1 == 4+6*u+4*J+2*v+w+m]
[最大节点数纟光杆树 == (4+6*u+4*J+2*v+w+m+n)]
!! [最大节点数纟光杆树 <= 最大节点数纟翅膀*2-3 == (4+5*u+3*J+v+w+m)*2-3]
[n + (1+u+J+v)-1 <= (4+5*u+3*J+v+w+m)-3]
[n <= (1+4*u+2*J+w+m)]
==>>:
[0 <= J <= 1]
[u,v,w,m >= 0]
[0 <= n <= (1+4*u+2*J+w+m)]
[最小节点数纟翅膀 == (1+u+J+v)]
[最小节点数纟更深节点 == (2+2*u+J)]
[最大节点数纟更深节点 == (3+4*u+2*J+w)]
[最大节点数纟翅膀 == (4+5*u+3*J+v+w+m)]
[最大节点数纟光杆树 == (4+6*u+4*J+2*v+w+m+n)]
    [:公式纟毶展翅树牜无分裂有合并]:here
==>>:
[最小节点数纟翅膀 >= 1]
[最小节点数纟更深节点 >= 2]
[最大节点数纟更深节点 >= 3]
[最大节点数纟翅膀 >= 4]
[最大节点数纟光杆树 >= 4]
[:最小化毶展翅树牜无分裂有合并:1_2_3_4_4]:here

py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 +欤合并艹缎 -欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    1123444:111111_1011:111111_1111
    12344
]]
[[
不考虑合并:
分裂冫防震荡冫滴血重生:[最小节点数纟翅膀+1+I <= 最小节点数纟更深节点]
深度有限性:[最小节点数纟翅膀 >= 1]
树状非线性:[最小节点数纟更深节点 >= 2]
压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
简化退化:[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树]
  #蕴含:进化冫防震荡:[最小节点数纟翅膀*2+2 <= 1+最大节点数纟光杆树]
简化进化:[1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
==>>:
[0 <= I <= 1]
[最小节点数纟翅膀 == (1+u)]
!! [最小节点数纟更深节点-v == (1+u)+(1+I) == 2+I+u]
[最小节点数纟更深节点 == (2+I+u+v)]
bug:这是合并所需:
    !! [最大节点数纟更深节点-w == 2*(2+I+u+v)-1 == 3+2*I+2*u+2*v]
    [最大节点数纟更深节点 == (3+2*I+2*u+2*v+w)]
!! [最大节点数纟更深节点-w == 2+I+u+v]
[最大节点数纟更深节点 == (2+I+u+v+w)]
!! [最大节点数纟翅膀-m == (1+u)+(2+I+u+v+w) == 3+I+2*u+v+w]
bug:[最大节点数纟翅膀 == (4+2*I+3*u+2*v+w+m)]
[最大节点数纟翅膀 == (3+I+2*u+v+w+m)]
!! [最大节点数纟光杆树-n == (1+u)+(3+I+2*u+v+w+m)-1 == 3+I+3*u+v+w+m]
bug:[最大节点数纟光杆树 == (4+2*I+4*u+2*v+w+m+n)]
[最大节点数纟光杆树 == (3+I+3*u+v+w+m+n)]
!! [最大节点数纟光杆树 <= 最大节点数纟翅膀*2-3 == (3+I+2*u+v+w+m)*2-3]
[n +(1+u) -1 <= (3+I+2*u+v+w+m)-3]
[n <= (3+I+u+v+w+m)]
==>>:
[0 <= I <= 1]
[u,v,w,m >= 0]
[0 <= n <= (3+I+u+v+w+m)]
[最小节点数纟翅膀 == (1+u)]
[最小节点数纟更深节点 == (2+I+u+v)]
[最大节点数纟更深节点 == (2+I+u+v+w)]
[最大节点数纟翅膀 == (3+I+2*u+v+w+m)]
[最大节点数纟光杆树 == (3+I+3*u+v+w+m+n)]
    [:公式纟毶展翅树牜有分裂无合并]:here
    _辅助推导牜翅膀一致扌
    ('最小节点数纟翅膀', 1+弛最小节点数纟翅膀)
    ('最小节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最优节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点)
    ('最大节点数纟更深节点', 2+弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点)
    ('最大节点数纟翅膀', 3+2*弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀)
    ('最大节点数纟光杆树', 3+3*弛最小节点数纟翅膀+弛最小节点数纟更深节点+弛最大节点数纟更深节点+弛最大节点数纟翅膀+弛最大节点数纟光杆树)
==>>:
[I==1]:
    [最小节点数纟翅膀 >= 1]
    [最小节点数纟更深节点 >= 3]
    [最大节点数纟更深节点 >= 3]
    [最大节点数纟翅膀 >= 4]
    [最大节点数纟光杆树 >= 4]
    bug:[:最小化毶展翅树牜有分裂无合并牜分裂不濒危:1_3_5_6_6]:here
    [:最小化毶展翅树牜有分裂无合并牜分裂不濒危:1_3_3_4_4]:here
[I==0]:
    [最小节点数纟翅膀 >= 1]
    [最小节点数纟更深节点 >= 2]
    [最大节点数纟更深节点 >= 2]
    [最大节点数纟翅膀 >= 3]
    [最大节点数纟光杆树 >= 3]
    bug:[:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_3_4_4]:here
    [:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_2_3_3]:here

py_adhoc_call   seed.data_funcs.finger_tree__config ,_辅助推导扌 -欤合并艹缎 +欤分裂艹缎 +欤左取艹缘 +欤右取艹缘 +欤左增删防震荡 +欤右增删防震荡 +欤左出艹缎 +欤左入艹缎 +欤右出艹缎 +欤右入艹缎
    1122333:111111_0011:111111_0111
    12233

]]
==>>:
[[
[:四种不同情况冫两份最小化参数配置]:here
    #欤分裂艹缎:白给
    #取消:分裂不濒危 #没实际意义
1_2_3_4_4
    1123444:111111_1011:111111_1111
        12344
1_2_2_3_3
    1122333:111111_0011:111111_0111
        12233
    [:最小化毶展翅树牜有分裂有合并牜分裂濒危:1_2_3_4_4]:goto
        [:最小化毶展翅树牜无分裂有合并:1_2_3_4_4]:goto

    [:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_2_3_3]:goto
        [:最小化毶展翅树牜无分裂无合并:1_2_2_3_3]:goto
===
bug:[:六种不同情况冫四份最小化参数配置]:here
1_2_2_3_3
1_2_3_4_4
1_3_5_6_6
2_4_7_9_10
# [:最小化毶展翅树牜无分裂无合并:1_2_2_3_3]:goto
# [:最小化毶展翅树牜有分裂有合并牜分裂不濒危:2_4_7_9_10]:goto
# [:最小化毶展翅树牜有分裂无合并牜分裂不濒危:1_3_5_6_6]:goto
# 1_2_3_4_4:
#   [:最小化毶展翅树牜有分裂有合并牜分裂濒危:1_2_3_4_4]:goto
#   [:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_3_4_4]:goto
#   [:最小化毶展翅树牜无分裂有合并:1_2_3_4_4]:goto
===
[:公式纟毶展翅树牜无分裂无合并]:goto
[:公式纟毶展翅树牜有分裂有合并]:goto
[:公式纟毶展翅树牜有分裂无合并]:goto
[:公式纟毶展翅树牜无分裂有合并]:goto
]]



[[
乸毶展翅树
#begin:_测试冫乸毶展翅树扌
#>>> _测试冫乸毶展翅树扌(4, 4, 4, 4, 欤显示=True, 欤空心=False)
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =2 =2 =2 =2 +欤显示 -欤空心
    total:5184
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =1 =1 =1 =1 +欤显示
    total:680
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =1 =1 =0 =0 +欤显示 -欤空心
    total:114
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =1 =0 =0 =0 +欤显示 -欤空心
    total:59
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =0 =1 =0 =0 +欤显示 -欤空心
    total:55
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =0 =0 =1 =0 +欤显示 -欤空心
    total:48
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =0 =0 =0 =1 +欤显示 -欤空心
    total:49
py_adhoc_call   seed.data_funcs.finger_tree__config   @_测试冫乸毶展翅树扌 =0 =0 =0 =1 +欤显示 +欤空心
    total:27

>>> _测试冫乸毶展翅树扌(1, 0, 0, 0, 欤显示=True, 欤空心=True)
(0, 0, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 3, 3)
===1===
(0, 0, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 4)
===2===
(0, 0, 0, 0, 1, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 5)
===3===
(0, 0, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 8)
===4===
(0, 0, 0, 0, 3, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 11)
===5===
(0, 0, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 4)
===6===
(0, 0, 0, 0, 1, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 5)
===7===
(0, 0, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 6)
===8===
(0, 0, 0, 0, 3, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 9)
===9===
(0, 0, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 4)
===10===
(0, 0, 0, 0, 1, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 5)
===11===
(0, 0, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 10)
===12===
(0, 0, 0, 0, 5, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 15)
===13===
(1, 0, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 3, 3, 3, 4, 4)
===14===
(1, 0, 0, 0, 1)
False False
乸毶展翅树(0, False, 1, 3, 3, 3, 4, 5)
===15===
(1, 0, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 2, 4, 4, 7, 9, 10)
===16===
(1, 0, 0, 0, 5, 0)
False True
乸毶展翅树(0, True, 2, 4, 4, 7, 9, 15)
===17===
(1, 0, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 3, 5, 8, 9, 12, 14)
===18===
(1, 0, 0, 0, 7, 1)
False True
乸毶展翅树(0, True, 3, 5, 8, 9, 12, 21)
===19===
(1, 0, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 2, 3, 4, 5, 7, 8)
===20===
(1, 0, 0, 0, 3, 0)
True False
乸毶展翅树(1, False, 2, 3, 4, 5, 7, 11)
===21===
(1, 0, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 2, 4, 4, 7, 9, 10)
===22===
(1, 0, 0, 0, 5, 1)
True False
乸毶展翅树(2, False, 2, 4, 4, 7, 9, 15)
===23===
(1, 0, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 2, 3, 4, 5, 7, 8)
===24===
(1, 0, 0, 0, 3, 0)
True True
乸毶展翅树(1, True, 2, 3, 4, 5, 7, 11)
===25===
(1, 0, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 3, 5, 8, 9, 12, 14)
===26===
(1, 0, 0, 0, 7, 1)
True True
乸毶展翅树(2, True, 3, 5, 8, 9, 12, 21)
===27===
>>> _测试冫乸毶展翅树扌(0, 1, 0, 0, 欤显示=True, 欤空心=True)
(0, 0, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 3, 3)
===1===
(0, 0, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 4)
===2===
(0, 0, 0, 0, 1, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 5)
===3===
(0, 0, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 8)
===4===
(0, 0, 0, 0, 3, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 11)
===5===
(0, 0, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 4)
===6===
(0, 0, 0, 0, 1, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 5)
===7===
(0, 0, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 6)
===8===
(0, 0, 0, 0, 3, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 9)
===9===
(0, 0, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 4)
===10===
(0, 0, 0, 0, 1, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 5)
===11===
(0, 0, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 10)
===12===
(0, 0, 0, 0, 5, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 15)
===13===
(0, 1, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 3, 4, 4)
===14===
(0, 1, 0, 0, 1)
False False
乸毶展翅树(0, False, 1, 2, 2, 3, 4, 5)
===15===
(0, 1, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 2, 2, 2, 3, 5, 6)
===16===
(0, 1, 0, 0, 1, 0)
False True
乸毶展翅树(0, True, 2, 2, 2, 3, 5, 7)
===17===
(0, 1, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 3, 3, 4, 5, 8, 10)
===18===
(0, 1, 0, 0, 3, 1)
False True
乸毶展翅树(0, True, 3, 3, 4, 5, 8, 13)
===19===
(0, 1, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 3, 4, 5, 6, 6)
===20===
(0, 1, 0, 0, 3, 0)
True False
乸毶展翅树(1, False, 1, 3, 4, 5, 6, 9)
===21===
(0, 1, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 4, 4, 7, 8, 8)
===22===
(0, 1, 0, 0, 5, 1)
True False
乸毶展翅树(2, False, 1, 4, 4, 7, 8, 13)
===23===
(0, 1, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 2, 4, 4, 7, 9, 10)
===24===
(0, 1, 0, 0, 5, 0)
True True
乸毶展翅树(1, True, 2, 4, 4, 7, 9, 15)
===25===
(0, 1, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 3, 6, 8, 11, 14, 16)
===26===
(0, 1, 0, 0, 9, 1)
True True
乸毶展翅树(2, True, 3, 6, 8, 11, 14, 25)
===27===
>>> _测试冫乸毶展翅树扌(0, 0, 1, 0, 欤显示=True, 欤空心=True)
(0, 0, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 3, 3)
===1===
(0, 0, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 4)
===2===
(0, 0, 0, 0, 1, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 5)
===3===
(0, 0, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 8)
===4===
(0, 0, 0, 0, 3, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 11)
===5===
(0, 0, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 4)
===6===
(0, 0, 0, 0, 1, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 5)
===7===
(0, 0, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 6)
===8===
(0, 0, 0, 0, 3, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 9)
===9===
(0, 0, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 4)
===10===
(0, 0, 0, 0, 1, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 5)
===11===
(0, 0, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 10)
===12===
(0, 0, 0, 0, 5, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 15)
===13===
(0, 0, 1, 0, 0)
False False
乸毶展翅树(0, False, 2, 2, 2, 2, 4, 5)
===14===
(0, 0, 1, 0, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 4, 4, 5, 5)
===15===
(0, 0, 1, 0, 2, 0)
False True
乸毶展翅树(0, True, 1, 2, 4, 4, 5, 7)
===16===
(0, 0, 1, 0, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 6, 8, 9)
===17===
(0, 0, 1, 0, 4, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 6, 8, 13)
===18===
(0, 0, 1, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 4, 4, 5, 5)
===19===
(0, 0, 1, 0, 2, 0)
True False
乸毶展翅树(1, False, 1, 2, 4, 4, 5, 7)
===20===
(0, 0, 1, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 6, 7, 7)
===21===
(0, 0, 1, 0, 4, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 6, 7, 11)
===22===
(0, 0, 1, 0, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 4, 4, 5, 5)
===23===
(0, 0, 1, 0, 2, 0)
True True
乸毶展翅树(1, True, 1, 2, 4, 4, 5, 7)
===24===
(0, 0, 1, 0, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 8, 8, 10, 11)
===25===
(0, 0, 1, 0, 6, 1)
True True
乸毶展翅树(2, True, 2, 4, 8, 8, 10, 17)
===26===
>>> _测试冫乸毶展翅树扌(0, 0, 0, 1, 欤显示=True, 欤空心=True)
(0, 0, 0, 0, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 3, 3)
===1===
(0, 0, 0, 0, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 4)
===2===
(0, 0, 0, 0, 1, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 5)
===3===
(0, 0, 0, 0, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 8)
===4===
(0, 0, 0, 0, 3, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 7, 11)
===5===
(0, 0, 0, 0, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 4)
===6===
(0, 0, 0, 0, 1, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 5)
===7===
(0, 0, 0, 0, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 6)
===8===
(0, 0, 0, 0, 3, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 9)
===9===
(0, 0, 0, 0, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 4)
===10===
(0, 0, 0, 0, 1, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 5)
===11===
(0, 0, 0, 0, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 10)
===12===
(0, 0, 0, 0, 5, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 15)
===13===
(0, 0, 0, 1, 0)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 4, 4)
===14===
(0, 0, 0, 1, 1)
False False
乸毶展翅树(0, False, 1, 2, 2, 2, 4, 5)
===15===
(0, 0, 0, 1, 0, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 5, 5)
===16===
(0, 0, 0, 1, 2, 0)
False True
乸毶展翅树(0, True, 1, 2, 2, 3, 5, 7)
===17===
(0, 0, 0, 1, 0, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 8, 9)
===18===
(0, 0, 0, 1, 4, 1)
False True
乸毶展翅树(0, True, 2, 3, 4, 5, 8, 13)
===19===
(0, 0, 0, 1, 0, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 5, 5)
===20===
(0, 0, 0, 1, 2, 0)
True False
乸毶展翅树(1, False, 1, 2, 2, 3, 5, 7)
===21===
(0, 0, 0, 1, 0, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 7, 7)
===22===
(0, 0, 0, 1, 4, 1)
True False
乸毶展翅树(2, False, 1, 3, 4, 5, 7, 11)
===23===
(0, 0, 0, 1, 0, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 5, 5)
===24===
(0, 0, 0, 1, 2, 0)
True True
乸毶展翅树(1, True, 1, 2, 2, 3, 5, 7)
===25===
(0, 0, 0, 1, 0, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 10, 11)
===26===
(0, 0, 0, 1, 6, 1)
True True
乸毶展翅树(2, True, 2, 4, 4, 7, 10, 17)
===27===

#end:_测试冫乸毶展翅树扌
]]



[[
>>> for x in 列表纟最小化毶展翅树:
...     x.verify()
...     y = x.转化为冫乸毶展翅树扌()
...     yy = y.转化为冫乸毶展翅树扌()
...     y.verify()
...     x
...     y
...     x.打包冫参数扌()
...     y is not x
...     y is yy
...     y.打包冫参数扌() == x.打包冫参数扌()
乸最小化毶展翅树牜无分裂无合并()
乸毶展翅树(0, False, 1, 2, 2, 2, 3, 3)
(0, False, 1, 2, 2, 2, 3, 3)
True
True
True
乸最小化毶展翅树牜有分裂有合并牜分裂不濒危()
乸毶展翅树(2, True, 2, 4, 4, 7, 9, 10)
(2, True, 2, 4, 4, 7, 9, 10)
True
True
True
乸最小化毶展翅树牜有分裂无合并牜分裂不濒危()
乸毶展翅树(2, False, 1, 3, 4, 5, 6, 6)
(2, False, 1, 3, 4, 5, 6, 6)
True
True
True
乸最小化毶展翅树牜有分裂有合并牜分裂濒危()
乸毶展翅树(1, True, 1, 2, 2, 3, 4, 4)
(1, True, 1, 2, 2, 3, 4, 4)
True
True
True
乸最小化毶展翅树牜有分裂无合并牜分裂濒危()
乸毶展翅树(1, False, 1, 2, 2, 3, 4, 4)
(1, False, 1, 2, 2, 3, 4, 4)
True
True
True
乸最小化毶展翅树牜无分裂有合并()
乸毶展翅树(0, True, 1, 2, 2, 3, 4, 4)
(0, True, 1, 2, 2, 3, 4, 4)
True
True
True


]]



#]]]'''
__all__ = r'''
乸毶展翅树

列表纟最小化毶展翅树
    毶展翅树牜一二二三三牜无分裂无合并
    毶展翅树牜二四七九十牜有分裂有合并牜分裂不濒危
    毶展翅树牜一三五六六牜有分裂无合并牜分裂不濒危
    毶展翅树牜一二三四四牜有分裂有合并牜分裂濒危
        毶展翅树牜一二三四四牜有分裂无合并牜分裂濒危
        毶展翅树牜一二三四四牜无分裂有合并




魖毶展翅树
    乸毶展翅树
    乸最小化毶展翅树牜无分裂无合并
        最小化毶展翅树牜无分裂无合并
            毶展翅树牜一二二三三牜无分裂无合并

    乸最小化毶展翅树牜有分裂有合并牜分裂不濒危
        最小化毶展翅树牜有分裂有合并牜分裂不濒危
            毶展翅树牜二四七九十牜有分裂有合并牜分裂不濒危

    乸最小化毶展翅树牜有分裂无合并牜分裂不濒危
        最小化毶展翅树牜有分裂无合并牜分裂不濒危
            毶展翅树牜一三五六六牜有分裂无合并牜分裂不濒危

    乸最小化毶展翅树牜有分裂有合并牜分裂濒危
        最小化毶展翅树牜有分裂有合并牜分裂濒危
            毶展翅树牜一二三四四牜有分裂有合并牜分裂濒危

    乸最小化毶展翅树牜有分裂无合并牜分裂濒危
        最小化毶展翅树牜有分裂无合并牜分裂濒危
            毶展翅树牜一二三四四牜有分裂无合并牜分裂濒危

    乸最小化毶展翅树牜无分裂有合并
        最小化毶展翅树牜无分裂有合并
            毶展翅树牜一二三四四牜无分裂有合并


乸毶展翅树
    计算冫最优节点数纟更深节点牜最小二幂扌
    计算冫最优节点数纟更深节点牜居中二幂扌
    计算冫最优节点数纟更深节点牜偏心二幂扌
    计算冫最优节点数纟更深节点牜偏心二幂牜翅膀节点数扌

'''.split()#'''
__all__

from itertools import product
from seed.math.zpow_between import 计算冫偏心二幂扌,计算冫居中二幂扌,计算冫最小二幂扌,计算冫最大二幂扌

from seed.abc.abc__ver1 import abstractmethod, override, ABC, ABC__no_slots
from seed.helper.repr_input import repr_helper
from seed.tiny_.check import check_type_is, check_type_le, check_int_ge, check_int_ge_lt, check_int_ge_le

#begin-1-def _辅助推导扌(ls_vs_triple=False, /, **name2uint):

def _辅助推导冫真值变量关系扌():
    #see:_辅助推导冫参数补充扌
    # [欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
    ttt = r'''
    欤左取艹缘:欤分裂艹缎,欤合并艹缎:欤右取艹缘
    '''#'''
    sss = r'''
    欤合并艹缎::欤左入艹缎,欤右入艹缎
    欤分裂艹缎::欤左出艹缎,欤右出艹缎
    欤左增删防震荡::欤左出艹缎,欤左入艹缎
    欤右增删防震荡::欤右出艹缎,欤右入艹缎
    '''#'''
    ls4ls4nm_nms4low_nms4up = [*map(__辅助推导冫真值变量关系扌, [ttt,sss])]
        #求值次序:区分开来前后两批
    return ls4ls4nm_nms4low_nms4up
def __辅助推导冫真值变量关系扌(sss, /):
    ls4nm_nms4low_nms4up = []
    for ss in sss.split():
        #[nm, ss4low, ss4up] = ss.rpartition(':')
        [nm, ss4low, ss4up] = ss.split(':')
        nms4low = ss4low.split(',') if ss4low else []
        nms4up = ss4up.split(',') if ss4up else []
        ls4nm_nms4low_nms4up.append((nm,tuple(nms4low),tuple(nms4up)))
    return ls4nm_nms4low_nms4up
def _辅助推导冫蛮力穷举冫真值参数扌():
    from seed.tiny import print_err
    from itertools import product
    (T, j2poly) = _辅助推导冫构造类型纟多项式扌()
    var_nms = T.get_var_names()
    bool_nms = [nm for nm in var_nms if nm.startswith('欤')]
    ls4ls4nm_nms4low_nms4up = _辅助推导冫真值变量关系扌()
    for ls4nm_nms4low_nms4up in ls4ls4nm_nms4low_nms4up:
      for nm, nms4low, nms4up in ls4nm_nms4low_nms4up:
        pass
    assert len(ls4ls4nm_nms4low_nms4up) == 2
    (triples4low, triples4up) = ls4ls4nm_nms4low_nms4up
    special_nms4low = [nm for nm, nms4low, nms4up in triples4low]
    special_nms4up = [nm for nm, nms4low, nms4up in triples4up]
    special_nms = special_nms4up + special_nms4low
    normal_nms = [nm for nm in bool_nms if not nm in special_nms]
    normal_nms = tuple(normal_nms)
    special_nms4up = tuple(special_nms4up)
    special_nms4low = tuple(special_nms4low)
    special_nms = tuple(special_nms)
    low_normal_nms = special_nms4low + normal_nms
    def mk_ls4rng(nm2u, triples4xxx, /):
        f = nm2u.__getitem__
        return [range(len(nms4low) and all(map(f, nms4low)),1+all(map(f, nms4up))) for nm, nms4low, nms4up in triples4xxx]
    for bs4normal in product(range(2), repeat=len(normal_nms)):
        name2uint4normal = dict(zip(normal_nms, bs4normal))
        ls4spec_rngs4up = mk_ls4rng(name2uint4normal, triples4up)
        #if 0b0001:print_err(ls4spec_rngs4up)
        for bs4up in product(*ls4spec_rngs4up):
          name2uint4norm_up = dict(zip(special_nms4up, bs4up))
          name2uint4norm_up.update(name2uint4normal)
          #eval:up `before` low
          ls4spec_rngs4low = mk_ls4rng(name2uint4norm_up, triples4low)
          #if 0b0001:print_err(ls4spec_rngs4up, ls4spec_rngs4low)
          for bs4low in product(*ls4spec_rngs4low):
            name2uint = dict(zip(special_nms4low, bs4low))
            name2uint.update(name2uint4norm_up)
            assert len(name2uint) == len(bool_nms)
            if 0b0000:
                print(name2uint4normal)
                print(name2uint4norm_up)
                print(name2uint)
                print(ls4spec_rngs4up, special_nms4low)
                print(normal_nms, bs4normal)
                print(special_nms4up, bs4up)
                print(special_nms4low, bs4low)
            assert _辅助推导冫参数补充扌(name2uint).keys() -name2uint.keys() <= {'最小节点数纟左翼', '最小节点数纟右翼'}
            #yield (normal_nms, special_nms, bs4normal, bs4up, bs4low, name2uint)
            yield (_normal_nms:=low_normal_nms, _special_nms:=special_nms4up, _bs:=bs4low+bs4normal, bs:=bs4up, name2uint)
    return
#end-def _辅助推导冫蛮力穷举冫真值参数扌():
def _辅助推导冫蛮力穷举扌(items_vs_dict=False, /, *, 欤统计=False, 欤去除冫非对称性=False, path = '/sdcard/0my_files/tmp/out4py/seed.data_funcs.finger_tree__config._辅助推导冫蛮力穷举扌.mid-cache.txt'):
    from seed.io.write_fdefault import read_or_xwrite
    #def read_or_xwrite(fdefault, path, /, *, data2str, data5str, **kwds, encoding):
    #args = _主体_辅助推导冫蛮力穷举扌()
    args = read_or_xwrite(_主体_辅助推导冫蛮力穷举扌, path, data2str='repr', data5str='literal_eval', encoding='u8')
    return _后处理_辅助推导冫蛮力穷举扌(items_vs_dict, args, 欤统计=欤统计, 欤去除冫非对称性=欤去除冫非对称性)
def _主体_辅助推导冫蛮力穷举扌():
    from seed.tiny import print_err
    #from seed.tiny import fmap4dict_value# filter4dict_value, dict_add__is, dict_add__eq, dict_add__new, group4dict_value
    #from itertools import pairwise
    onms = r'''
    最小节点数纟左翼
    最小节点数纟右翼
    最小节点数纟更深节点
    最大节点数纟更深节点
    最大节点数纟左翼
    最大节点数纟右翼
    最大节点数纟光杆树
    '''.split()#'''
    output2ls4bbb_param_result = {}
    j4neg = 0
    ls4data4neg = []
    for (normal_nms, special_nms, _bs, bs, name2uint) in _辅助推导冫蛮力穷举冫真值参数扌():
        #for (normal_nms, special_nms, bs4normal, bs4up, bs4low, name2uint) in _辅助推导冫蛮力穷举冫真值参数扌():
        _bs_str = _to_digits_str(_bs)
        bs_str = _to_digits_str(bs)
        s4bsbs = f'{_bs_str}:{bs_str}'
        ((d, ps), (d__set0, ps__set0), ls) = _辅助推导扌(True, **name2uint)
        nm2i = {nm:int(p) for nm, p in d__set0.items()}

        assert nm2i == _辅助推导冫参数补充扌(nm2i)
            #检查约束:
        ######################
        # [0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎]
        # [0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎]
        # [0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎]
        # [0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎]
        ######################
        # 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
        # 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
        # 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
        ######################
        nm4neg = '最大值纟弛最小节点数纟更深节点乊合并'
        if nm2i[nm4neg] < 0:
            print_err('='*22, 'neg', j4neg)
            print_err(_bs, bs)
            print_err(name2uint)
            print_err(nm2i)
            print_err(nm4neg, nm2i[nm4neg])
            j4neg += 1
            ls4data4neg.append((_bs, bs, nm2i[nm4neg]))
            #ls4data4neg.append((s4bsbs, _bs, bs, nm2i[nm4neg], name2uint, nm2i))
            continue
        assert not (__:={nm:u for nm, u in nm2i.items() if not (u >= 0 or nm.startswith('允负'))}), (__, name2uint, nm2i)
        assert all((u >= 0 or nm.startswith('允负')) for nm,u in nm2i.items())
        output_uints = tuple(nm2i[nm] for nm in onms)
        assert all(u >= 0 for u in output_uints)
        param = name2uint
        result = nm2i
        odict = dict(zip(onms, output_uints))
        assert all(u >= 0 for u in odict.values())
        output = _to_digits_str(output_uints)
        assert len(output) == len(onms)
        b0 = _辅助推导冫欤对称扌(param)
        b1 = _辅助推导冫欤对称扌(result)
        b2 = _辅助推导冫欤对称扌(odict)
        __txt = r'''
000011:1000
001111:1000
001111:1011
001111:1100
001111:1111
'''#'''
        #非对称: [[欤合并艹缎][欤左取艹缘] -> [最小节点数纟右翼>=2][最小节点数纟左翼==0]]
        assert not b0 or b1 or s4bsbs in __txt, (param, result, s4bsbs)
        assert not b1 or b2
        bbb = b0, b1, b2
        ls43 = output2ls4bbb_param_result.setdefault(output, [])
        ls43.append((bbb, _bs, bs, param, result))
    sz4neg = j4neg
    ls4data4neg
    nm4neg
    assert sz4neg == len(ls4data4neg)
    args = (nm4neg, sz4neg, ls4data4neg, normal_nms, special_nms, onms, output2ls4bbb_param_result)
    return args
def _to_digits_str(us, /):
    for u in us:
        check_int_ge(0, u)
    s = ''.join(map(str, us))
    assert len(s) == len(us)
    return s
def _check_digits_bound(digit4low, digit4up, digits, /):
    check_type_is(str, digits)
    check_type_is(str, digit4low)
    check_type_is(str, digit4up)
    assert len(digit4low) == 1
    assert len(digit4up) == 1
    L = len(digits)
    assert _4cmp(digit4low*L, digits) in (0b00, 0b01)
    assert _4cmp(digit4up*L, digits) in (0b00, 0b10)
def _检查冫类组牜返回最大参数组扌(output, /, *, 欤确认冫简化退化):
    check_type_is(str, output)
    assert len(output) == 7
    _check_digits_bound('0', '9', output)
    #输出名
    #onms
    bs8o = \
    [最小节点数纟左翼
    ,最小节点数纟右翼
    ,最小节点数纟更深节点
    ,最大节点数纟更深节点
    ,最大节点数纟左翼
    ,最大节点数纟右翼
    ,最大节点数纟光杆树
    ] = tuple(map(int, output))
    # 必要前提:[0 <= 最小节点数纟左翼 <= 最大节点数纟左翼]
    # 必要前提:[0 <= 最小节点数纟右翼 <= 最大节点数纟右翼]
    # 必要前提:[0 <= 最小节点数纟更深节点 <= 最优节点数纟更深节点 <= 最大节点数纟更深节点]
    # 必要前提:树状非线性:[最小节点数纟更深节点>=2]
    if 1:
        #额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
        最优节点数纟更深节点 = 最小节点数纟更深节点
    # #不含:非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
    # 未确认:必要前提:不允许可退化态:[[更深树.欤空树] -> [[左翼非空][右翼非空]]]
    assert 0 <= 最小节点数纟左翼 <= 最大节点数纟左翼
    assert 0 <= 最小节点数纟右翼 <= 最大节点数纟右翼
    assert 0 <= 最小节点数纟更深节点 <= 最优节点数纟更深节点 <= 最大节点数纟更深节点
    assert 最小节点数纟更深节点 >= 2
    # ==>>:
    # [最小节点数纟左翼>=1]欤左取艹缘
    # [最小节点数纟左翼==0]欤左取艹缎
    # [最小节点数纟右翼>=1]欤右取艹缘
    # [最小节点数纟右翼==0]欤右取艹缎
    #
    # [最大节点数纟更深节点+最小节点数纟左翼-1<=最大节点数纟左翼]欤左出艹缎
    # [最大节点数纟更深节点+最小节点数纟右翼-1<=最大节点数纟右翼]欤右出艹缎
    #
    # [最大节点数纟左翼+1-最优节点数纟更深节点>=最小节点数纟左翼]欤左入艹缎
    # [最大节点数纟右翼+1-最优节点数纟更深节点>=最小节点数纟右翼]欤右入艹缎
    #
    # [欤左入艹缎][欤右入艹缎][最大节点数纟更深节点+1>=2*最小节点数纟更深节点][最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼]欤合并艹缎
    # [欤左出艹缎][欤右出艹缎][最小节点数纟更深节点>=最小节点数纟左翼+1][最小节点数纟更深节点>=最小节点数纟右翼+1]欤分裂艹缎
    # [欤左出艹缎][欤左入艹缎][最大节点数纟更深节点+最小节点数纟左翼<=最大节点数纟左翼]欤左增删防震荡
    # [欤右出艹缎][欤右入艹缎][最大节点数纟更深节点+最小节点数纟右翼<=最大节点数纟右翼]欤右增删防震荡
    #
    # 简化退化:左出: [[欤左出艹缎] -> [(最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树]]
    # 简化退化:右出: [[欤右出艹缎] -> [(最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树]]
    # 简化进化:[[欤左入艹缎or欤右入艹缎] -> [1+最大节点数纟光杆树 <= 最大节点数纟左翼+最大节点数纟右翼]]
    #
    # ==>>:
    # 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    # 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
    欤左取艹缘 = (最小节点数纟左翼>=1)
    欤右取艹缘 = (最小节点数纟右翼>=1)
    if 0:
        欤左出艹缎 = (最大节点数纟更深节点+最小节点数纟左翼-1<=最大节点数纟左翼)
        欤右出艹缎 = (最大节点数纟更深节点+最小节点数纟右翼-1<=最大节点数纟右翼)
    else:
        欤左出艹缎 = (最大节点数纟更深节点+最小节点数纟左翼-1<=最大节点数纟左翼)*((最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树)
            #更新计算冫欤左出艹缎:++简化退化:左出
        欤右出艹缎 = (最大节点数纟更深节点+最小节点数纟右翼-1<=最大节点数纟右翼)*((最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树)
            #更新计算冫欤右出艹缎:++简化退化:右出
    #
    欤左入艹缎 = (最大节点数纟左翼+1-最优节点数纟更深节点>=最小节点数纟左翼)
    欤右入艹缎 = (最大节点数纟右翼+1-最优节点数纟更深节点>=最小节点数纟右翼)
    #
    欤合并艹缎 = (欤左入艹缎)*(欤右入艹缎)*(最大节点数纟更深节点+1>=2*最小节点数纟更深节点)*(最小节点数纟更深节点<=最小节点数纟左翼+最小节点数纟右翼)
    欤分裂艹缎 = (欤左出艹缎)*(欤右出艹缎)*(最小节点数纟更深节点>=最小节点数纟左翼+1)*(最小节点数纟更深节点>=最小节点数纟右翼+1)
    欤左增删防震荡 = (欤左出艹缎)*(欤左入艹缎)*(最大节点数纟更深节点+最小节点数纟左翼<=最大节点数纟左翼)
    欤右增删防震荡 = (欤右出艹缎)*(欤右入艹缎)*(最大节点数纟更深节点+最小节点数纟右翼<=最大节点数纟右翼)
    #参数名
    bsbs = [
    #normal_nms
    [欤左取艹缘
    ,欤右取艹缘
    ,欤左出艹缎
    ,欤右出艹缎
    ,欤左入艹缎
    ,欤右入艹缎
    ]
    ,
    #special_nms
    [欤合并艹缎
    ,欤分裂艹缎
    ,欤左增删防震荡
    ,欤右增删防震荡
    ]
    ]
    bsbs = [[int(b) for b in bs] for bs in bsbs]
    bsbs2s = _bsbs2s
    max_s = bsbs2s(bsbs)
    if 欤确认冫简化退化:
        # 简化退化:左出: [[欤左出艹缎] -> [(最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树]]
        # 简化退化:右出: [[欤右出艹缎] -> [(最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树]]
        assert not 欤左出艹缎 or ((最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树), (output, max_s)
            #AssertionError: ('0022120', '001111_0101')
        assert not 欤右出艹缎 or ((最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树)

    return (max_s, bs8o)
#end-def _检查冫类组牜返回最大参数组扌(output, /, *, 欤确认冫简化退化):

def _bsbs2s(bsbs, /):
    _bs, bs = bsbs
    _s = _to_digits_str(_bs)
    s = _to_digits_str(bs)
    return f'{_s}_{s}'

def _检查冫类组丶参数组牜返回最大参数组扌(output, s, /, *, 欤最大参数组):
    欤确认冫简化退化 = True
    (max_s, bs8o) = _检查冫类组牜返回最大参数组扌(output, 欤确认冫简化退化=欤确认冫简化退化)
    bsbs = _检查冫参数组牜返回整数列表对扌(s)
    [最小节点数纟左翼
    ,最小节点数纟右翼
    ,最小节点数纟更深节点
    ,最大节点数纟更深节点
    ,最大节点数纟左翼
    ,最大节点数纟右翼
    ,最大节点数纟光杆树
    ] = bs8o
    [[欤左取艹缘
    ,欤右取艹缘
    ,欤左出艹缎
    ,欤右出艹缎
    ,欤左入艹缎
    ,欤右入艹缎
    ],[欤合并艹缎
    ,欤分裂艹缎
    ,欤左增删防震荡
    ,欤右增删防震荡
    ]] = bsbs
    assert _4cmp(max_s, s) in (0b00, 0b10)
    if 欤最大参数组:
        assert max_s == s, (output, max_s, s)
            #AssertionError: ('0022120', '001111_0101', '000111_0001')
            #   vs: 0022121:001111_0101 # >...
            #'0022120': [((False, False, False), (0, 0, 0, 1, 1, 1), (0, 0, 0, 1), {'欤左取艹缘': 0, '欤合并艹缎': 0, '欤分裂艹缎': 0, '欤左增删防震荡': 0, '欤右增删防震荡': 1, '欤右取艹缘': 0, '欤左出艹缎': 0, '欤右出艹缎': 1, '欤左入艹缎': 1, '欤右入艹缎': 1}, {'最大值纟弛最小节点数纟更深节点乊合并': 0, '自由值纟节点数纟左翼': 1, '自由值纟节点数纟右翼': 2, '上限纟最大节点数纟光杆树': 2, '允负固定部纟下限纟最大节点数纟光杆树': -1, '下限纟最大节点数纟光杆树': 0, '最大值纟弛最大节点数纟光杆树': 2, '弛最优节点数纟更深节点': 0, '最小节点数纟左翼': 0, '最小节点数纟右翼': 0, '最小节点数纟更深节点': 2, '最优节点数纟更深节点': 2, '最大节点数纟更深节点': 2, '最大节点数纟左翼': 1, '最大节点数纟右翼': 2, '最大节点数纟光杆树': 0, '欤左取艹缘': 0, '欤合并艹缎': 0, '欤分裂艹缎': 0, '欤左增删防震荡': 0, '欤右增删防震荡': 1, '欤右取艹缘': 0, '欤左出艹缎': 0, '欤右出艹缎': 1, '欤左入艹缎': 1, '欤右入艹缎': 1, '弛最小节点数纟左翼': 0, '弛最小节点数纟右翼': 0, '弛最小节点数纟更深节点': 0, '弛最大节点数纟更深节点': 0, '弛最大节点数纟左翼': 0, '弛最大节点数纟右翼': 0, '弛最大节点数纟光杆树': 0, '变动部纟下限纟最大节点数纟光杆树': 1})]
            #==>> 更新计算冫欤左出艹缎
            #==>> 更新计算冫欤右出艹缎
        assert _4cmp(max_s, s) == 0b00
    else:
        assert max_s > s
        assert _4cmp(max_s, s) == 0b10
    if 欤确认冫简化退化:
        # 简化退化:左出: [[欤左出艹缎] -> [(最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树]]
        # 简化退化:右出: [[欤右出艹缎] -> [(最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树]]
        assert not 欤左出艹缎 or ((最小节点数纟左翼-1)+最大节点数纟右翼 <= 最大节点数纟光杆树), (output, max_s)
            #AssertionError: ('0022120', '001111_0101')
        assert not 欤右出艹缎 or ((最小节点数纟右翼-1)+最大节点数纟左翼 <= 最大节点数纟光杆树)
def _检查冫参数组牜返回整数列表对扌(s, /):
    check_type_is(str, s)
    assert len(s) == 6+1+4 == 11
    assert s[6] == '_'
    _check_digits_bound('0', '1', s[:6])
    _check_digits_bound('0', '1', s[6+1:])
    #参数名
    #normal_nms
    args0 = \
    [欤左取艹缘
    ,欤右取艹缘
    ,欤左出艹缎
    ,欤右出艹缎
    ,欤左入艹缎
    ,欤右入艹缎
    ] = tuple(map(int, s[:6]))
    #special_nms
    args1 = \
    [欤合并艹缎
    ,欤分裂艹缎
    ,欤左增删防震荡
    ,欤右增删防震荡
    ] = tuple(map(int, s[6+1:]))
    # 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    # 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
    #assert 欤左取艹缘 == (最小节点数纟左翼>=1)
    #assert 欤右取艹缘 == (最小节点数纟右翼>=1)
    # 改为对称式<<==[欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
    # [欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘]
    # [欤分裂艹缎*欤合并艹缎 <= 欤右取艹缘]
    # [0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎]
    # [0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎]
    # [0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎]
    # [0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎]
    assert (欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘)
    assert (欤分裂艹缎*欤合并艹缎 <= 欤右取艹缘)
    assert (0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎)
    assert (0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎)
    assert (0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎)
    assert (0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎)
    return args0, args1
def _后处理_辅助推导冫蛮力穷举扌(items_vs_dict, args, /, *, 欤统计, 欤去除冫非对称性):
    from seed.tiny import print_err
    (nm4neg, sz4neg, ls4data4neg, normal_nms, special_nms, onms, output2ls4bbb_param_result) = args
    if 欤统计 and sz4neg:
        print_err('='*22, '统计:负值数量', sz4neg, nm4neg)
        print_err('===', '参数名', normal_nms, special_nms)
        for _bs, bs, neg_i in ls4data4neg:
            _bs_str = _to_digits_str(_bs)
            bs_str = _to_digits_str(bs)
            print_err(_bs_str, bs_str, sep=':')
        assert len(normal_nms) == 6
        assert len(special_nms) == 4
        _bss = [set() for _ in range(6)]
        bss = [set() for _ in range(4)]
        def f(bss, bs, /):
            assert len(bss) == len(bs)
            for bs, b in zip(bss, bs):
                bs.add(b)
        for (_bs, bs, _) in ls4data4neg:
            assert len(_bs) == 6
            assert len(bs) == 4
            f(_bss, _bs)
            f(bss, bs)
        def g(bs, /):
            if len(bs) == 1:
                [b] = bs
                return str(b)
            assert len(bs) == 2, (bs, _bss, bss, ls4data4neg)
            return 'x'
        _s = ''.join(map(g, _bss))
        s = ''.join(map(g, bss))
        #print_err(f'=== 共通位:{_acc:0>6b}:{acc:0>4b}')
        print_err(f'=== 共通位:{_s}:{s}')
            #失败者 共通位:0xxx11:1xxx
                #成功者 都不匹配 此模板

    if 欤统计:
        o2ls = output2ls4bbb_param_result
        o_ls_pairs = sorted(o2ls.items())
        print_err('='*22, '统计:归类数量', len(o_ls_pairs), total:=sum(len(ls) for output, ls in o_ls_pairs))
        #output2ls4sz = fmap4dict_value(len, o2ls)
        for output, ls in o_ls_pairs:
            print_err(output, len(ls))
        #print_err('='*22, '统计:归类极大值', len(maxs))
        print_err('===', '输出名', onms)
        print_err('===', '参数名', normal_nms, special_nms)
        ls4last_sss = []
        全部是末尾覆盖 = True
        for output, ls in o_ls_pairs:
            print_err('='*9, '类组', output, len(ls))
            jjs = []
            for (bbb, _bs, bs, param, result) in ls:
                bbb = [*map(int, bbb)]
                bbb_str = _to_digits_str(bbb)
                _bs_str = _to_digits_str(_bs)
                bs_str = _to_digits_str(bs)
                sss = bbb_str, _bs_str, bs_str
                print_err(output, bbb_str, _bs_str, bs_str, sep=':')
                _j = int(_bs_str, 2)
                j = int(bs_str, 2)
                jjs.append((_j,j))
            last_sss = sss
            jjs
            _acc = acc = 0
            for _j, j in jjs:
                _acc |= _j
                acc |= j
            _cover = _acc == _j
            cover = acc == j
            assert _cover and cover
                #全都是 末尾 覆盖/唯一极大值
            r'''
这些反例已不存在:因为 0xxxxx:11xx 模式 被禁止:
    !! [欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
========= 类组 0223243 3
0223243:100:001111:1000
0223243:100:001111:1100
0223243:000:011111:1000
>末尾:覆盖:不覆盖
========= 类组 0223254 3
0223254:000:001111:1001
0223254:000:001111:1101
0223254:000:011111:1001
>末尾:覆盖:不覆盖
========= 类组 0223344 3
0223344:000:001111:1010
0223344:000:001111:1110
0223344:000:011111:1010
>末尾:覆盖:不覆盖
========= 类组 0223354 3
0223354:100:001111:1011
0223354:100:001111:1111
0223354:000:011111:1011
>末尾:覆盖:不覆盖

            '''#''' 反例:末尾-不覆盖
            if _cover and cover:
                print_err('>末尾:覆盖')
            elif not _cover and not cover:
                print_err('>末尾:不覆盖')
            elif not _cover and cover:
                print_err('>末尾:不覆盖:覆盖')
            elif _cover and not cover:
                print_err('>末尾:覆盖:不覆盖')
            else:
                raise 000
            if _cover and cover:
                ls4last_sss.append(last_sss)
            else:
                全部是末尾覆盖 = False

        全部是末尾覆盖
        ls4last_sss
        assert 全部是末尾覆盖
        if 全部是末尾覆盖:
            print_err('=== 全部是 <<== 末尾 覆盖/唯一极大值', len(ls4last_sss))
        else:
            print_err('=== 部分 <<== 末尾 覆盖/唯一极大值', len(ls4last_sss))
        for (output, ls), last_sss in zip(o_ls_pairs, ls4last_sss):
            bbb_str, _bs_str, bs_str = last_sss
            print_err(output, bbb_str, _bs_str, bs_str, sep=':')
        print_err()
    ######################
    ######################
    ######################
    if 欤统计 and 欤去除冫非对称性:
        #!! 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
        assert 全部是末尾覆盖
        assert normal_nms == ('欤左取艹缘', '欤右取艹缘', '欤左出艹缎', '欤右出艹缎', '欤左入艹缎', '欤右入艹缎')
        assert special_nms == ('欤合并艹缎', '欤分裂艹缎', '欤左增删防震荡', '欤右增删防震荡')
        assert onms == ['最小节点数纟左翼', '最小节点数纟右翼', '最小节点数纟更深节点', '最大节点数纟更深节点', '最大节点数纟左翼', '最大节点数纟右翼', '最大节点数纟光杆树']
        bsbs2o = {}
        for output, ls in o_ls_pairs:
            for (bbb, _bs, bs, param, result) in ls:
                bsbs2o[_bs, bs] = output
        bsbs2o
        assert len(bsbs2o) == total
        flipped_bsbs2flipped_o = {}
        flipped_bsbs2bsbs = {}
        for output, ls in o_ls_pairs:
            for (bbb, _bs, bs, param, result) in ls:
                #_辅助推导冫对称冫标识名扌
                flipped_result = _辅助推导冫对称冫映射表扌(result)
                _flipped_bs = tuple(flipped_result[nm] for nm in normal_nms)
                flipped_bs = tuple(flipped_result[nm] for nm in special_nms)
                flipped_output_uints = tuple(flipped_result[nm] for nm in onms)
                flipped_output = _to_digits_str(flipped_output_uints)
                flipped_bsbs2flipped_o[_flipped_bs, flipped_bs] = flipped_output
                flipped_bsbs2bsbs[_flipped_bs, flipped_bs] = (_bs, bs)
        flipped_bsbs2bsbs
        flipped_bsbs2flipped_o
        bsbs2o
        from seed.mapping_tools.dict_op import mapping_grouped_zipped_symmetric_partition__immutable
        from seed.tiny import dict_add__new, fmap4dict_value, group4dict_value# filter4dict_value, dict_add__is, dict_add__eq
        from seed.mapping_tools.dict_op import inv__k2vs_to_v2ks
        (lonly_dict, grouped_zipped_common_dict, ronly_dict) = mapping_grouped_zipped_symmetric_partition__immutable(None, bsbs2o, flipped_bsbs2flipped_o)
        assert len(lonly_dict) == len(ronly_dict)
        #xxx:assert [*grouped_zipped_common_dict] == [True]
        diff = grouped_zipped_common_dict.get(False, {})
        same = grouped_zipped_common_dict[True]
        assert len(ronly_dict) + len(diff) + len(same) == len(bsbs2o) == len(flipped_bsbs2flipped_o)
        print_err('='*22, '统计:欤去除冫非对称性', 'total', len(bsbs2o), 'same', len(same), 'diff', len(diff), 'miss_matched', len(ronly_dict))
        #for flipped_bsbs, flipped_output in sorted(flipped_bsbs2flipped_o.items()):
            #bsbs = flipped_bsbs2bsbs[flipped_bsbs]
            #output = bsbs2o[bsbs]
            ######################
        #for k, (flipped_bsbs, flipped_output) in enumerate([sorted(same.items()), sorted(diff.items()), sorted(ronly_dict.items()), sorted(lonly_dict.items())]):
        def mk_str(bsbs, old_output, new_output, /):
            (_bs, bs) = bsbs
            _bs_str = _to_digits_str(_bs)
            bs_str = _to_digits_str(bs)
            return f'{_bs_str}:{bs_str}:{old_output}:{new_output}'
        bsbs2output_ls = {}
        for same_bsbs, (same_output, _same_output) in sorted(same.items()):
            assert same_output == _same_output
            s = mk_str(same_bsbs, same_output, '==')
            print_err(s, '#==')
            dict_add__new(bsbs2output_ls, same_bsbs, [same_output])
        for diff_bsbs, (old_output, new_output) in sorted(diff.items()):
            assert not old_output == new_output
            u4 = _4cmp(old_output, new_output)
            s = mk_str(diff_bsbs, old_output, new_output)
            print_err(s, f'#{u4:0>2b}', end='')
            assert 1 <= u4 <= 3
            if u4 == 0b11:
                ls = [old_output, new_output]
                print_err(' #<>')
            elif u4 == 0b10:
                ls = [new_output]
                print_err(' #>')
            elif u4 == 0b01:
                ls = [old_output]
                print_err(' #<')
            else:
                raise 000
            dict_add__new(bsbs2output_ls, diff_bsbs, ls)
        for flipped_bsbs, flipped_output in sorted(ronly_dict.items()):
            assert not flipped_bsbs in bsbs2o
            assert flipped_bsbs in flipped_bsbs2flipped_o
            s = mk_str(flipped_bsbs, '--', flipped_output)
            print_err(s, '#>>')
            dict_add__new(bsbs2output_ls, flipped_bsbs, [flipped_output])
        for bsbs, output in sorted(lonly_dict.items()):
            assert bsbs in bsbs2o
            assert not bsbs in flipped_bsbs2flipped_o
            s = mk_str(bsbs, output, '--')
            print_err(s, '#<<')
            dict_add__new(bsbs2output_ls, bsbs, [output])
        bsbs2output_ls
        print_err()
        o2bsbs_ls = fmap4dict_value(sorted, inv__k2vs_to_v2ks(bsbs2output_ls))
        assert (__0:=sum(map(len, o2bsbs_ls.values()))) == (__1:=sum(map(len, bsbs2output_ls.values()))), (__0, __1)
        bsbs2s = _bsbs2s
        def bsbs2j(bsbs, /):
            s = bsbs2s(bsbs)
            return int(s, 2)
        def bsbs_ls2js(bsbs_ls, /):
            return [*map(bsbs2j, bsbs_ls)]
        def js2is_last_max(js, /):
            acc = 0
            _j = -1
            for j in js:
                assert _j < j, (_j, j)
                _j = j
                acc |= j
            return acc == js[-1]
        o2js = fmap4dict_value(bsbs_ls2js, o2bsbs_ls)
        is_last_max2o2js = group4dict_value(js2is_last_max, o2js)
        #o2js__multi_maxs = is_last_max2o2js[False]
        assert not False in is_last_max2o2js
        assert len(is_last_max2o2js) == 1
        o2js__one_max = is_last_max2o2js[True]
        print_err('='*11, '去除非对称假设重新归组', len(o2bsbs_ls))
        ls4o__maxs__non_maxs = []
        for output, bsbs_ls in sorted(o2bsbs_ls.items()):
            ss = [*map(bsbs2s, bsbs_ls)]
            (maxs, non_maxs) = _distinguish_maxs(ss)
            assert (len(maxs) == 1) is (output in o2js__one_max), (output, maxs)
            assert (len(maxs) == 1)
                # ==>> 唯一极大值
            print_err('='*9, '类组', output, len(bsbs_ls), len(maxs), len(non_maxs))
            print_err('='*3, 'maxs', len(maxs))
            for s in maxs:
                print_err(f'{output}:{s} # >...')
            print_err('='*3, 'non_maxs', len(non_maxs))
            for s in non_maxs:
                print_err(f'{output}:{s} # <...')
            ls4o__maxs__non_maxs.append((output, maxs, non_maxs))
        ls4o__maxs__non_maxs
        assert [*is_last_max2o2js] == [True]
        for output, [max_s], non_maxs in ls4o__maxs__non_maxs:
            _检查冫类组丶参数组牜返回最大参数组扌(output, max_s, 欤最大参数组=True)
            for s in non_maxs:
                _检查冫类组丶参数组牜返回最大参数组扌(output, s, 欤最大参数组=False)
        print_err('=== 全部是 <<== 末尾 覆盖/唯一极大值', len(ls4o__maxs__non_maxs), '# 隐藏非最大')
        for output, [max_s], non_maxs in ls4o__maxs__non_maxs:
            print_err(f'{output}:{max_s} # 1>... #', len(non_maxs))
        print_err('=== 全部是 <<== 末尾 覆盖/唯一极大值', len(ls4o__maxs__non_maxs), '# 显示所有:折叠')
        for output, [max_s], non_maxs in ls4o__maxs__non_maxs:
            s4nonmax = ','.join(non_maxs)
            print_err(f'{output}:{max_s} > [{s4nonmax}] # 1>... #', len(non_maxs))
        assert total == len(bsbs2o)
        total2 = sum(map(len, o2bsbs_ls.values()))
        assert total2 == (__:=sum(map(len, bsbs2output_ls.values()))), (total2, __)
        sz4multi = sum(len(output_ls) >= 2 for output_ls in bsbs2output_ls.values())
        set4max_s = {max_s for output, [max_s], non_maxs in ls4o__maxs__non_maxs}
        s2output_ls = {bsbs2s(bsbs):output_ls for bsbs, output_ls in bsbs2output_ls.items()}
        assert len(s2output_ls) == len(bsbs2output_ls)
        o2max_s = {output:max_s for output, [max_s], non_maxs in ls4o__maxs__non_maxs}
        s2max_s_ls = fmap4dict_value(lambda output_ls:sorted(o2max_s[output] for output in output_ls), s2output_ls)
        ls4sab = []
        ls4sb = []
        for s, max_s_ls in s2max_s_ls.items():
            if len(max_s_ls) >= 2:
                a, b = max_s_ls
                #assert _4cmp(a,b) == 0b01, (s, a, b)
                    #AssertionError: ('000011_1000', '010011_1000', '100011_1000')
                if not _4cmp(a,b) == 0b01:
                    assert s[:2] == '00'
                    assert a[:2] == '01'
                    assert b[:2] == '10'
                    assert a[2:] == b[2:] == s[2:]
                    ls4sab.append((s, a, b))
                else:
                    assert s == a
                    ls4sb.append((s, b))
        ls4sab
        ls4sb
        print_err('=== 多对多:非极大00xxx->(极大01xxx,极大10xxx)', len(ls4sab))
        for (s, a, b) in ls4sab:
            print_err(f'{s} < {a}<>{b}')
        print_err('=== 多对多:极大->(==极大,<极大)', len(ls4sb))
        for (s, b) in ls4sb:
            print_err(f'{s} == max < {b}')
        assert len(ls4sab) == 9
        assert len(ls4sb) == 0
        s2js8max = fmap4dict_value(lambda max_s_ls:[int(max_s,2) for max_s in max_s_ls], s2max_s_ls)
        #.fmap4dict_value(js2is_last_max, s2js8max)
        sz4max_and_multi = sum(bsbs2s(bsbs) in set4max_s for bsbs, output_ls in bsbs2output_ls.items() if len(output_ls) >= 2)

        print_err('=== 多对多', sz4multi)
        s2multi_outputs = {}
        for bsbs, output_ls in sorted(bsbs2output_ls.items()):
            if len(output_ls) >= 2:
                assert len(output_ls) == 2
                s4bsbs = bsbs2s(bsbs)
                s4output_ls = ','.join(output_ls)
                print_err(f'{s4bsbs}:{s4output_ls}')
                dict_add__new(s2multi_outputs, s4bsbs, output_ls)
        assert len(s2multi_outputs) == sz4multi
        类组总数 = len(ls4o__maxs__non_maxs)
        参数组总数 = len(bsbs2output_ls)
        类组参数组关联总数 = total2
        多对多关联的参数组总数 = sz4multi
        多对多关联的最大参数组总数 = sz4max_and_multi
        print_err('=== 全部是 <<== 末尾 覆盖/唯一极大值:', '类组总数=', 类组总数, ', 参数组总数=', 参数组总数, ', 类组参数组关联总数=', 类组参数组关联总数, ', 多对多关联的参数组总数=', 多对多关联的参数组总数, ', 多对多关联的最大参数组总数=', 多对多关联的最大参数组总数, ' # 显示所有:扁平反转:参数组->极大参数组->类组 #max#multi#max_and_multi', sep='')
        n4output = 0
        n4relation = 0
        n4max = 0
        n4multi = 0
        n4max_and_multi = 0
        for output, [max_s], non_maxs in ls4o__maxs__non_maxs:
            n4output += 1
            for s in non_maxs+[max_s]:
                n4relation += 1
                print_err(f'{s}:{max_s}:{output}', end='')
                c = 0
                if s == max_s:
                    print_err(' #max', end='')
                    c += 1
                    n4max += 1
                if s in s2multi_outputs:
                    print_err(' #multi', end='')
                    c += 1
                    n4multi += 1
                if c == 2:
                    print_err(' #max_and_multi', end='')
                    n4max_and_multi += 1
                print_err()
        '=== 全部是 <<== 末尾 覆盖/唯一极大值:类组总数=76, 参数组总数=176, 类组参数组关联总数=185, 多对多关联的参数组总数=9, 多对多关联的最大参数组总数=0 # 显示所有:扁平反转:参数组->极大参数组->类组 #max#multi#max_and_multi'
        assert n4output == 类组总数 == len(set4max_s) == 76
        assert n4relation == 类组参数组关联总数 == 185
        assert n4max == 类组总数 == len(set4max_s) == 76
        assert n4multi == 2*多对多关联的参数组总数 == 2*9
        assert n4max_and_multi == 多对多关联的最大参数组总数 == 0
        assert 176 == 参数组总数
        print_err()
    ######################
    ######################
    ######################
    print_err('='*22)
    print_err()
    if items_vs_dict is False:
        return sorted(output2ls4bbb_param_result.items())
    return output2ls4bbb_param_result
def _distinguish_maxs(ss, /):
    assert len(ss)
    L = len(ss[0])
    for s in ss:
        check_type_is(str, s)
        assert len(s) == L
    ss = sorted(ss)
    maxs = []
    non_maxs = []
    while ss:
        s = ss.pop()
        if s is None:continue
        tt = []
        while ss:
            t = ss.pop()
            if t is None:continue
            u4 = _4cmp(t, s)
            if u4 == 0b01:
                #discard t
                non_maxs.append(t)
            elif u4 == 0b10:
                #discard s
                non_maxs.append(s)
                s = t
            elif u4 == 0b11:
                tt.append(t)
            elif u4 == 0b00:
                #eq:dup
                raise 000
            else:
                raise 000
        maxs.append(s)
        tt.reverse()
        ss = tt
    maxs.reverse()
    non_maxs.reverse()
    maxs.sort()
    non_maxs.sort()
    return (maxs, non_maxs)
def _4cmp(lhs, rhs, /):
    assert len(lhs) == len(rhs)
    if lhs == rhs:
        return 0b00
    if all(a <= b for a, b in zip(lhs, rhs)):
        return 0b01
    if all(a >= b for a, b in zip(lhs, rhs)):
        return 0b10
    return 0b11
#end-def _后处理_辅助推导冫蛮力穷举扌(items_vs_dict, args, /, *, 欤统计):
#end-def _辅助推导冫蛮力穷举扌():

def _辅助推导冫对称冫标识名扌(nm, /):
    def f(s0, s1, nm, /):
        if s0 in nm:
            assert s1 not in nm
            nm = nm.replace(s0, s1)
        return nm
    def ff(s0, s1, nm, /):
        _nm = f(s0, s1, nm)
        if _nm is nm:
            _nm = f(s1, s0, nm)
        return _nm
    return ff('左', '右', nm)
def _辅助推导冫对称冫映射表扌(name2uint, /):
    f = _辅助推导冫对称冫标识名扌
    d = {f(nm):u for nm, u in name2uint.items()}
    assert d.keys() == name2uint.keys(), ((d.keys() - name2uint.keys()), (name2uint.keys() - d.keys()))
    return d
def _辅助推导冫欤对称扌(name2uint, /):
    def f(s0, s1, nm, u, /):
        if s0 in nm:
            assert s1 not in nm
            nm_ = nm.replace(s0, s1)
            if not name2uint[nm_] == u:
                return False
        return True
    def ff(s0, s1, nm, u, /):
        b01 = f(s0, s1, nm, u)
        b10 = f(s1, s0, nm, u)
        return b01 and b10
    return all(ff('左', '右', nm, u) for nm, u in name2uint.items())
def _辅助推导冫参数补充扌(name2uint, /):
    ######################
    # [欤分裂艹缎*欤合并艹缎 <= 欤左取艹缘 <= 欤右取艹缘]
    # [0 <= 欤合并艹缎 <= 欤左入艹缎*欤右入艹缎]
    # [0 <= 欤分裂艹缎 <= 欤左出艹缎*欤右出艹缎]
    # [0 <= 欤左增删防震荡 <= 欤左出艹缎*欤左入艹缎]
    # [0 <= 欤右增删防震荡 <= 欤右出艹缎*欤右入艹缎]
    ######################
    # 囹:[欤左取艹缘 =[def]= [最小节点数纟左翼>=1]]
    # 囹:[欤右取艹缘 =[def]= [最小节点数纟右翼>=1]]
    # 非对称:额外假设:囹:[最小节点数纟左翼<=最小节点数纟右翼]
    ######################
    d0 = name2uint
    name2uint = {nm:int(v) if type(v) is bool else v for nm,v in name2uint.items()}
    ls4ls4nm_nms4low_nms4up = _辅助推导冫真值变量关系扌()
    ######################
    for ls4nm_nms4low_nms4up in ls4ls4nm_nms4low_nms4up:
      ######################
      for nm, nms4low, nms4up in ls4nm_nms4low_nms4up:
        if name2uint.get(nm):
            for s in nms4up:
                if not name2uint.setdefault(s, 1): raise ValueError((nm, s), d0, name2uint)
                assert name2uint[s] == 1
      ######################
      for nm, nms4low, nms4up in ls4nm_nms4low_nms4up:
        for s in nms4up:
            if not name2uint.get(s, 1):
                if name2uint.setdefault(nm, 0): raise ValueError((nm, s))
                assert name2uint[nm] == 0, (nm, name2uint[nm])
      ######################
      for nm, nms4low, nms4up in ls4nm_nms4low_nms4up:
        if not name2uint.get(nm, 1):
            if nms4low and all(name2uint.get(s, 0) for s in nms4low): raise ValueError((nm, nms4low), d0, name2uint)
      ######################
      for nm, nms4low, nms4up in ls4nm_nms4low_nms4up:
        if nms4low and all(name2uint.get(s, 0) for s in nms4low):
            if not name2uint.setdefault(nm, 1): raise ValueError((nm, nms4low))
            assert name2uint[nm] == 1, (nm, name2uint[nm])
    ######################
    nmss = [('欤左取艹缘', '最小节点数纟左翼'), ('欤右取艹缘', '欤右取艹缘')]
    ######################
    for a, b in nmss:
        if not a in name2uint:
            continue
        if name2uint[a] == 0:
            if not name2uint.setdefault(b, 0) == 0: raise ValueError((a, b))
        else:
            if not name2uint.get(b, 1): raise ValueError((a, b))
    ######################
    for a, b in nmss:
        if not b in name2uint:
            continue
        if name2uint[b] == 0:
            if not name2uint.setdefault(a, 0) == 0: raise ValueError((a, b))
        else:
            if not name2uint.setdefault(a, 1) == 1: raise ValueError((a, b))
    ######################
    return name2uint
def _辅助推导冫构造类型纟多项式扌():
    from seed.math.polynomial.simple_polynomial import mk_type_Polynomial8PyExpr__str
    T, j2poly = mk_type_Polynomial8PyExpr__str(r'''
欤左取艹缘
欤右取艹缘
欤左出艹缎
欤右出艹缎
欤左入艹缎
欤右入艹缎
欤合并艹缎
欤分裂艹缎
欤左增删防震荡
欤右增删防震荡

弛最小节点数纟左翼
弛最小节点数纟右翼
弛最小节点数纟更深节点
弛最优节点数纟更深节点
弛最大节点数纟更深节点
弛最大节点数纟左翼
弛最大节点数纟右翼
弛最大节点数纟光杆树

最大值纟弛最小节点数纟更深节点乊合并
自由值纟节点数纟右翼
自由值纟节点数纟左翼
上限纟最大节点数纟光杆树
变动部纟下限纟最大节点数纟光杆树
允负固定部纟下限纟最大节点数纟光杆树
下限纟最大节点数纟光杆树
最大值纟弛最大节点数纟光杆树

最小节点数纟左翼
最小节点数纟右翼
最小节点数纟更深节点
最优节点数纟更深节点
最大节点数纟更深节点
最大节点数纟左翼
最大节点数纟右翼
最大节点数纟光杆树
    '''#'''
    ,with_polys=True
    )
    return T, j2poly
def _辅助推导扌(ls_vs_triple=False, /, **name2uint):
    name2uint = _辅助推导冫参数补充扌(name2uint)
    (T, j2poly) = _辅助推导冫构造类型纟多项式扌()
    var_nms = T.get_var_names()
    assert not (__:=name2uint.keys() -set(var_nms)), __
    name2poly = {nm:T.mk5int(u) for nm, u in name2uint.items()}
    ######################
    欤全真值冫参数 = name2uint.keys() == {nm for nm in var_nms if nm.startswith('欤')}
    欤对称冫参数 = _辅助推导冫欤对称扌(name2uint)
    欤对称冫输出乊全真值乊左右取 = 欤全真值冫参数 and 欤对称冫参数 and  name2uint['欤左取艹缘'] == 1
    ######################
    [欤左取艹缘
    ,欤右取艹缘
    ,欤左出艹缎
    ,欤右出艹缎
    ,欤左入艹缎
    ,欤右入艹缎
    ,欤合并艹缎
    ,欤分裂艹缎
    ,欤左增删防震荡
    ,欤右增删防震荡
    #
    ,弛最小节点数纟左翼
    ,弛最小节点数纟右翼
    ,弛最小节点数纟更深节点
    ,弛最优节点数纟更深节点
    ,弛最大节点数纟更深节点
    ,弛最大节点数纟左翼
    ,弛最大节点数纟右翼
    ,弛最大节点数纟光杆树
    #
    ,最大值纟弛最小节点数纟更深节点乊合并
    ,自由值纟节点数纟右翼
    ,自由值纟节点数纟左翼
    ,上限纟最大节点数纟光杆树
    ,变动部纟下限纟最大节点数纟光杆树
    ,允负固定部纟下限纟最大节点数纟光杆树
    ,下限纟最大节点数纟光杆树
    ,最大值纟弛最大节点数纟光杆树
    #
    ,最小节点数纟左翼
    ,最小节点数纟右翼
    ,最小节点数纟更深节点
    ,最优节点数纟更深节点
    ,最大节点数纟更深节点
    ,最大节点数纟左翼
    ,最大节点数纟右翼
    ,最大节点数纟光杆树
    ] = j2poly
    # [0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]
    # [0 <= 弛最大节点数纟光杆树 <= 最大值纟弛最大节点数纟光杆树]
    # [变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]

    d = (dict
(最大值纟弛最小节点数纟更深节点乊合并 = (最小节点数纟左翼+最小节点数纟右翼 -2-欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎)*欤左入艹缎*欤右入艹缎*欤合并艹缎
,自由值纟节点数纟左翼 = (最大节点数纟左翼-最小节点数纟左翼)
,自由值纟节点数纟右翼 = (最大节点数纟右翼-最小节点数纟右翼)
,上限纟最大节点数纟光杆树 = ((最大节点数纟左翼+最大节点数纟右翼-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))
#[变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
,允负固定部纟下限纟最大节点数纟光杆树 = (最小节点数纟左翼+最小节点数纟右翼-1)*(1-(1-欤左出艹缎)*(1-欤右出艹缎))
,下限纟最大节点数纟光杆树 = 允负固定部纟下限纟最大节点数纟光杆树+变动部纟下限纟最大节点数纟光杆树
,最大值纟弛最大节点数纟光杆树 = 上限纟最大节点数纟光杆树 -下限纟最大节点数纟光杆树
,弛最优节点数纟更深节点 = T.mk5int(0)
    # !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
,最小节点数纟左翼 = 弛最小节点数纟左翼+欤左取艹缘
#xxx,最小节点数纟右翼 = 弛最小节点数纟右翼+欤右取艹缘*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘
,最小节点数纟右翼 = 弛最小节点数纟右翼+((2*欤左入艹缎*欤右入艹缎*欤合并艹缎+欤右取艹缘*(1-欤左入艹缎*欤右入艹缎*欤合并艹缎))*(1-欤左取艹缘)+最小节点数纟左翼*欤左取艹缘)
,最小节点数纟更深节点 = 弛最小节点数纟更深节点+2+欤右取艹缘*(最小节点数纟右翼-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎
,最优节点数纟更深节点=弛最优节点数纟更深节点+最小节点数纟更深节点
,最大节点数纟更深节点 = 弛最大节点数纟更深节点 + (最小节点数纟更深节点 +(最小节点数纟更深节点-1)*欤左入艹缎*欤右入艹缎*欤合并艹缎)
,最大节点数纟左翼 = 弛最大节点数纟左翼 + (最小节点数纟左翼+(最大节点数纟更深节点-1+欤左增删防震荡*欤左入艹缎)*欤左出艹缎+(最小节点数纟更深节点-1)*欤左入艹缎*(1-欤左出艹缎))
,最大节点数纟右翼 = 弛最大节点数纟右翼 + (最小节点数纟右翼+(最大节点数纟更深节点-1+欤右增删防震荡*欤右入艹缎)*欤右出艹缎+(最小节点数纟更深节点-1)*欤右入艹缎*(1-欤右出艹缎))
,最大节点数纟光杆树 = 弛最大节点数纟光杆树+下限纟最大节点数纟光杆树
))
    d.update(name2poly)
    p0 = T.mk5int(0)
    d = _自反替换暨尝试设置变动部扌(p0, d)
    ps = _排序爫多项式变量扌(T, d)

    ss = [*''
    ,'[0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]'
    ,'[0 <= 弛最大节点数纟光杆树 <= 最大值纟弛最大节点数纟光杆树]'
    ,'[变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]'
    #see:_辅助推导冫参数补充扌
    #see:_辅助推导冫真值变量关系扌
    ]
    ls = [*ps]
    from seed.text.useful_regex_patterns import nm__regex, qnm__regex
    ex_nms = []
    for s in ss:
        m = nm__regex.search(s)
        nm = m.group(0)
        ex_nms.append(nm)
        ls.append((nm, s))
        assert not nm in d
    for nm in var_nms:
        if nm in d or nm in ex_nms:
            continue
        if nm.startswith('弛'):
            ls.append((nm, f'[{nm} >= 0]'))
            continue
        assert nm.startswith('欤'), nm
        ls.append((nm, f'[0 <= {nm} <= 1]'))
    if 0:
        ps = tuple(ls)
        return ps
    #xxx:ls.append('='*22 + '以下:将弛变量全部置零,将逆弛变量设置为最大值')
    ls.append('='*22 + '以下:将弛变量全部置零')
    d__set0 = dict(d)
    for nm in var_nms:
        if nm.startswith('弛') and not nm in d:
            d__set0[nm] = p0
        #xxx:elif nm.startswith('逆弛') and not nm in d:
        #    d__set0[nm] = d__set0['最大值纟'+nm]
    d__set0
    d__set0 = _自反替换暨尝试设置变动部扌(p0, d__set0)

    ps__set0 = _排序爫多项式变量扌(T, d__set0)


    ls += ps__set0
    if ls_vs_triple is False:
        return tuple(ls)
    return ((d, ps), (d__set0, ps__set0), tuple(ls))
#end-0-def _辅助推导扌(**name2uint):
def _自反替换暨尝试设置变动部扌(p0, d, /):
    from seed.tiny import dict_add__eq

    d = _自反替换扌(d)

    try:
        i2 = -int(d['允负固定部纟下限纟最大节点数纟光杆树'])
        u0 = int(d['自由值纟节点数纟左翼'])
        u1 = int(d['自由值纟节点数纟右翼'])
        b0 = int(d['欤左出艹缎'])
        b1 = int(d['欤右出艹缎'])
    except IndexError:
        pass
    else:
        #xxx:d['上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树'] = p0+min(u0, u1)
        x = p0+max(i2,u1*b0,u0*b1)
        dict_add__eq(d, '变动部纟下限纟最大节点数纟光杆树', x)
            # [变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
        d = _自反替换扌(d)
    d
    return d
def _自反替换扌(d, /):
    r = None
    while not r == d:
        r = d
        d = {nm:p.substitute__name4var(d) for nm, p in d.items()}
    return d
def _排序爫多项式变量扌(T, d, /):
    ps = sorted(d.items(), key=lambda kv:T.var5name(kv[0]))
    return ps
#end-def _辅助推导扌(**name2uint):
def _自反替换暨尝试设置变动部牜翅膀一致扌(p0, d, /):
    from seed.tiny import dict_add__eq

    d = _自反替换扌(d)

    try:
        i2 = -int(d['固定部纟下限纟最大节点数纟光杆树'])
        u0 = int(d['自由值纟节点数纟翅膀'])
        u1 = int(d['自由值纟节点数纟翅膀'])
        b0 = int(d['欤左出艹缎'])
        b1 = int(d['欤右出艹缎'])
    except IndexError:
        pass
    else:
        #xxx:d['上限乊简化退化乊双侧删纟逆弛最大节点数纟光杆树'] = p0+min(u0, u1)
        x = p0+max(i2,u1*b0,u0*b1)
        dict_add__eq(d, '变动部纟下限纟最大节点数纟光杆树', x)
            # [变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
        d = _自反替换扌(d)
    d
    return d
def _辅助推导冫构造类型纟多项式牜翅膀一致扌():
    from seed.math.polynomial.simple_polynomial import mk_type_Polynomial8PyExpr__str
    T, j2poly = mk_type_Polynomial8PyExpr__str(r'''
欤左取艹缘
欤右取艹缘
欤左出艹缎
欤右出艹缎
欤左入艹缎
欤右入艹缎
欤合并艹缎
欤分裂艹缎
欤左增删防震荡
欤右增删防震荡

弛最小节点数纟翅膀
弛最小节点数纟更深节点
弛最优节点数纟更深节点
弛最大节点数纟更深节点
弛最大节点数纟翅膀
弛最大节点数纟光杆树

最大值纟弛最小节点数纟更深节点乊合并
自由值纟节点数纟翅膀
上限纟最大节点数纟光杆树
变动部纟下限纟最大节点数纟光杆树
固定部纟下限纟最大节点数纟光杆树
下限纟最大节点数纟光杆树
最大值纟弛最大节点数纟光杆树

最小节点数纟翅膀
最小节点数纟更深节点
最优节点数纟更深节点
最大节点数纟更深节点
最大节点数纟翅膀
最大节点数纟光杆树
    '''#'''
    ,with_polys=True
    )
    return T, j2poly
def _辅助推导牜翅膀一致扌(ls_vs_triple=False, /, **name2uint):
    name2uint = _辅助推导冫参数补充扌(name2uint)
    (T, j2poly) = _辅助推导冫构造类型纟多项式牜翅膀一致扌()
    var_nms = T.get_var_names()
    assert not (__:=name2uint.keys() -set(var_nms)), __
    name2poly = {nm:T.mk5int(u) for nm, u in name2uint.items()}
    ######################
    欤全真值冫参数 = name2uint.keys() == {nm for nm in var_nms if nm.startswith('欤')}
    欤对称冫参数 = _辅助推导冫欤对称扌(name2uint)
    欤对称冫输出乊全真值乊左右取 = 欤全真值冫参数 and 欤对称冫参数 and  name2uint['欤左取艹缘'] == 1
    assert 欤对称冫输出乊全真值乊左右取
    # [欤对称冫输出乊全真值乊左右取 is True]
    ######################
    [欤左取艹缘
    ,欤右取艹缘
    ,欤左出艹缎
    ,欤右出艹缎
    ,欤左入艹缎
    ,欤右入艹缎
    ,欤合并艹缎
    ,欤分裂艹缎
    ,欤左增删防震荡
    ,欤右增删防震荡
    #
    ,弛最小节点数纟翅膀
    ,弛最小节点数纟更深节点
    ,弛最优节点数纟更深节点
    ,弛最大节点数纟更深节点
    ,弛最大节点数纟翅膀
    ,弛最大节点数纟光杆树
    #
    ,最大值纟弛最小节点数纟更深节点乊合并
    ,自由值纟节点数纟翅膀
    ,上限纟最大节点数纟光杆树
    ,变动部纟下限纟最大节点数纟光杆树
    ,固定部纟下限纟最大节点数纟光杆树
    ,下限纟最大节点数纟光杆树
    ,最大值纟弛最大节点数纟光杆树
    #
    ,最小节点数纟翅膀
    ,最小节点数纟更深节点
    ,最优节点数纟更深节点
    ,最大节点数纟更深节点
    ,最大节点数纟翅膀
    ,最大节点数纟光杆树
    ] = j2poly
    # [0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]
    # [0 <= 弛最大节点数纟光杆树 <= 最大值纟弛最大节点数纟光杆树]
    # [变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]

    d = (dict
(最大值纟弛最小节点数纟更深节点乊合并 = (最小节点数纟翅膀+最小节点数纟翅膀 -2-欤右取艹缘*(最小节点数纟翅膀-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎)*欤左入艹缎*欤右入艹缎*欤合并艹缎
,自由值纟节点数纟翅膀 = (最大节点数纟翅膀-最小节点数纟翅膀)
# !! [欤对称冫输出乊全真值乊左右取 is True]
,上限纟最大节点数纟光杆树 = ((最大节点数纟翅膀+最大节点数纟翅膀-1)*(1-(1-欤左入艹缎)*(1-欤右入艹缎)) +7777700000*(1-欤左入艹缎)*(1-欤右入艹缎))
#[变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]
,变动部纟下限纟最大节点数纟光杆树 = 自由值纟节点数纟翅膀*欤左出艹缎*欤右出艹缎
,固定部纟下限纟最大节点数纟光杆树 = (最小节点数纟翅膀+最小节点数纟翅膀-1)*(1-(1-欤左出艹缎)*(1-欤右出艹缎))
,下限纟最大节点数纟光杆树 = 固定部纟下限纟最大节点数纟光杆树+变动部纟下限纟最大节点数纟光杆树
,最大值纟弛最大节点数纟光杆树 = 上限纟最大节点数纟光杆树 -下限纟最大节点数纟光杆树
,弛最优节点数纟更深节点 = T.mk5int(0)
    # !! 额外假设:囹:[最优节点数纟更深节点==最小节点数纟更深节点]
,最小节点数纟翅膀 = 弛最小节点数纟翅膀+欤左取艹缘
,最小节点数纟更深节点 = 弛最小节点数纟更深节点+2+欤右取艹缘*(最小节点数纟翅膀-1)*欤左出艹缎*欤右出艹缎*欤分裂艹缎
,最优节点数纟更深节点=弛最优节点数纟更深节点+最小节点数纟更深节点
,最大节点数纟更深节点 = 弛最大节点数纟更深节点 + (最小节点数纟更深节点 +(最小节点数纟更深节点-1)*欤左入艹缎*欤右入艹缎*欤合并艹缎)
,最大节点数纟翅膀 = 弛最大节点数纟翅膀 + (最小节点数纟翅膀+(最大节点数纟更深节点-1+欤左增删防震荡*欤左入艹缎)*欤左出艹缎+(最小节点数纟更深节点-1)*欤左入艹缎*(1-欤左出艹缎))
,最大节点数纟光杆树 = 弛最大节点数纟光杆树+下限纟最大节点数纟光杆树
))
    d.update(name2poly)
    p0 = T.mk5int(0)
    d = _自反替换暨尝试设置变动部牜翅膀一致扌(p0, d)
    ps = _排序爫多项式变量扌(T, d)

    ss = [*''
    ,'[0 <= 弛最小节点数纟更深节点 <= 最大值纟弛最小节点数纟更深节点乊合并 if 欤左入艹缎*欤右入艹缎*欤合并艹缎 else +oo]'
    ,'[0 <= 弛最大节点数纟光杆树 <= 最大值纟弛最大节点数纟光杆树]'
    ###已有:,'[变动部纟下限纟最大节点数纟光杆树 == max(-允负固定部纟下限纟最大节点数纟光杆树,自由值纟节点数纟右翼*欤左出艹缎,自由值纟节点数纟左翼*欤右出艹缎)]'
    #see:_辅助推导冫参数补充扌
    #see:_辅助推导冫真值变量关系扌
    ]
    ls = [*ps]
    from seed.text.useful_regex_patterns import nm__regex, qnm__regex
    ex_nms = []
    for s in ss:
        m = nm__regex.search(s)
        nm = m.group(0)
        ex_nms.append(nm)
        ls.append((nm, s))
        assert not nm in d
    for nm in var_nms:
        if nm in d or nm in ex_nms:
            continue
        if nm.startswith('弛'):
            ls.append((nm, f'[{nm} >= 0]'))
            continue
        assert nm.startswith('欤'), nm
        ls.append((nm, f'[0 <= {nm} <= 1]'))
    if 0:
        ps = tuple(ls)
        return ps
    #xxx:ls.append('='*22 + '以下:将弛变量全部置零,将逆弛变量设置为最大值')
    ls.append('='*22 + '以下:将弛变量全部置零')
    d__set0 = dict(d)
    for nm in var_nms:
        if nm.startswith('弛') and not nm in d:
            d__set0[nm] = p0
        #xxx:elif nm.startswith('逆弛') and not nm in d:
        #    d__set0[nm] = d__set0['最大值纟'+nm]
    d__set0
    d__set0 = _自反替换暨尝试设置变动部牜翅膀一致扌(p0, d__set0)

    ps__set0 = _排序爫多项式变量扌(T, d__set0)


    ls += ps__set0
    if ls_vs_triple is False:
        return tuple(ls)
    return ((d, ps), (d__set0, ps__set0), tuple(ls))
#end-0-def _辅助推导牜翅膀一致扌(**name2uint):


_辅助推导冫输出文本 = (
r'''
#_辅助推导冫输出文本[欤去除冫非对称性:=True]
#76类组(节点数配置)模式:
^[012][012]2[23][012345][012345][01234]:
^\(11\|0[012]\|[012]0\)\(2[23]\)
^\(\(11\|02\|20\)23\|[01][01]22\)
    1123xxx,1122xxx
'''#'''
if 0 else
#[[[
r'''
=== 全部是 <<== 末尾 覆盖/唯一极大值 76 # 显示所有:折叠
0022000:000000_0000 > [] # 1>... # 0
0022010:000101_0000 > [000001_0000,000100_0000] # 1>... # 2
0022020:000101_0001 > [] # 1>... # 0
0022100:001010_0000 > [000010_0000,001000_0000] # 1>... # 2
0022110:001111_0100 > [000011_0000,000110_0000,000111_0000,001001_0000,001011_0000,001100_0000,001100_0100,001101_0000,001101_0100,001110_0000,001110_0100,001111_0000] # 1>... # 12
0022120:000111_0001 > [] # 1>... # 0
0022121:001111_0101 > [001101_0001,001101_0101,001111_0001] # 1>... # 3
0022200:001010_0010 > [] # 1>... # 0
0022210:001011_0010 > [] # 1>... # 0
0022211:001111_0110 > [001110_0010,001110_0110,001111_0010] # 1>... # 3
0022221:001111_0111 > [001111_0011] # 1>... # 1
0122010:010000_0000 > [] # 1>... # 0
0122020:010101_0000 > [010001_0000,010100_0000] # 1>... # 2
0122030:010101_0001 > [] # 1>... # 0
0122110:011010_0000 > [010010_0000,011000_0000] # 1>... # 2
0122120:010011_0000 > [] # 1>... # 0
0122121:011111_0100 > [010110_0000,010111_0000,011001_0000,011011_0000,011100_0000,011100_0100,011101_0000,011101_0100,011110_0000,011110_0100,011111_0000] # 1>... # 11
0122131:010111_0001 > [] # 1>... # 0
0122132:011111_0101 > [011101_0001,011101_0101,011111_0001] # 1>... # 3
0122210:011010_0010 > [] # 1>... # 0
0122221:011011_0010 > [] # 1>... # 0
0122222:011111_0110 > [011110_0010,011110_0110,011111_0010] # 1>... # 3
0122232:011111_0111 > [011111_0011] # 1>... # 1
0223130:010011_1000 > [000011_1000] # 1>... # 1
0223142:010111_1000 > [000111_1000] # 1>... # 1
0223152:010111_1001 > [000111_1001] # 1>... # 1
0223232:011011_1000 > [001011_1000] # 1>... # 1
0223243:011111_1000 > [001111_1000] # 1>... # 1
0223254:011111_1001 > [001111_1001] # 1>... # 1
0223332:011011_1010 > [001011_1010] # 1>... # 1
0223344:011111_1010 > [001111_1010] # 1>... # 1
0223354:011111_1011 > [001111_1011] # 1>... # 1
1022100:100000_0000 > [] # 1>... # 0
1022110:100101_0000 > [100001_0000,100100_0000] # 1>... # 2
1022120:100101_0001 > [] # 1>... # 0
1022200:101010_0000 > [100010_0000,101000_0000] # 1>... # 2
1022210:100011_0000 > [] # 1>... # 0
1022211:101111_0100 > [100110_0000,100111_0000,101001_0000,101011_0000,101100_0000,101100_0100,101101_0000,101101_0100,101110_0000,101110_0100,101111_0000] # 1>... # 11
1022221:100111_0001 > [] # 1>... # 0
1022222:101111_0101 > [101101_0001,101101_0101,101111_0001] # 1>... # 3
1022300:101010_0010 > [] # 1>... # 0
1022311:101011_0010 > [] # 1>... # 0
1022312:101111_0110 > [101110_0010,101110_0110,101111_0010] # 1>... # 3
1022322:101111_0111 > [101111_0011] # 1>... # 1
1122110:110000_0000 > [] # 1>... # 0
1122120:110001_0000 > [] # 1>... # 0
1122121:110101_0000 > [110100_0000] # 1>... # 1
1122131:110101_0001 > [] # 1>... # 0
1122210:110010_0000 > [] # 1>... # 0
1122211:111010_0000 > [111000_0000] # 1>... # 1
1122220:110011_0000 > [] # 1>... # 0
1122222:111111_0100 > [110110_0000,110111_0000,111001_0000,111011_0000,111100_0000,111100_0100,111101_0000,111101_0100,111110_0000,111110_0100,111111_0000] # 1>... # 11
1122232:110111_0001 > [] # 1>... # 0
1122233:111111_0101 > [111101_0001,111101_0101,111111_0001] # 1>... # 3
1122311:111010_0010 > [] # 1>... # 0
1122322:111011_0010 > [] # 1>... # 0
1122323:111111_0110 > [111110_0010,111110_0110,111111_0010] # 1>... # 3
1122333:111111_0111 > [111111_0011] # 1>... # 1
1123220:110011_1000 > [] # 1>... # 0
1123232:110111_1000 > [] # 1>... # 0
1123242:110111_1001 > [] # 1>... # 0
1123322:111011_1000 > [] # 1>... # 0
1123333:111111_1100 > [111111_1000] # 1>... # 1
1123344:111111_1101 > [111111_1001] # 1>... # 1
1123422:111011_1010 > [] # 1>... # 0
1123434:111111_1110 > [111111_1010] # 1>... # 1
1123444:111111_1111 > [111111_1011] # 1>... # 1
2023310:100011_1000 > [000011_1000] # 1>... # 1
2023322:100111_1000 > [000111_1000] # 1>... # 1
2023332:100111_1001 > [000111_1001] # 1>... # 1
2023412:101011_1000 > [001011_1000] # 1>... # 1
2023423:101111_1000 > [001111_1000] # 1>... # 1
2023434:101111_1001 > [001111_1001] # 1>... # 1
2023512:101011_1010 > [001011_1010] # 1>... # 1
2023524:101111_1010 > [001111_1010] # 1>... # 1
2023534:101111_1011 > [001111_1011] # 1>... # 1
=== 多对多:非极大00xxx->(极大01xxx,极大10xxx) 9
000011_1000 < 010011_1000<>100011_1000
000111_1000 < 010111_1000<>100111_1000
000111_1001 < 010111_1001<>100111_1001
001011_1000 < 011011_1000<>101011_1000
001011_1010 < 011011_1010<>101011_1010
001111_1000 < 011111_1000<>101111_1000
001111_1001 < 011111_1001<>101111_1001
001111_1010 < 011111_1010<>101111_1010
001111_1011 < 011111_1011<>101111_1011
=== 多对多:极大->(==极大,<极大) 0
=== 多对多 9
000011_1000:0223130,2023310
000111_1000:0223142,2023322
000111_1001:0223152,2023332
001011_1000:0223232,2023412
001011_1010:0223332,2023512
001111_1000:0223243,2023423
001111_1001:0223254,2023434
001111_1010:0223344,2023524
001111_1011:0223354,2023534
=== 全部是 <<== 末尾 覆盖/唯一极大值:类组总数=76, 参数组总数=176, 类组参数组关联总数=185, 多对多关联的参数组总数=9, 多对多关联的最大参数组总数=0 # 显示所有:扁平反转:参数组->极大参数组->类组 #max#multi#max_and_multi
000000_0000:000000_0000:0022000 #max
000001_0000:000101_0000:0022010
000100_0000:000101_0000:0022010
000101_0000:000101_0000:0022010 #max
000101_0001:000101_0001:0022020 #max
000010_0000:001010_0000:0022100
001000_0000:001010_0000:0022100
001010_0000:001010_0000:0022100 #max
000011_0000:001111_0100:0022110
000110_0000:001111_0100:0022110
000111_0000:001111_0100:0022110
001001_0000:001111_0100:0022110
001011_0000:001111_0100:0022110
001100_0000:001111_0100:0022110
001100_0100:001111_0100:0022110
001101_0000:001111_0100:0022110
001101_0100:001111_0100:0022110
001110_0000:001111_0100:0022110
001110_0100:001111_0100:0022110
001111_0000:001111_0100:0022110
001111_0100:001111_0100:0022110 #max
000111_0001:000111_0001:0022120 #max
001101_0001:001111_0101:0022121
001101_0101:001111_0101:0022121
001111_0001:001111_0101:0022121
001111_0101:001111_0101:0022121 #max
001010_0010:001010_0010:0022200 #max
001011_0010:001011_0010:0022210 #max
001110_0010:001111_0110:0022211
001110_0110:001111_0110:0022211
001111_0010:001111_0110:0022211
001111_0110:001111_0110:0022211 #max
001111_0011:001111_0111:0022221
001111_0111:001111_0111:0022221 #max
010000_0000:010000_0000:0122010 #max
010001_0000:010101_0000:0122020
010100_0000:010101_0000:0122020
010101_0000:010101_0000:0122020 #max
010101_0001:010101_0001:0122030 #max
010010_0000:011010_0000:0122110
011000_0000:011010_0000:0122110
011010_0000:011010_0000:0122110 #max
010011_0000:010011_0000:0122120 #max
010110_0000:011111_0100:0122121
010111_0000:011111_0100:0122121
011001_0000:011111_0100:0122121
011011_0000:011111_0100:0122121
011100_0000:011111_0100:0122121
011100_0100:011111_0100:0122121
011101_0000:011111_0100:0122121
011101_0100:011111_0100:0122121
011110_0000:011111_0100:0122121
011110_0100:011111_0100:0122121
011111_0000:011111_0100:0122121
011111_0100:011111_0100:0122121 #max
010111_0001:010111_0001:0122131 #max
011101_0001:011111_0101:0122132
011101_0101:011111_0101:0122132
011111_0001:011111_0101:0122132
011111_0101:011111_0101:0122132 #max
011010_0010:011010_0010:0122210 #max
011011_0010:011011_0010:0122221 #max
011110_0010:011111_0110:0122222
011110_0110:011111_0110:0122222
011111_0010:011111_0110:0122222
011111_0110:011111_0110:0122222 #max
011111_0011:011111_0111:0122232
011111_0111:011111_0111:0122232 #max
000011_1000:010011_1000:0223130 #multi
010011_1000:010011_1000:0223130 #max
000111_1000:010111_1000:0223142 #multi
010111_1000:010111_1000:0223142 #max
000111_1001:010111_1001:0223152 #multi
010111_1001:010111_1001:0223152 #max
001011_1000:011011_1000:0223232 #multi
011011_1000:011011_1000:0223232 #max
001111_1000:011111_1000:0223243 #multi
011111_1000:011111_1000:0223243 #max
001111_1001:011111_1001:0223254 #multi
011111_1001:011111_1001:0223254 #max
001011_1010:011011_1010:0223332 #multi
011011_1010:011011_1010:0223332 #max
001111_1010:011111_1010:0223344 #multi
011111_1010:011111_1010:0223344 #max
001111_1011:011111_1011:0223354 #multi
011111_1011:011111_1011:0223354 #max
100000_0000:100000_0000:1022100 #max
100001_0000:100101_0000:1022110
100100_0000:100101_0000:1022110
100101_0000:100101_0000:1022110 #max
100101_0001:100101_0001:1022120 #max
100010_0000:101010_0000:1022200
101000_0000:101010_0000:1022200
101010_0000:101010_0000:1022200 #max
100011_0000:100011_0000:1022210 #max
100110_0000:101111_0100:1022211
100111_0000:101111_0100:1022211
101001_0000:101111_0100:1022211
101011_0000:101111_0100:1022211
101100_0000:101111_0100:1022211
101100_0100:101111_0100:1022211
101101_0000:101111_0100:1022211
101101_0100:101111_0100:1022211
101110_0000:101111_0100:1022211
101110_0100:101111_0100:1022211
101111_0000:101111_0100:1022211
101111_0100:101111_0100:1022211 #max
100111_0001:100111_0001:1022221 #max
101101_0001:101111_0101:1022222
101101_0101:101111_0101:1022222
101111_0001:101111_0101:1022222
101111_0101:101111_0101:1022222 #max
101010_0010:101010_0010:1022300 #max
101011_0010:101011_0010:1022311 #max
101110_0010:101111_0110:1022312
101110_0110:101111_0110:1022312
101111_0010:101111_0110:1022312
101111_0110:101111_0110:1022312 #max
101111_0011:101111_0111:1022322
101111_0111:101111_0111:1022322 #max
110000_0000:110000_0000:1122110 #max
110001_0000:110001_0000:1122120 #max
110100_0000:110101_0000:1122121
110101_0000:110101_0000:1122121 #max
110101_0001:110101_0001:1122131 #max
110010_0000:110010_0000:1122210 #max
111000_0000:111010_0000:1122211
111010_0000:111010_0000:1122211 #max
110011_0000:110011_0000:1122220 #max
110110_0000:111111_0100:1122222
110111_0000:111111_0100:1122222
111001_0000:111111_0100:1122222
111011_0000:111111_0100:1122222
111100_0000:111111_0100:1122222
111100_0100:111111_0100:1122222
111101_0000:111111_0100:1122222
111101_0100:111111_0100:1122222
111110_0000:111111_0100:1122222
111110_0100:111111_0100:1122222
111111_0000:111111_0100:1122222
111111_0100:111111_0100:1122222 #max
110111_0001:110111_0001:1122232 #max
111101_0001:111111_0101:1122233
111101_0101:111111_0101:1122233
111111_0001:111111_0101:1122233
111111_0101:111111_0101:1122233 #max
111010_0010:111010_0010:1122311 #max
111011_0010:111011_0010:1122322 #max
111110_0010:111111_0110:1122323
111110_0110:111111_0110:1122323
111111_0010:111111_0110:1122323
111111_0110:111111_0110:1122323 #max
111111_0011:111111_0111:1122333
111111_0111:111111_0111:1122333 #max
110011_1000:110011_1000:1123220 #max
110111_1000:110111_1000:1123232 #max
110111_1001:110111_1001:1123242 #max
111011_1000:111011_1000:1123322 #max
111111_1000:111111_1100:1123333
111111_1100:111111_1100:1123333 #max
111111_1001:111111_1101:1123344
111111_1101:111111_1101:1123344 #max
111011_1010:111011_1010:1123422 #max
111111_1010:111111_1110:1123434
111111_1110:111111_1110:1123434 #max
111111_1011:111111_1111:1123444
111111_1111:111111_1111:1123444 #max
000011_1000:100011_1000:2023310 #multi
100011_1000:100011_1000:2023310 #max
000111_1000:100111_1000:2023322 #multi
100111_1000:100111_1000:2023322 #max
000111_1001:100111_1001:2023332 #multi
100111_1001:100111_1001:2023332 #max
001011_1000:101011_1000:2023412 #multi
101011_1000:101011_1000:2023412 #max
001111_1000:101111_1000:2023423 #multi
101111_1000:101111_1000:2023423 #max
001111_1001:101111_1001:2023434 #multi
101111_1001:101111_1001:2023434 #max
001011_1010:101011_1010:2023512 #multi
101011_1010:101011_1010:2023512 #max
001111_1010:101111_1010:2023524 #multi
101111_1010:101111_1010:2023524 #max
001111_1011:101111_1011:2023534 #multi
101111_1011:101111_1011:2023534 #max

======================


'''#'''
#]]]
) #_辅助推导冫输出文本
assert _辅助推导冫输出文本 in __doc__




class _乸无参类型:
    __slots__ = ()
    def __repr__(sf, /):
        return repr_helper(sf)

class 魖毶展翅树(ABC):
    '毶展翅树'
    __slots__ = ()
    @property
    @abstractmethod
    def 需求度纟分裂操作(sf, /):
        '-> uint%3 # 0:不支持分裂操作;1:分裂濒危;2:分裂不濒危'
    @property
    @abstractmethod
    def 欤需要冫合并操作(sf, /):
        '-> bool'

    @property
    @abstractmethod
    def 最小节点数纟翅膀(sf, /):
        '-> uint'
    @property
    @abstractmethod
    def 最小节点数纟更深节点(sf, /):
        '-> uint'
    @property
    @abstractmethod
    def 最优节点数纟更深节点(sf, /):
        '-> uint'
    @property
    @abstractmethod
    def 最大节点数纟更深节点(sf, /):
        '-> uint'
    @property
    @abstractmethod
    def 最大节点数纟翅膀(sf, /):
        '-> uint'
    @property
    @abstractmethod
    def 最大节点数纟光杆树(sf, /):
        '-> uint'







    @property
    def 欤需要冫分裂操作(sf, /):
        '-> bool'
        return not sf.需求度纟分裂操作==0
    @property
    def 欤分裂濒危(sf, /):
        '-> bool'
        return sf.需求度纟分裂操作==1
    @property
    def 欤分裂不濒危(sf, /):
        '-> bool'
        return sf.需求度纟分裂操作==2

    def __init__(sf, /):
        super().__init__()
        sf.verify()

    def verify(sf, /):
        check_int_ge(1, sf.最小节点数纟更深节点)
        check_int_ge(sf.最小节点数纟更深节点, sf.最大节点数纟更深节点)
        check_int_ge_le(sf.最小节点数纟更深节点, sf.最大节点数纟更深节点, sf.最优节点数纟更深节点)

        check_int_ge(1, sf.最小节点数纟翅膀)
        check_int_ge(sf.最小节点数纟翅膀, sf.最大节点数纟翅膀)

        check_int_ge(1, sf.最大节点数纟光杆树)
        ########################
        check_int_ge_lt(0, 3, sf.需求度纟分裂操作)
        check_type_is(bool, sf.欤需要冫合并操作)
        ########################
        #分裂冫防震荡冫滴血重生:[最小节点数纟翅膀+1+I <= 最小节点数纟更深节点]
        if sf.欤需要冫分裂操作:
            I = sf.欤分裂不濒危
            check_type_is(bool, I)
            if not sf.最小节点数纟翅膀+1+I <= sf.最小节点数纟更深节点: raise ValueError
        #合并冫覆盖:[最小节点数纟翅膀*2 >= 最小节点数纟更深节点 >= 2][最小节点数纟更深节点*2 <= 1+最大节点数纟更深节点]
        if sf.欤需要冫合并操作:
            if not sf.最小节点数纟翅膀*2 >= sf.最小节点数纟更深节点 >= 2: raise ValueError
            if not sf.最小节点数纟更深节点*2 <= 1+sf.最大节点数纟更深节点: raise ValueError

        #深度有限性:[最小节点数纟翅膀 >= 1]
        if not sf.最小节点数纟翅膀 >= 1: raise ValueError
        #树状非线性:[最小节点数纟更深节点 >= 2]
        if not sf.最小节点数纟更深节点 >= 2: raise ValueError

        #压入弹出冫防震荡:[最小节点数纟翅膀+最大节点数纟更深节点 <= 最大节点数纟翅膀]
        if not sf.最小节点数纟翅膀+sf.最大节点数纟更深节点 <= sf.最大节点数纟翅膀: raise ValueError

        #简化退化:[最小节点数纟翅膀+最大节点数纟翅膀 <= 1+最大节点数纟光杆树]
        if not sf.最小节点数纟翅膀+sf.最大节点数纟翅膀 <= 1+sf.最大节点数纟光杆树: raise ValueError
            # 简化编程:
            # [:约束牜简化编程牜弹出乊临界缺员乊空心]:here

        #简化进化:[1+最大节点数纟光杆树 <= 最大节点数纟翅膀*2-2]
        if not 1+sf.最大节点数纟光杆树 <= sf.最大节点数纟翅膀*2-2: raise ValueError
        return

    def 打包冫参数扌(sf, /):
        return (
        (sf.需求度纟分裂操作
        ,sf.欤需要冫合并操作
        ,sf.最小节点数纟翅膀
        ,sf.最小节点数纟更深节点
        ,sf.最优节点数纟更深节点
        ,sf.最大节点数纟更深节点
        ,sf.最大节点数纟翅膀
        ,sf.最大节点数纟光杆树
        ))
    def 转化为冫乸毶展翅树扌(sf, /):
        '-> 乸毶展翅树'
        cls = 乸毶展翅树
        if type(sf) is cls:
            ot = sf
        else:
            ot = cls(*sf.打包冫参数扌())
        return ot
#end-class 魖毶展翅树(ABC):


# [:六种不同情况冫四份最小化参数配置]:goto
class 乸最小化毶展翅树牜无分裂无合并(_乸无参类型, 魖毶展翅树):
    __slots__ = ()
    # [:最小化毶展翅树牜无分裂无合并:1_2_2_3_3]:goto
    需求度纟分裂操作 = 0
    欤需要冫合并操作 = False
    最小节点数纟翅膀 = 1
    最小节点数纟更深节点 = 2
    最大节点数纟更深节点 = 2
    最大节点数纟翅膀 = 3
    最大节点数纟光杆树 = 3
    ######################
    最优节点数纟更深节点 = 2
    ######################
最小化毶展翅树牜无分裂无合并 = 乸最小化毶展翅树牜无分裂无合并()
毶展翅树牜一二二三三牜无分裂无合并 = 最小化毶展翅树牜无分裂无合并

class 乸最小化毶展翅树牜有分裂有合并牜分裂不濒危(_乸无参类型, 魖毶展翅树):
    __slots__ = ()
    # [:最小化毶展翅树牜有分裂有合并牜分裂不濒危:2_4_7_9_10]:goto
    需求度纟分裂操作 = 2
    欤需要冫合并操作 = True
    最小节点数纟翅膀 = 2
    最小节点数纟更深节点 = 4
    最大节点数纟更深节点 = 7
    最大节点数纟翅膀 = 9
    最大节点数纟光杆树 = 10
    ######################
    最优节点数纟更深节点 = 4
    ######################
最小化毶展翅树牜有分裂有合并牜分裂不濒危 = 乸最小化毶展翅树牜有分裂有合并牜分裂不濒危()
毶展翅树牜二四七九十牜有分裂有合并牜分裂不濒危 = 最小化毶展翅树牜有分裂有合并牜分裂不濒危



class 乸最小化毶展翅树牜有分裂无合并牜分裂不濒危(_乸无参类型, 魖毶展翅树):
    __slots__ = ()
    # [:最小化毶展翅树牜有分裂无合并牜分裂不濒危:1_3_5_6_6]:goto
    需求度纟分裂操作 = 2
    欤需要冫合并操作 = False
    最小节点数纟翅膀 = 1
    最小节点数纟更深节点 = 3
    最大节点数纟更深节点 = 5
    最大节点数纟翅膀 = 6
    最大节点数纟光杆树 = 6
    ######################
    最优节点数纟更深节点 = 4
    ######################
最小化毶展翅树牜有分裂无合并牜分裂不濒危 = 乸最小化毶展翅树牜有分裂无合并牜分裂不濒危()
毶展翅树牜一三五六六牜有分裂无合并牜分裂不濒危 = 最小化毶展翅树牜有分裂无合并牜分裂不濒危



class _1_2_3_4_4(_乸无参类型, 魖毶展翅树):
    __slots__ = ()
    # 1_2_3_4_4:
    #   [:最小化毶展翅树牜有分裂有合并牜分裂濒危:1_2_3_4_4]:goto
    #   [:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_3_4_4]:goto
    #   [:最小化毶展翅树牜无分裂有合并:1_2_3_4_4]:goto
    最小节点数纟翅膀 = 1
    最小节点数纟更深节点 = 2
    最大节点数纟更深节点 = 3
    最大节点数纟翅膀 = 4
    最大节点数纟光杆树 = 4
    ######################
    最优节点数纟更深节点 = 2
    ######################


class 乸最小化毶展翅树牜有分裂有合并牜分裂濒危(_1_2_3_4_4):
    __slots__ = ()
    # [:最小化毶展翅树牜有分裂有合并牜分裂濒危:1_2_3_4_4]:goto
    需求度纟分裂操作 = 1
    欤需要冫合并操作 = True
最小化毶展翅树牜有分裂有合并牜分裂濒危 = 乸最小化毶展翅树牜有分裂有合并牜分裂濒危()
毶展翅树牜一二三四四牜有分裂有合并牜分裂濒危 = 最小化毶展翅树牜有分裂有合并牜分裂濒危

class 乸最小化毶展翅树牜有分裂无合并牜分裂濒危(_1_2_3_4_4):
    __slots__ = ()
    # [:最小化毶展翅树牜有分裂无合并牜分裂濒危:1_2_3_4_4]:goto
    需求度纟分裂操作 = 1
    欤需要冫合并操作 = False
最小化毶展翅树牜有分裂无合并牜分裂濒危 = 乸最小化毶展翅树牜有分裂无合并牜分裂濒危()
毶展翅树牜一二三四四牜有分裂无合并牜分裂濒危 = 最小化毶展翅树牜有分裂无合并牜分裂濒危

class 乸最小化毶展翅树牜无分裂有合并(_1_2_3_4_4):
    __slots__ = ()
    # [:最小化毶展翅树牜无分裂有合并:1_2_3_4_4]:goto
    需求度纟分裂操作 = 0
    欤需要冫合并操作 = True
最小化毶展翅树牜无分裂有合并 = 乸最小化毶展翅树牜无分裂有合并()
毶展翅树牜一二三四四牜无分裂有合并 = 最小化毶展翅树牜无分裂有合并




列表纟最小化毶展翅树 = (
(毶展翅树牜一二二三三牜无分裂无合并
,毶展翅树牜二四七九十牜有分裂有合并牜分裂不濒危
,毶展翅树牜一三五六六牜有分裂无合并牜分裂不濒危
,毶展翅树牜一二三四四牜有分裂有合并牜分裂濒危
,毶展翅树牜一二三四四牜有分裂无合并牜分裂濒危
,毶展翅树牜一二三四四牜无分裂有合并
))


def __():
    for x in 列表纟最小化毶展翅树:
        x.verify()
        #xxx:x.转化为冫乸毶展翅树扌() is x
__()

def 计算冫最优节点数纟更深节点牜偏心二幂扌(偏心, 最小节点数纟更深节点, 最大节点数纟更深节点, /):
    '-> 最优节点数纟更深节点{尽量:偏心二幂}'
    return 计算冫偏心二幂扌(偏心, 最小节点数纟更深节点, 最大节点数纟更深节点)
def 计算冫最优节点数纟更深节点牜偏心二幂牜翅膀节点数扌(最小节点数纟翅膀, 最大节点数纟翅膀, 最小节点数纟更深节点, 最大节点数纟更深节点, /):
    '-> 最优节点数纟更深节点{偏心比例:2/3}'
    偏心 = (最小节点数纟翅膀 +2*最大节点数纟翅膀)//3
    偏心 = max(偏心, 最小节点数纟更深节点)
    偏心 = min(偏心, 最大节点数纟更深节点)
    最优节点数纟更深节点 = 计算冫最优节点数纟更深节点牜偏心二幂扌(偏心, 最小节点数纟更深节点, 最大节点数纟更深节点)
    return 最优节点数纟更深节点

def 计算冫最优节点数纟更深节点牜居中二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点, /):
    '-> 最优节点数纟更深节点{尽量:居中二幂}'
    return 计算冫居中二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点)

def 计算冫最优节点数纟更深节点牜最小二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点, /):
    '-> 最优节点数纟更深节点{尽量:最小二幂}'
    return 计算冫最小二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点)

def _欤二幂扌(u, /):
    return u&(u-1) == 0
def __(f, /):
    for 最小节点数纟更深节点 in range(2, 20):
        最大节点数纟更深节点 = 2*最小节点数纟更深节点 -1
        最优节点数纟更深节点 = f(最小节点数纟更深节点, 最大节点数纟更深节点)
        assert 最小节点数纟更深节点 <= 最优节点数纟更深节点 <= 最大节点数纟更深节点
        assert _欤二幂扌(最优节点数纟更深节点)
__(计算冫最优节点数纟更深节点牜居中二幂扌)
__(计算冫最优节点数纟更深节点牜最小二幂扌)
class 乸毶展翅树(tuple, 魖毶展翅树):
    __slots__ = ()
    #___no_slots_ok___ = True
    def __repr__(sf, /):
        return repr_helper(sf, *sf)

    def __new__(cls, 需求度纟分裂操作, 欤需要冫合并操作, 最小节点数纟翅膀,最小节点数纟更深节点,鬽最优节点数纟更深节点,最大节点数纟更深节点,最大节点数纟翅膀,最大节点数纟光杆树, /):
        if 鬽最优节点数纟更深节点 is None:
            #最优节点数纟更深节点 = 计算冫最优节点数纟更深节点牜最小二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点)
            #最优节点数纟更深节点 = 计算冫最优节点数纟更深节点牜居中二幂扌(最小节点数纟更深节点, 最大节点数纟更深节点)
            最优节点数纟更深节点 = 计算冫最优节点数纟更深节点牜偏心二幂牜翅膀节点数扌(最小节点数纟翅膀, 最大节点数纟翅膀, 最小节点数纟更深节点, 最大节点数纟更深节点)
            assert _欤二幂扌(最优节点数纟更深节点) or 最小节点数纟更深节点*2 > 1+最大节点数纟更深节点#not 欤需要冫合并操作
        else:
            最优节点数纟更深节点 = 鬽最优节点数纟更深节点

        sf = tuple.__new__(cls, [需求度纟分裂操作, 欤需要冫合并操作, 最小节点数纟翅膀,最小节点数纟更深节点,最优节点数纟更深节点,最大节点数纟更深节点,最大节点数纟翅膀,最大节点数纟光杆树])
        assert sf.需求度纟分裂操作 is 需求度纟分裂操作
        assert sf.欤需要冫合并操作 is 欤需要冫合并操作
        assert sf.最小节点数纟翅膀 is 最小节点数纟翅膀
        assert sf.最小节点数纟更深节点 is 最小节点数纟更深节点
        assert sf.最优节点数纟更深节点 is 最优节点数纟更深节点
        assert sf.最大节点数纟更深节点 is 最大节点数纟更深节点
        assert sf.最大节点数纟翅膀 is 最大节点数纟翅膀
        assert sf.最大节点数纟光杆树 is 最大节点数纟光杆树
        assert len(sf) == 8
        sf.verify()
        return sf
    def __init__(sf, /, *args):
        pass

    @property
    @override
    def 需求度纟分裂操作(sf, /):
        '-> uint%3 # 0:不支持分裂操作;1:分裂濒危;2:分裂不濒危'
        return sf[0]
    @property
    @override
    def 欤需要冫合并操作(sf, /):
        '-> bool'
        return sf[1]

    @property
    @override
    def 最小节点数纟翅膀(sf, /):
        '-> uint'
        return sf[2]
    @property
    @override
    def 最小节点数纟更深节点(sf, /):
        '-> uint'
        return sf[3]
    @property
    @override
    def 最优节点数纟更深节点(sf, /):
        '-> uint'
        return sf[4]
    @property
    @override
    def 最大节点数纟更深节点(sf, /):
        '-> uint'
        return sf[5]
    @property
    @override
    def 最大节点数纟翅膀(sf, /):
        '-> uint'
        return sf[6]
    @property
    @override
    def 最大节点数纟光杆树(sf, /):
        '-> uint'
        return sf[7]

    ######################
    ######################
    ######################

    @classmethod
    def 构造冫剩余参数范围扌(cls, u, v, w, m, /, *, 欤需要冫分裂操作, 欤需要冫合并操作):
        '-> (构造冫毶展翅树牜囜囜囜扌, ((I2max_n|J2max_n) if len==2 else [max_n]{len==1}))'
        #_测试冫乸毶展翅树扌
        check_type_is(bool, 欤需要冫分裂操作)
        check_type_is(bool, 欤需要冫合并操作)
        check_int_ge(0, u)
        check_int_ge(0, v)
        check_int_ge(0, w)
        check_int_ge(0, m)
        if not 欤需要冫分裂操作 and not 欤需要冫合并操作:
            f = cls.构造冫毶展翅树牜无分裂无合并扌
            max_ls = [(u+v+m)]
        elif not 欤需要冫分裂操作 and 欤需要冫合并操作:
            f = cls.构造冫毶展翅树牜无分裂有合并扌
            max_ls = [(1+4*u+2*J+w+m) for J in range(2)] #J
        elif 欤需要冫分裂操作 and not 欤需要冫合并操作:
            f = cls.构造冫毶展翅树牜有分裂无合并扌
            max_ls = [(1+2*u+2*(v+I)+w+m) for I in range(2)] #I
        elif 欤需要冫分裂操作 and 欤需要冫合并操作:
            f = cls.构造冫毶展翅树牜有分裂有合并扌
            max_ls = [(1+2*u+4*(v+I)+w+m) for I in range(2)] #I
        else:
            raise 000
        return f, tuple(max_ls)
    @classmethod
    def 构造冫毶展翅树牜无分裂无合并扌(cls, u, v, w, m, n, /):
        # [:公式纟毶展翅树牜无分裂无合并]:goto
        check_int_ge(0, u)
        check_int_ge(0, v)
        check_int_ge(0, w)
        check_int_ge(0, m)
        check_int_ge_le(0, (u+v+m), n)
        return (cls
        (需求度纟分裂操作 := 0
        ,欤需要冫合并操作 := False
        ,最小节点数纟翅膀 := (1+w)
        ,最小节点数纟更深节点 := (2+u)
        ,鬽最优节点数纟更深节点 := None
        ,最大节点数纟更深节点 := (2+u+v)
        ,最大节点数纟翅膀 := (3+u+v+w+m)
        ,最大节点数纟光杆树 := (3+u+v+2*w+m+n)
        ))
    @classmethod
    def 构造冫毶展翅树牜有分裂有合并扌(cls, u, v, w, m, n, I, /):
        # [:公式纟毶展翅树牜有分裂有合并]:goto
        check_int_ge(0, u)
        check_int_ge(0, v)
        check_int_ge(0, w)
        check_int_ge(0, m)
        check_int_ge_le(0, 1, I)
        [vI := v+I]
        [u1 := u+1]
        check_int_ge_le(0, (1+2*u+4*vI+w+m), n)
        return (cls
        (需求度纟分裂操作 := 1+I
        ,欤需要冫合并操作 := True
        ,最小节点数纟翅膀 := (u1+vI)
        ,最小节点数纟更深节点 := (1+u1+2*vI)
        ,鬽最优节点数纟更深节点 := None
        ,最大节点数纟更深节点 := (1+2*u1+4*vI+w)
        ,最大节点数纟翅膀 := (1+3*u1+5*vI+w+m)
        ,最大节点数纟光杆树 := (4*u1+6*vI+w+m+n)
        ))

    @classmethod
    def 构造冫毶展翅树牜有分裂无合并扌(cls, u, v, w, m, n, I, /):
        # [:公式纟毶展翅树牜有分裂无合并]:goto
        check_int_ge(0, u)
        check_int_ge(0, v)
        check_int_ge(0, w)
        check_int_ge(0, m)
        check_int_ge_le(0, 1, I)
        [vI := v+I]
        [u1 := u+1]
        check_int_ge_le(0, (1+2*u+2*vI+w+m), n)
        return (cls
        (需求度纟分裂操作 := 1+I
        ,欤需要冫合并操作 := False
        ,最小节点数纟翅膀 := (u1)
        ,最小节点数纟更深节点 := (1+u1+vI)
        ,鬽最优节点数纟更深节点 := None
        ,最大节点数纟更深节点 := (1+2*u1+2*vI+w)
        ,最大节点数纟翅膀 := (1+3*u1+2*vI+w+m)
        ,最大节点数纟光杆树 := (4*u1+2*vI+w+m+n)
        ))
    @classmethod
    def 构造冫毶展翅树牜无分裂有合并扌(cls, u, v, w, m, n, J, /):
        # [:公式纟毶展翅树牜无分裂有合并]:goto
        check_int_ge(0, u)
        check_int_ge(0, v)
        check_int_ge(0, w)
        check_int_ge(0, m)
        check_int_ge_le(0, 1, J)
        check_int_ge_le(0, (1+4*u+2*J+w+m), n)
        return (cls
        (需求度纟分裂操作 := 0
        ,欤需要冫合并操作 := True
        ,最小节点数纟翅膀 := (1+u+J+v)
        ,最小节点数纟更深节点 := (2+2*u+J)
        ,鬽最优节点数纟更深节点 := None
        ,最大节点数纟更深节点 := (3+4*u+2*J+w)
        ,最大节点数纟翅膀 := (4+5*u+3*J+v+w+m)
        ,最大节点数纟光杆树 := (4+6*u+4*J+2*v+w+m+n)
        ))

def _测试冫乸毶展翅树扌(max_u, max_v, max_w, max_m, /, *, 欤显示, 欤空心):
    #构造冫剩余参数范围扌
    cls = 乸毶展翅树
    tf = (False, True)
    it = product(*(range(1+max_x) for max_x in [max_u, max_v, max_w, max_m]), tf, tf)
    if 欤空心:
        def ns5max_n(max_n, /):
            '-> [n]'
            return [0, max_n] if max_n else range(1+max_n)
    else:
        def ns5max_n(max_n, /):
            '-> [n]'
            return range(1+max_n)
    cnts = [0]
    def f(*args):
        r = g(*args)
        cnts[0] += 1
        cnt = cnts[0]
        if 欤显示:
            print(args)
            print(欤需要冫分裂操作, 欤需要冫合并操作)
            print(r)
            print(f'==={cnt}===')
        return r
    for (u, v, w, m, 欤需要冫分裂操作, 欤需要冫合并操作) in it:
        g, max_ls = cls.构造冫剩余参数范围扌(u, v, w, m, 欤需要冫分裂操作=欤需要冫分裂操作, 欤需要冫合并操作=欤需要冫合并操作)
        if len(max_ls) == 1:
            [max_n] = max_ls
            for n in ns5max_n(max_n):
                f(u, v, w, m, n)
        elif len(max_ls) == 2:
            IJ2max_n = max_ls
            for IJ, max_n in enumerate(max_ls):
                for n in ns5max_n(max_n):
                    f(u, v, w, m, n, IJ)
#end-class 乸毶展翅树(tuple, 魖毶展翅树):










__all__
from seed.data_funcs.finger_tree__config import 毶展翅树牜一二二三三牜无分裂无合并,毶展翅树牜二四七九十牜有分裂有合并牜分裂不濒危,毶展翅树牜一三五六六牜有分裂无合并牜分裂不濒危,毶展翅树牜一二三四四牜有分裂有合并牜分裂濒危
from seed.data_funcs.finger_tree__config import 乸毶展翅树

from seed.data_funcs.finger_tree__config import *

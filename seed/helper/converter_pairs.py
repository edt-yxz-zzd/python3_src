#__all__:goto
r'''[[[
e ../../python3_src/seed/helper/converter_pairs.py

collection module as doc

modules:
    pickle — Python object serialization
    shelve — Python object persistence
        {key/str:obj}

[[
import shelve
d = shelve.open(filename) # open, with (g)dbm filename -- no suffix
d[key] = data
    # store data at key (overwrites old data if using an existing key)
data = d[key]
    # retrieve a COPY of the data at key (raise KeyError if no such key)
    # -- NOTE that this access returns a *copy* of the entry!
del d[key]
    # delete data stored at key (raises KeyError if no such key)
flag = key in d
    # true if the key exists
list = d.keys()
    # a list of all existing keys (slow!)

d.close()
    # close it

]]

seed.helper.converter_pairs
py -m nn_ns.app.debug_cmd   seed.helper.converter_pairs -x
py -m nn_ns.app.doctest_cmd seed.helper.converter_pairs:__doc__ -ht
py_adhoc_call   seed.helper.converter_pairs   @f
#]]]'''
__all__ = r'''
converter_pairs
'''.split()#'''
__all__
from seed.tiny import echo# echo_args
from seed.helper.stable_repr import stable_repr
from seed.helper.safe_eval import safe_eval
from ast import literal_eval


import pickle
import json
#json.dumps = dumps(obj, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw) -> str
#   ensure_ascii=False
#   sort_keys=True
#json.loads = loads(s, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
#
#pickle.dumps = dumps(obj, protocol=None, *, fix_imports=True, buffer_callback=None) -> bytes
#pickle.loads = loads(data, /, *, fix_imports=True, encoding='ASCII', errors='strict', buffers=())
#   Optional keyword arguments are *fix_imports*, *encoding* and *errors*, which are used to control compatibility support for pickle stream generated by Python 2.
#

converter_pairs = (
# (obj -> str, str -> obj)
[(json.dumps, json.loads)
,(stable_repr, literal_eval)
,(stable_repr, safe_eval)
,(repr, eval)
# (obj -> bytes, bytes -> obj)
,(pickle.dumps, pickle.loads)
#,(echo, echo)
])



#file:
#pickle.dump = dump(obj, file, protocol=None, *, fix_imports=True, buffer_callback=None)
#pickle.load = load(file, *, fix_imports=True, encoding='ASCII', errors='strict', buffers=())
#
#json.dump = dump(obj, fp, *, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw)
#json.load = load(fp, *, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw)
#

__all__
from seed.helper.converter_pairs import converter_pairs
from seed.helper.converter_pairs import *
